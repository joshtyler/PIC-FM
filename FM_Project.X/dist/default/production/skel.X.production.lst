

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Mar 27 16:38:52 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  00169C                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for main@F5991
    51  00169C  48                 	db	72
    52  00169D  45                 	db	69
    53  00169E  4C                 	db	76
    54  00169F  4C                 	db	76
    55  0016A0  4F                 	db	79
    56  0016A1  00                 	db	0
    57                           
    58                           	psect	idataBANK0
    59  001380                     __pidataBANK0:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _stationName
    63  001380  55                 	db	85
    64  001381  4E                 	db	78
    65  001382  4B                 	db	75
    66  001383  4E                 	db	78
    67  001384  4F                 	db	79
    68  001385  57                 	db	87
    69  001386  4E                 	db	78
    70  001387  00                 	db	0
    71  001388  00                 	db	0
    72  001389  00                 	db	0
    73  00138A  00                 	db	0
    74  00138B  00                 	db	0
    75  00138C  00                 	db	0
    76  00138D  00                 	db	0
    77  00138E  00                 	db	0
    78  00138F  42                 	db	66
    79  001390  42                 	db	66
    80  001391  43                 	db	67
    81  001392  5B                 	db	91
    82  001393  54                 	db	84
    83  001394  57                 	db	87
    84  001395  4F                 	db	79
    85  001396  00                 	db	0
    86  001397  00                 	db	0
    87  001398  00                 	db	0
    88  001399  00                 	db	0
    89  00139A  00                 	db	0
    90  00139B  00                 	db	0
    91  00139C  00                 	db	0
    92  00139D  00                 	db	0
    93  00139E  42                 	db	66
    94  00139F  42                 	db	66
    95  0013A0  43                 	db	67
    96  0013A1  5B                 	db	91
    97  0013A2  54                 	db	84
    98  0013A3  48                 	db	72
    99  0013A4  52                 	db	82
   100  0013A5  45                 	db	69
   101  0013A6  45                 	db	69
   102  0013A7  00                 	db	0
   103  0013A8  00                 	db	0
   104  0013A9  00                 	db	0
   105  0013AA  00                 	db	0
   106  0013AB  00                 	db	0
   107  0013AC  00                 	db	0
   108  0013AD  45                 	db	69
   109  0013AE  41                 	db	65
   110  0013AF  47                 	db	71
   111  0013B0  4C                 	db	76
   112  0013B1  45                 	db	69
   113  0013B2  00                 	db	0
   114  0013B3  00                 	db	0
   115  0013B4  00                 	db	0
   116  0013B5  00                 	db	0
   117  0013B6  00                 	db	0
   118  0013B7  00                 	db	0
   119  0013B8  00                 	db	0
   120  0013B9  00                 	db	0
   121  0013BA  00                 	db	0
   122  0013BB  00                 	db	0
   123  0013BC  42                 	db	66
   124  0013BD  42                 	db	66
   125  0013BE  43                 	db	67
   126  0013BF  5B                 	db	91
   127  0013C0  4F                 	db	79
   128  0013C1  4E                 	db	78
   129  0013C2  45                 	db	69
   130  0013C3  00                 	db	0
   131  0013C4  00                 	db	0
   132  0013C5  00                 	db	0
   133  0013C6  00                 	db	0
   134  0013C7  00                 	db	0
   135  0013C8  00                 	db	0
   136  0013C9  00                 	db	0
   137  0013CA  00                 	db	0
   138  0013CB  55                 	db	85
   139  0013CC  4E                 	db	78
   140  0013CD  4B                 	db	75
   141  0013CE  4E                 	db	78
   142  0013CF  4F                 	db	79
   143  0013D0  57                 	db	87
   144  0013D1  4E                 	db	78
   145  0013D2  00                 	db	0
   146  0013D3  00                 	db	0
   147  0013D4  00                 	db	0
   148  0013D5  00                 	db	0
   149  0013D6  00                 	db	0
   150  0013D7  00                 	db	0
   151  0013D8  00                 	db	0
   152  0013D9  00                 	db	0
   153                           
   154                           	psect	smallconst
   155  000300                     __psmallconst:
   156                           	opt stack 0
   157  000300                     _volumePair:
   158                           	opt stack 0
   159  000300  0780               	dw	1920
   160  000302  0780               	dw	1920
   161  000304  0780               	dw	1920
   162  000306  0780               	dw	1920
   163  000308  0580               	dw	1408
   164  00030A  0580               	dw	1408
   165  00030C  0580               	dw	1408
   166  00030E  0500               	dw	1280
   167  000310  0480               	dw	1152
   168  000312  0400               	dw	1024
   169  000314  0380               	dw	896
   170  000316  0300               	dw	768
   171  000318  0300               	dw	768
   172  00031A  0300               	dw	768
   173  00031C  0180               	dw	384
   174  00031E  0180               	dw	384
   175  000320  0100               	dw	256
   176  000322  0080               	dw	128
   177  000324  0000               	dw	0
   178  000326  0000               	dw	0
   179  000328  C000               	dw	49152
   180  00032A  D000               	dw	53248
   181  00032C  F000               	dw	61440
   182  00032E  C000               	dw	49152
   183  000330  D000               	dw	53248
   184  000332  F000               	dw	61440
   185  000334  F000               	dw	61440
   186  000336  F000               	dw	61440
   187  000338  F000               	dw	61440
   188  00033A  F000               	dw	61440
   189  00033C  D000               	dw	53248
   190  00033E  E000               	dw	57344
   191  000340  F000               	dw	61440
   192  000342  E000               	dw	57344
   193  000344  F000               	dw	61440
   194  000346  F000               	dw	61440
   195  000348  F000               	dw	61440
   196  00034A  F000               	dw	61440
   197  00034C                     __end_of_volumePair:
   198                           	opt stack 0
   199  00034C                     _regDflt:
   200                           	opt stack 0
   201  00034C  FFFF               	dw	65535
   202  00034E  5B15               	dw	23317
   203  000350  D0B9               	dw	53433
   204  000352  A010               	dw	40976
   205  000354  0780               	dw	1920
   206  000356  28AB               	dw	10411
   207  000358  6400               	dw	25600
   208  00035A  1EE7               	dw	7911
   209  00035C  7141               	dw	28993
   210  00035E  007D               	dw	125
   211  000360  82C6               	dw	33478
   212  000362  4F55               	dw	20309
   213  000364  970C               	dw	38668
   214  000366  B845               	dw	47173
   215  000368  FC2D               	dw	64557
   216  00036A  8097               	dw	32919
   217  00036C  04A1               	dw	1185
   218  00036E  DF6A               	dw	57194
   219  000370                     __end_of_regDflt:
   220                           	opt stack 0
   221  000370                     _LCDLetters:
   222                           	opt stack 0
   223  000370  77                 	db	119
   224  000371  7C                 	db	124
   225  000372  39                 	db	57
   226  000373  5E                 	db	94
   227  000374  79                 	db	121
   228  000375  71                 	db	113
   229  000376  6F                 	db	111
   230  000377  76                 	db	118
   231  000378  30                 	db	48
   232  000379  1E                 	db	30
   233  00037A  76                 	db	118
   234  00037B  38                 	db	56
   235  00037C  15                 	db	21
   236  00037D  54                 	db	84
   237  00037E  3F                 	db	63
   238  00037F  73                 	db	115
   239  000380  67                 	db	103
   240  000381  50                 	db	80
   241  000382  6D                 	db	109
   242  000383  78                 	db	120
   243  000384  3E                 	db	62
   244  000385  1C                 	db	28
   245  000386  2A                 	db	42
   246  000387  76                 	db	118
   247  000388  5B                 	db	91
   248  000389  6E                 	db	110
   249  00038A  00                 	db	0
   250  00038B                     __end_of_LCDLetters:
   251                           	opt stack 0
   252  00038B                     _station:
   253                           	opt stack 0
   254  00038B  036B               	dw	875
   255  00038D  0371               	dw	881
   256  00038F  0387               	dw	903
   257  000391  03C4               	dw	964
   258  000393  0416               	dw	1046
   259  000395  0469               	dw	1129
   260  000397                     __end_of_station:
   261                           	opt stack 0
   262  000397                     _segData:
   263                           	opt stack 0
   264  000397  3F                 	db	63
   265  000398  06                 	db	6
   266  000399  5B                 	db	91
   267  00039A  4F                 	db	79
   268  00039B  66                 	db	102
   269  00039C  6D                 	db	109
   270  00039D  7D                 	db	125
   271  00039E  07                 	db	7
   272  00039F  7F                 	db	127
   273  0003A0  6F                 	db	111
   274  0003A1                     __end_of_segData:
   275                           	opt stack 0
   276  0000                     _ADCON1	set	4033
   277  0000                     _INTCONbits	set	4082
   278  0000                     _LCDCON	set	3929
   279  0000                     _LCDDATA1	set	3937
   280  0000                     _LCDDATA2	set	3938
   281  0000                     _LCDDATA3	set	3939
   282  0000                     _LCDPS	set	3928
   283  0000                     _LCDSE0	set	3930
   284  0000                     _LCDSE1	set	3931
   285  0000                     _LCDSE2	set	3932
   286  0000                     _LCDSE3	set	3933
   287  0000                     _OSCCON	set	4051
   288  0000                     _PIR1bits	set	3998
   289  0000                     _PORTA	set	3968
   290  0000                     _PORTB	set	3969
   291  0000                     _PORTC	set	3970
   292  0000                     _PORTG	set	3974
   293  0000                     _SSPADD	set	4040
   294  0000                     _SSPBUF	set	4041
   295  0000                     _SSPCON1	set	4038
   296  0000                     _SSPCON1bits	set	4038
   297  0000                     _SSPCON2	set	4037
   298  0000                     _SSPCON2bits	set	4037
   299  0000                     _SSPSTAT	set	4039
   300  0000                     _SSPSTATbits	set	4039
   301  0000                     _T0CON	set	4053
   302  0000                     _T0CONbits	set	4053
   303  0000                     _TMR0H	set	4055
   304  0000                     _TMR0L	set	4054
   305  0000                     _TRISA	set	3986
   306  0000                     _TRISB	set	3987
   307  0000                     _TRISC	set	3988
   308  0000                     _TRISCbits	set	3988
   309  0000                     _TRISG	set	3992
   310  0000                     _LCDDATA0	set	3936
   311                           
   312                           ; #config settings
   313  0003A1  00                 	db	0	; dummy byte at the end
   314  0000                     
   315                           	psect	cinit
   316  001324                     __pcinit:
   317                           	opt stack 0
   318  001324                     start_initialization:
   319                           	opt stack 0
   320  001324                     __initialization:
   321                           	opt stack 0
   322                           
   323                           ; Clear objects allocated to BANK0 (36 bytes)
   324  001324  EE00  F0BA         	lfsr	0,__pbssBANK0
   325  001328  0E24               	movlw	36
   326  00132A                     clear_0:
   327  00132A  6AEE               	clrf	postinc0,c
   328  00132C  06E8               	decf	wreg,f,c
   329  00132E  E1FD               	bnz	clear_0
   330                           
   331                           ; Clear objects allocated to COMRAM (3 bytes)
   332  001330  6A42               	clrf	(__pbssCOMRAM+2)& (0+255),c
   333  001332  6A41               	clrf	(__pbssCOMRAM+1)& (0+255),c
   334  001334  6A40               	clrf	__pbssCOMRAM& (0+255),c
   335                           
   336                           ; Initialize objects allocated to BANK0 (90 bytes)
   337                           ; load TBLPTR registers with __pidataBANK0
   338  001336  0E80               	movlw	low __pidataBANK0
   339  001338  6EF6               	movwf	tblptrl,c
   340  00133A  0E13               	movlw	high __pidataBANK0
   341  00133C  6EF7               	movwf	tblptrh,c
   342  00133E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   343  001340  6EF8               	movwf	tblptru,c
   344  001342  EE00  F060         	lfsr	0,__pdataBANK0
   345  001346  EE10 F05A          	lfsr	1,90
   346  00134A                     copy_data0:
   347  00134A  0009               	tblrd		*+
   348  00134C  CFF5 FFEE          	movff	tablat,postinc0
   349  001350  50E5               	movf	postdec1,w,c
   350  001352  50E1               	movf	fsr1l,w,c
   351  001354  E1FA               	bnz	copy_data0
   352                           
   353                           ; Initialize objects allocated to COMRAM (6 bytes)
   354                           ; load TBLPTR registers with __pidataCOMRAM
   355  001356  0E9C               	movlw	low __pidataCOMRAM
   356  001358  6EF6               	movwf	tblptrl,c
   357  00135A  0E16               	movlw	high __pidataCOMRAM
   358  00135C  6EF7               	movwf	tblptrh,c
   359  00135E  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   360  001360  6EF8               	movwf	tblptru,c
   361  001362  EE00  F03A         	lfsr	0,__pdataCOMRAM
   362  001366  EE10 F006          	lfsr	1,6
   363  00136A                     copy_data1:
   364  00136A  0009               	tblrd		*+
   365  00136C  CFF5 FFEE          	movff	tablat,postinc0
   366  001370  50E5               	movf	postdec1,w,c
   367  001372  50E1               	movf	fsr1l,w,c
   368  001374  E1FA               	bnz	copy_data1
   369  001376                     end_of_initialization:
   370                           	opt stack 0
   371  001376                     __end_of__initialization:
   372                           	opt stack 0
   373  001376  0E00               	movlw	low (__Lmediumconst shr (0+16))
   374  001378  6EF8               	movwf	tblptru,c
   375  00137A  0100               	movlb	0
   376  00137C  EFD1  F001         	goto	_main	;jump to C main() function
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bssCOMRAM
   387  000040                     __pbssCOMRAM:
   388                           	opt stack 0
   389  000040                     displayText@F5975:
   390                           	opt stack 0
   391  000040                     	ds	3
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	dataCOMRAM
   402  00003A                     __pdataCOMRAM:
   403                           	opt stack 0
   404  00003A                     main@F5991:
   405                           	opt stack 0
   406  00003A                     	ds	6
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	bssBANK0
   417  0000BA                     __pbssBANK0:
   418                           	opt stack 0
   419  0000BA                     _regImg:
   420                           	opt stack 0
   421  0000BA                     	ds	36
   422                           tblptru	equ	0xFF8
   423                           tblptrh	equ	0xFF7
   424                           tblptrl	equ	0xFF6
   425                           tablat	equ	0xFF5
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           postdec1	equ	0xFE5
   429                           fsr1l	equ	0xFE1
   430                           
   431                           	psect	dataBANK0
   432  000060                     __pdataBANK0:
   433                           	opt stack 0
   434  000060                     _stationName:
   435                           	opt stack 0
   436  000060                     	ds	90
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           postdec1	equ	0xFE5
   444                           fsr1l	equ	0xFE1
   445                           
   446                           	psect	cstackCOMRAM
   447  000001                     __pcstackCOMRAM:
   448                           	opt stack 0
   449  000001                     ?_OpenI2C:
   450                           	opt stack 0
   451  000001                     ?_dly:
   452                           	opt stack 0
   453  000001                     ?_setscn:
   454                           	opt stack 0
   455  000001                     ?_segWrt:
   456                           	opt stack 0
   457  000001                     ?_charWrt:
   458                           	opt stack 0
   459  000001                     ?_testPinState:
   460                           	opt stack 0
   461  000001                     ?_WriteI2C:
   462                           	opt stack 0
   463  000001                     ?___lwdiv:
   464                           	opt stack 0
   465  000001                     testPinState@oldPin:
   466                           	opt stack 0
   467  000001                     setscn@state:
   468                           	opt stack 0
   469  000001                     segWrt@segOrd:
   470                           	opt stack 0
   471  000001                     charWrt@numToDisp:
   472                           	opt stack 0
   473  000001                     OpenI2C@sync_mode:
   474                           	opt stack 0
   475  000001                     WriteI2C@data_out:
   476                           	opt stack 0
   477  000001                     dly@d:
   478                           	opt stack 0
   479  000001                     ___lwdiv@dividend:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x0
   483  000001                     	ds	1
   484  000002                     ??_setscn:
   485  000002                     ?_FMwrite:
   486                           	opt stack 0
   487  000002                     ?_FMread:
   488                           	opt stack 0
   489  000002                     testPinState@newPin:
   490                           	opt stack 0
   491  000002                     segWrt@state:
   492                           	opt stack 0
   493  000002                     charWrt@DigitNo:
   494                           	opt stack 0
   495  000002                     FMwrite@adr:
   496                           	opt stack 0
   497  000002                     FMread@regAddr:
   498                           	opt stack 0
   499  000002                     OpenI2C@slew:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x1
   503  000002                     	ds	1
   504  000003                     ??_Init:
   505  000003                     ??_segWrt:
   506  000003                     ??_FMwrite:
   507  000003                     setscn@data:
   508                           	opt stack 0
   509  000003                     testPinState@butn:
   510                           	opt stack 0
   511  000003                     dly@i:
   512                           	opt stack 0
   513  000003                     FMread@data:
   514                           	opt stack 0
   515  000003                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519  000003                     	ds	1
   520  000004                     ?_showVol:
   521                           	opt stack 0
   522  000004                     ?_showChan:
   523                           	opt stack 0
   524  000004                     showVol@volume:
   525                           	opt stack 0
   526  000004                     showChan@channel:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x3
   530  000004                     	ds	1
   531  000005                     ??_FMread:
   532  000005                     ??___lwdiv:
   533  000005                     ?_butnEvent:
   534                           	opt stack 0
   535  000005                     FMwrite@firstByt:
   536                           	opt stack 0
   537  000005                     butnEvent@butn:
   538                           	opt stack 0
   539  000005                     segWrt@LCReg:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x4
   543  000005                     	ds	1
   544  000006                     ??_showVol:
   545  000006                     ??_showChan:
   546  000006                     FMwrite@secndByt:
   547                           	opt stack 0
   548  000006                     ___lwdiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x5
   552  000006                     	ds	1
   553  000007                     ?_volSet:
   554                           	opt stack 0
   555  000007                     butnEvent@oldPin:
   556                           	opt stack 0
   557  000007                     segWrt@bitSelect:
   558                           	opt stack 0
   559  000007                     volSet@vol:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x6
   563  000007                     	ds	1
   564  000008                     butnEvent@newPin:
   565                           	opt stack 0
   566  000008                     ___lwdiv@counter:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x7
   570  000008                     	ds	1
   571  000009                     ?___wmul:
   572                           	opt stack 0
   573  000009                     butnEvent@returnVal:
   574                           	opt stack 0
   575  000009                     volSet@dir:
   576                           	opt stack 0
   577  000009                     ___wmul@multiplier:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	1
   582  00000A                     ??_volSet:
   583                           
   584                           ; 0 bytes @ 0x9
   585  00000A                     	ds	1
   586  00000B                     FMread@firstByt:
   587                           	opt stack 0
   588  00000B                     ___wmul@multiplicand:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0xA
   592  00000B                     	ds	1
   593  00000C                     FMread@secndByt:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0xB
   597  00000C                     	ds	1
   598  00000D                     ?_FMready:
   599                           	opt stack 0
   600  00000D                     ?_FMvers:
   601                           	opt stack 0
   602  00000D                     FMready@rdy:
   603                           	opt stack 0
   604  00000D                     FMvers@vsn:
   605                           	opt stack 0
   606  00000D                     ___wmul@product:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0xC
   610  00000D                     	ds	2
   611  00000F                     ??_FMready:
   612  00000F                     ??_FMvers:
   613  00000F                     ?_showFreq:
   614                           	opt stack 0
   615  00000F                     ?_displayText:
   616                           	opt stack 0
   617  00000F                     showFreq@frequency:
   618                           	opt stack 0
   619  00000F                     displayText@str:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0xE
   623  00000F                     	ds	2
   624  000011                     ??_showFreq:
   625  000011                     FMready@sts:
   626                           	opt stack 0
   627  000011                     displayText@pos:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x10
   631  000011                     	ds	2
   632  000013                     ??_FMinit:
   633  000013                     ??_displayText:
   634  000013                     ?_FMfrequenc:
   635                           	opt stack 0
   636  000013                     ?_setScan:
   637                           	opt stack 0
   638  000013                     setScan@dir:
   639                           	opt stack 0
   640  000013                     FMfrequenc@f:
   641                           	opt stack 0
   642  000013                     showFreq@display:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x12
   646  000013                     	ds	2
   647  000015                     ??_FMfrequenc:
   648  000015                     ??_setScan:
   649  000015                     FMinit@dat:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x14
   653  000015                     	ds	2
   654  000017                     FMinit@ad:
   655                           	opt stack 0
   656  000017                     FMfrequenc@cn:
   657                           	opt stack 0
   658  000017                     setScan@dat:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x16
   662  000017                     	ds	1
   663  000018                     displayText@display:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x17
   667  000018                     	ds	1
   668  000019                     FMfrequenc@dat:
   669                           	opt stack 0
   670  000019                     setScan@chanRgstr:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x18
   674  000019                     	ds	2
   675  00001B                     ?_manualTune:
   676                           	opt stack 0
   677  00001B                     ?_nextChan:
   678                           	opt stack 0
   679  00001B                     displayText@flag:
   680                           	opt stack 0
   681  00001B                     manualTune@freq:
   682                           	opt stack 0
   683  00001B                     nextChan@chan:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x1A
   687  00001B                     	ds	1
   688  00001C                     displayText@i:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x1B
   692  00001C                     	ds	1
   693  00001D                     manualTune@dir:
   694                           	opt stack 0
   695  00001D                     nextChan@dir:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1C
   699  00001D                     	ds	1
   700  00001E                     ??_nextChan:
   701                           
   702                           ; 0 bytes @ 0x1D
   703  00001E                     	ds	2
   704  000020                     ??_main:
   705                           
   706                           ; 0 bytes @ 0x1F
   707  000020                     	ds	2
   708  000022                     main@welcomeMessage:
   709                           	opt stack 0
   710                           
   711                           ; 6 bytes @ 0x21
   712  000022                     	ds	6
   713  000028                     main@evt:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x27
   717  000028                     	ds	1
   718  000029                     main@counter:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x28
   722  000029                     	ds	2
   723  00002B                     main@charDispCtr:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x2A
   727  00002B                     	ds	2
   728  00002D                     main@toggle:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x2C
   732  00002D                     	ds	1
   733  00002E                     main@ui:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x2D
   737  00002E                     	ds	2
   738  000030                     main@btn:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x2F
   742  000030                     	ds	1
   743  000031                     main@disp:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x30
   747  000031                     	ds	1
   748  000032                     main@freq:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x31
   752  000032                     	ds	2
   753  000034                     main@dispOfst:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x33
   757  000034                     	ds	2
   758  000036                     main@chan:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x35
   762  000036                     	ds	2
   763  000038                     main@vol:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x37
   767  000038                     	ds	2
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           postdec1	equ	0xFE5
   775                           fsr1l	equ	0xFE1
   776                           
   777 ;;
   778 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   779 ;;
   780 ;; *************** function _main *****************
   781 ;; Defined at:
   782 ;;		line 935 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  welcomeMessa    6   33[COMRAM] unsigned char [6]
   787 ;;  vol             2   55[COMRAM] unsigned int 
   788 ;;  chan            2   53[COMRAM] unsigned int 
   789 ;;  dispOfst        2   51[COMRAM] int 
   790 ;;  freq            2   49[COMRAM] unsigned int 
   791 ;;  ui              2   45[COMRAM] unsigned int 
   792 ;;  charDispCtr     2   42[COMRAM] unsigned int 
   793 ;;  counter         2   40[COMRAM] unsigned int 
   794 ;;  disp            1   48[COMRAM] unsigned char 
   795 ;;  btn             1   47[COMRAM] unsigned char 
   796 ;;  toggle          1   44[COMRAM] unsigned char 
   797 ;;  evt             1   39[COMRAM] unsigned char 
   798 ;; Return value:  Size  Location     Type
   799 ;;		None               void
   800 ;; Registers used:
   801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   807 ;;      Params:         0       0       0       0
   808 ;;      Locals:        24       0       0       0
   809 ;;      Temps:          2       0       0       0
   810 ;;      Totals:        26       0       0       0
   811 ;;Total ram usage:       26 bytes
   812 ;; Hardware stack levels required when called:    6
   813 ;; This function calls:
   814 ;;		_butnEvent
   815 ;;		_dly
   816 ;;		_Init
   817 ;;		_errfm
   818 ;;		_manualTune
   819 ;;		_FMfrequenc
   820 ;;		_FMinit
   821 ;;		_FMvers
   822 ;;		_volSet
   823 ;;		_nextChan
   824 ;;		_showFreq
   825 ;;		_showVol
   826 ;;		_showChan
   827 ;;		_setScan
   828 ;;		_displayText
   829 ;;		___wmul
   830 ;; This function is called by:
   831 ;;		Startup code after reset
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text0
   836  0003A2                     __ptext0:
   837                           	opt stack 0
   838  0003A2                     _main:
   839                           	opt stack 25
   840                           
   841                           ;main.c: 937: unsigned char btn = 0b00000000;
   842                           
   843                           ;incstack = 0
   844                           ;incstack = 0
   845  0003A2  6E20               	movwf	??_main& (0+255),c
   846  0003A4  0E00               	movlw	0
   847  0003A6  6E30               	movwf	main@btn,c
   848  0003A8  5020               	movf	??_main& (0+255),w,c
   849                           
   850                           ;main.c: 938: unsigned char evt;
   851                           ;main.c: 939: unsigned int ui;
   852                           ;main.c: 940: unsigned int freq = 875;
   853  0003AA  0E03               	movlw	3
   854  0003AC  6E33               	movwf	main@freq+1,c
   855  0003AE  0E6B               	movlw	107
   856  0003B0  6E32               	movwf	main@freq,c
   857                           
   858                           ;main.c: 941: unsigned int vol = 11;
   859  0003B2  0E00               	movlw	0
   860  0003B4  6E39               	movwf	main@vol+1,c
   861  0003B6  0E0B               	movlw	11
   862  0003B8  6E38               	movwf	main@vol,c
   863                           
   864                           ;main.c: 942: unsigned int chan = 0;
   865  0003BA  0E00               	movlw	0
   866  0003BC  6E37               	movwf	main@chan+1,c
   867  0003BE  0E00               	movlw	0
   868  0003C0  6E36               	movwf	main@chan,c
   869                           
   870                           ;main.c: 943: unsigned int counter = 0;
   871  0003C2  0E00               	movlw	0
   872  0003C4  6E2A               	movwf	main@counter+1,c
   873  0003C6  0E00               	movlw	0
   874  0003C8  6E29               	movwf	main@counter,c
   875                           
   876                           ;main.c: 944: unsigned int charDispCtr = 60;
   877  0003CA  0E00               	movlw	0
   878  0003CC  6E2C               	movwf	main@charDispCtr+1,c
   879  0003CE  0E3C               	movlw	60
   880  0003D0  6E2B               	movwf	main@charDispCtr,c
   881                           
   882                           ;main.c: 945: unsigned char toggle = 0;
   883  0003D2  6E20               	movwf	??_main& (0+255),c
   884  0003D4  0E00               	movlw	0
   885  0003D6  6E2D               	movwf	main@toggle,c
   886  0003D8  5020               	movf	??_main& (0+255),w,c
   887                           
   888                           ;main.c: 947: unsigned char disp = 'F';
   889  0003DA  6E20               	movwf	??_main& (0+255),c
   890  0003DC  0E46               	movlw	70
   891  0003DE  6E31               	movwf	main@disp,c
   892  0003E0  5020               	movf	??_main& (0+255),w,c
   893                           
   894                           ;main.c: 949: dly(20);
   895  0003E2  0E00               	movlw	0
   896  0003E4  6E02               	movwf	?_dly+1,c
   897  0003E6  0E14               	movlw	20
   898  0003E8  6E01               	movwf	?_dly,c
   899  0003EA  ECCD  F00A         	call	_dly	;wreg free
   900                           
   901                           ;main.c: 950: Init();
   902  0003EE  EC25  F009         	call	_Init	;wreg free
   903                           
   904                           ;main.c: 963: char welcomeMessage[] = "HELLO";
   905  0003F2  EE20  F03A         	lfsr	2,main@F5991
   906  0003F6  EE10  F022         	lfsr	1,main@welcomeMessage
   907  0003FA  0E06               	movlw	6
   908  0003FC                     u1581:
   909  0003FC  CFDE FFE6          	movff	postinc2,postinc1
   910  000400  2EE8               	decfsz	wreg,f,c
   911  000402  D7FC               	goto	u1581
   912                           
   913                           ;main.c: 965: int dispOfst;
   914                           ;main.c: 966: for(dispOfst=0; dispOfst<6; dispOfst++)
   915  000404  0E00               	movlw	0
   916  000406  6E35               	movwf	main@dispOfst+1,c
   917  000408  0E00               	movlw	0
   918  00040A  6E34               	movwf	main@dispOfst,c
   919  00040C  5035               	movf	main@dispOfst+1,w,c
   920  00040E  0A80               	xorlw	128
   921  000410  0F80               	addlw	-128
   922  000412  0E06               	movlw	6
   923  000414  B4D8               	btfsc	status,2,c
   924  000416  5C34               	subwf	main@dispOfst,w,c
   925  000418  B0D8               	btfsc	status,0,c
   926  00041A  D013               	goto	l2608
   927                           
   928                           ;main.c: 967: {
   929                           ;main.c: 968: displayText(welcomeMessage, dispOfst);
   930  00041C  0E00               	movlw	high main@welcomeMessage
   931  00041E  6E10               	movwf	?_displayText+1,c
   932  000420  0E22               	movlw	low main@welcomeMessage
   933  000422  6E0F               	movwf	?_displayText,c
   934  000424  C034  F011         	movff	main@dispOfst,?_displayText+2
   935  000428  C035  F012         	movff	main@dispOfst+1,?_displayText+3
   936  00042C  EC80  F006         	call	_displayText	;wreg free
   937                           
   938                           ;main.c: 969: dly(1000);
   939  000430  0E03               	movlw	3
   940  000432  6E02               	movwf	?_dly+1,c
   941  000434  0EE8               	movlw	232
   942  000436  6E01               	movwf	?_dly,c
   943  000438  ECCD  F00A         	call	_dly	;wreg free
   944  00043C  4A34               	infsnz	main@dispOfst,f,c
   945  00043E  2A35               	incf	main@dispOfst+1,f,c
   946  000440  D7E5               	goto	L1
   947  000442                     l2608:
   948                           
   949                           ;main.c: 970: }
   950                           ;main.c: 973: FMvers(&ui);
   951  000442  0E00               	movlw	high main@ui
   952  000444  6E0E               	movwf	?_FMvers+1,c
   953  000446  0E2E               	movlw	low main@ui
   954  000448  6E0D               	movwf	?_FMvers,c
   955  00044A  EC36  F00B         	call	_FMvers	;wreg free
   956                           
   957                           ;main.c: 974: if (ui != 0x1010)
   958  00044E  502F               	movf	main@ui+1,w,c
   959  000450  0A10               	xorlw	16
   960  000452  0E10               	movlw	16
   961  000454  B4D8               	btfsc	status,2,c
   962  000456  182E               	xorwf	main@ui,w,c
   963  000458  A4D8               	btfss	status,2,c
   964                           
   965                           ;main.c: 975: errfm();
   966  00045A  EC41  F00B         	call	_errfm	;wreg free
   967                           
   968                           ;main.c: 976: if (FMinit() != 0)
   969  00045E  EC74  F007         	call	_FMinit	;wreg free
   970  000462  0900               	iorlw	0
   971  000464  A4D8               	btfss	status,2,c
   972                           
   973                           ;main.c: 977: errfm();
   974  000466  EC41  F00B         	call	_errfm	;wreg free
   975                           
   976                           ;main.c: 979: FMfrequenc(freq);
   977  00046A  C032  F013         	movff	main@freq,?_FMfrequenc
   978  00046E  C033  F014         	movff	main@freq+1,?_FMfrequenc+1
   979  000472  ECE2  F008         	call	_FMfrequenc	;wreg free
   980                           
   981                           ;main.c: 982: vol=volSet(vol,0);
   982  000476  C038  F007         	movff	main@vol,?_volSet
   983  00047A  C039  F008         	movff	main@vol+1,?_volSet+1
   984  00047E  6E20               	movwf	??_main& (0+255),c
   985  000480  0E00               	movlw	0
   986  000482  6E09               	movwf	?_volSet+2,c
   987  000484  5020               	movf	??_main& (0+255),w,c
   988  000486  EC8E  F004         	call	_volSet	;wreg free
   989  00048A                     L7:
   990  00048A  C007  F038         	movff	?_volSet,main@vol
   991  00048E  C008  F039         	movff	?_volSet+1,main@vol+1
   992  000492                     l2622:
   993                           
   994                           ;main.c: 985: dly(20);
   995  000492  0E00               	movlw	0
   996  000494  6E02               	movwf	?_dly+1,c
   997  000496  0E14               	movlw	20
   998  000498  6E01               	movwf	?_dly,c
   999  00049A  ECCD  F00A         	call	_dly	;wreg free
  1000                           
  1001                           ;main.c: 987: switch(disp)
  1002  00049E  D049               	goto	l2646
  1003  0004A0                     l2624:
  1004                           
  1005                           ;main.c: 990: showFreq(freq);
  1006  0004A0  C032  F00F         	movff	main@freq,?_showFreq
  1007  0004A4  C033  F010         	movff	main@freq+1,?_showFreq+1
  1008  0004A8  ECF4  F005         	call	_showFreq	;wreg free
  1009                           
  1010                           ;main.c: 991: break;
  1011  0004AC  D050               	goto	l2648
  1012  0004AE                     l2626:
  1013                           
  1014                           ;main.c: 994: showChan(chan);
  1015  0004AE  C036  F004         	movff	main@chan,?_showChan
  1016  0004B2  C037  F005         	movff	main@chan+1,?_showChan+1
  1017  0004B6  EC0B  F00B         	call	_showChan	;wreg free
  1018                           
  1019                           ;main.c: 995: break;
  1020  0004BA  D049               	goto	l2648
  1021  0004BC                     l2628:
  1022                           
  1023                           ;main.c: 998: showVol(vol);
  1024  0004BC  C038  F004         	movff	main@vol,?_showVol
  1025  0004C0  C039  F005         	movff	main@vol+1,?_showVol+1
  1026  0004C4  EC8D  F00A         	call	_showVol	;wreg free
  1027                           
  1028                           ;main.c: 999: break;
  1029  0004C8  D042               	goto	l2648
  1030  0004CA                     l2630:
  1031                           
  1032                           ;main.c: 1002: if(charDispCtr == 0)
  1033  0004CA  502C               	movf	main@charDispCtr+1,w,c
  1034  0004CC  102B               	iorwf	main@charDispCtr,w,c
  1035  0004CE  A4D8               	btfss	status,2,c
  1036  0004D0  D029               	goto	l2640
  1037                           
  1038                           ;main.c: 1003: {
  1039                           ;main.c: 1004: dispOfst = displayText(stationName[chan],dispOfst);
  1040  0004D2  C036  F009         	movff	main@chan,?___wmul
  1041  0004D6  C037  F00A         	movff	main@chan+1,?___wmul+1
  1042  0004DA  0E00               	movlw	0
  1043  0004DC  6E0C               	movwf	?___wmul+3,c
  1044  0004DE  0E0F               	movlw	15
  1045  0004E0  6E0B               	movwf	?___wmul+2,c
  1046  0004E2  ECB0  F00A         	call	___wmul	;wreg free
  1047  0004E6  0100               	movlb	0	; () banked
  1048  0004E8  0E60               	movlw	low _stationName
  1049  0004EA  2409               	addwf	?___wmul,w,c
  1050  0004EC  6E0F               	movwf	?_displayText,c
  1051  0004EE  0100               	movlb	0	; () banked
  1052  0004F0  0E00               	movlw	high _stationName
  1053  0004F2  200A               	addwfc	?___wmul+1,w,c
  1054  0004F4  6E10               	movwf	?_displayText+1,c
  1055  0004F6  C034  F011         	movff	main@dispOfst,?_displayText+2
  1056  0004FA  C035  F012         	movff	main@dispOfst+1,?_displayText+3
  1057  0004FE  EC80  F006         	call	_displayText	;wreg free
  1058  000502  C00F  F034         	movff	?_displayText,main@dispOfst
  1059  000506  C010  F035         	movff	?_displayText+1,main@dispOfst+1
  1060                           
  1061                           ;main.c: 1005: charDispCtr = 60;
  1062  00050A  0E00               	movlw	0
  1063  00050C  6E2C               	movwf	main@charDispCtr+1,c
  1064  00050E  0E3C               	movlw	60
  1065  000510  6E2B               	movwf	main@charDispCtr,c
  1066                           
  1067                           ;main.c: 1007: if(dispOfst == 0)
  1068  000512  5035               	movf	main@dispOfst+1,w,c
  1069  000514  1034               	iorwf	main@dispOfst,w,c
  1070  000516  A4D8               	btfss	status,2,c
  1071  000518  D01A               	goto	l2648
  1072                           
  1073                           ;main.c: 1008: disp = 'F';
  1074  00051A  6E20               	movwf	??_main& (0+255),c
  1075  00051C  0E46               	movlw	70
  1076  00051E  6E31               	movwf	main@disp,c
  1077  000520  5020               	movf	??_main& (0+255),w,c
  1078  000522  D015               	goto	l2648
  1079  000524                     l2640:
  1080                           
  1081                           ;main.c: 1010: else
  1082                           ;main.c: 1011: charDispCtr--;
  1083  000524  062B               	decf	main@charDispCtr,f,c
  1084  000526  A0D8               	btfss	status,0,c
  1085  000528  062C               	decf	main@charDispCtr+1,f,c
  1086  00052A  D011               	goto	l2648
  1087  00052C                     l2642:
  1088                           
  1089                           ;main.c: 1015: errfm();
  1090  00052C  EC41  F00B         	call	_errfm	;wreg free
  1091                           
  1092                           ;main.c: 1016: break;
  1093  000530  D00E               	goto	l2648
  1094  000532                     l2646:
  1095  000532  5031               	movf	main@disp,w,c
  1096                           
  1097                           ; Switch size 1, requested type "space"
  1098                           ; Number of cases is 4, Range of values is 67 to 86
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte           13     7 (average)
  1102                           ;	Chosen strategy is simple_byte
  1103  000534  0A43               	xorlw	67	; case 67
  1104  000536  B4D8               	btfsc	status,2,c
  1105  000538  D7BA               	goto	l2626
  1106  00053A  0A05               	xorlw	5	; case 70
  1107  00053C  B4D8               	btfsc	status,2,c
  1108  00053E  D7B0               	goto	l2624
  1109  000540  0A15               	xorlw	21	; case 83
  1110  000542  B4D8               	btfsc	status,2,c
  1111  000544  D7C2               	goto	l2630
  1112  000546  0A05               	xorlw	5	; case 86
  1113  000548  B4D8               	btfsc	status,2,c
  1114  00054A  D7B8               	goto	l2628
  1115  00054C  D7EF               	goto	l2642
  1116  00054E                     l2648:
  1117                           
  1118                           ;main.c: 1019: if (toggle == 1)
  1119  00054E  042D               	decf	main@toggle,w,c
  1120  000550  A4D8               	btfss	status,2,c
  1121  000552  D008               	goto	l2654
  1122                           
  1123                           ;main.c: 1020: {
  1124                           ;main.c: 1021: counter = 100;
  1125  000554  0E00               	movlw	0
  1126  000556  6E2A               	movwf	main@counter+1,c
  1127  000558  0E64               	movlw	100
  1128  00055A  6E29               	movwf	main@counter,c
  1129                           
  1130                           ;main.c: 1022: toggle = 0;
  1131  00055C  6E20               	movwf	??_main& (0+255),c
  1132  00055E  0E00               	movlw	0
  1133  000560  6E2D               	movwf	main@toggle,c
  1134  000562  D00F               	goto	L2
  1135  000564                     l2654:
  1136                           
  1137                           ;main.c: 1024: else if(disp == 'V')
  1138  000564  5031               	movf	main@disp,w,c
  1139  000566  0A56               	xorlw	86
  1140  000568  A4D8               	btfss	status,2,c
  1141  00056A  D00C               	goto	l2662
  1142                           
  1143                           ;main.c: 1025: {
  1144                           ;main.c: 1026: if (counter != 0)
  1145  00056C  502A               	movf	main@counter+1,w,c
  1146  00056E  1029               	iorwf	main@counter,w,c
  1147  000570  B4D8               	btfsc	status,2,c
  1148  000572  D004               	goto	l2660
  1149                           
  1150                           ;main.c: 1027: counter--;
  1151  000574  0629               	decf	main@counter,f,c
  1152  000576  A0D8               	btfss	status,0,c
  1153  000578  062A               	decf	main@counter+1,f,c
  1154  00057A  D004               	goto	l2662
  1155  00057C                     l2660:
  1156                           
  1157                           ;main.c: 1028: else
  1158                           ;main.c: 1029: disp = 'F';
  1159  00057C  6E20               	movwf	??_main& (0+255),c
  1160  00057E  0E46               	movlw	70
  1161  000580  6E31               	movwf	main@disp,c
  1162  000582                     L2:
  1163  000582  5020               	movf	??_main& (0+255),w,c
  1164  000584                     l2662:
  1165                           
  1166                           ;main.c: 1030: }
  1167                           ;main.c: 1033: evt = butnEvent(&btn);
  1168  000584  0E00               	movlw	high main@btn
  1169  000586  6E06               	movwf	?_butnEvent+1,c
  1170  000588  0E30               	movlw	low main@btn
  1171  00058A  6E05               	movwf	?_butnEvent,c
  1172  00058C  ECA8  F003         	call	_butnEvent	;wreg free
  1173  000590  6E28               	movwf	main@evt,c
  1174                           
  1175                           ;main.c: 1034: if (evt == 1) switch (btn) {
  1176  000592  0428               	decf	main@evt,w,c
  1177  000594  B4D8               	btfsc	status,2,c
  1178  000596  D0C2               	goto	l2722
  1179  000598  D77C               	goto	l2622
  1180  00059A                     l2668:
  1181                           
  1182                           ;main.c: 1036: chan=nextChan(chan, 1);
  1183  00059A  C036  F01B         	movff	main@chan,?_nextChan
  1184  00059E  C037  F01C         	movff	main@chan+1,?_nextChan+1
  1185  0005A2  6E20               	movwf	??_main& (0+255),c
  1186  0005A4  0E01               	movlw	1
  1187  0005A6  6E1D               	movwf	?_nextChan+2,c
  1188  0005A8  5020               	movf	??_main& (0+255),w,c
  1189  0005AA  ECFC  F006         	call	_nextChan	;wreg free
  1190  0005AE  D00A               	goto	L3
  1191  0005B0                     l2676:
  1192                           
  1193                           ;main.c: 1044: chan=nextChan(chan, 0);
  1194  0005B0  C036  F01B         	movff	main@chan,?_nextChan
  1195  0005B4  C037  F01C         	movff	main@chan+1,?_nextChan+1
  1196  0005B8  6E20               	movwf	??_main& (0+255),c
  1197  0005BA  0E00               	movlw	0
  1198  0005BC  6E1D               	movwf	?_nextChan+2,c
  1199  0005BE  5020               	movf	??_main& (0+255),w,c
  1200  0005C0  ECFC  F006         	call	_nextChan	;wreg free
  1201  0005C4                     L3:
  1202  0005C4  C01B  F036         	movff	?_nextChan,main@chan
  1203  0005C8  C01C  F037         	movff	?_nextChan+1,main@chan+1
  1204                           
  1205                           ;main.c: 1045: freq = station[chan];
  1206  0005CC  90D8               	bcf	status,0,c
  1207  0005CE  3436               	rlcf	main@chan,w,c
  1208  0005D0  6E20               	movwf	??_main& (0+255),c
  1209  0005D2  3437               	rlcf	main@chan+1,w,c
  1210  0005D4  6E21               	movwf	(??_main+1)& (0+255),c
  1211  0005D6  0E8B               	movlw	low _station
  1212  0005D8  2420               	addwf	??_main,w,c
  1213  0005DA  6EF6               	movwf	tblptrl,c
  1214  0005DC  0E03               	movlw	high _station
  1215  0005DE  2021               	addwfc	??_main+1,w,c
  1216  0005E0  6EF7               	movwf	tblptrh,c
  1217  0005E2  0009               	tblrd		*+
  1218  0005E4  CFF5 F032          	movff	tablat,main@freq
  1219  0005E8  000A               	tblrd		*-
  1220  0005EA  CFF5 F033          	movff	tablat,main@freq+1
  1221                           
  1222                           ;main.c: 1046: disp = 'S';
  1223  0005EE  6E20               	movwf	??_main& (0+255),c
  1224  0005F0  0E53               	movlw	83
  1225  0005F2  6E31               	movwf	main@disp,c
  1226  0005F4  5020               	movf	??_main& (0+255),w,c
  1227                           
  1228                           ;main.c: 1048: dispOfst = 0;
  1229  0005F6  0E00               	movlw	0
  1230  0005F8  6E35               	movwf	main@dispOfst+1,c
  1231  0005FA  0E00               	movlw	0
  1232  0005FC  6E34               	movwf	main@dispOfst,c
  1233                           
  1234                           ;main.c: 1049: break;
  1235  0005FE  D749               	goto	l2622
  1236  000600                     l2684:
  1237                           
  1238                           ;main.c: 1052: freq=manualTune(freq,1);
  1239  000600  C032  F01B         	movff	main@freq,?_manualTune
  1240  000604  C033  F01C         	movff	main@freq+1,?_manualTune+1
  1241  000608  6E20               	movwf	??_main& (0+255),c
  1242  00060A  0E01               	movlw	1
  1243  00060C  6E1D               	movwf	?_manualTune+2,c
  1244  00060E  5020               	movf	??_main& (0+255),w,c
  1245  000610  EC9C  F008         	call	_manualTune	;wreg free
  1246  000614  D00A               	goto	L4
  1247  000616                     l2688:
  1248                           
  1249                           ;main.c: 1057: freq=manualTune(freq,0);
  1250  000616  C032  F01B         	movff	main@freq,?_manualTune
  1251  00061A  C033  F01C         	movff	main@freq+1,?_manualTune+1
  1252  00061E  6E20               	movwf	??_main& (0+255),c
  1253  000620  0E00               	movlw	0
  1254  000622  6E1D               	movwf	?_manualTune+2,c
  1255  000624  5020               	movf	??_main& (0+255),w,c
  1256  000626  EC9C  F008         	call	_manualTune	;wreg free
  1257  00062A                     L4:
  1258  00062A  C01B  F032         	movff	?_manualTune,main@freq
  1259  00062E  C01C  F033         	movff	?_manualTune+1,main@freq+1
  1260                           
  1261                           ;main.c: 1058: disp = 'F';
  1262  000632  6E20               	movwf	??_main& (0+255),c
  1263  000634  0E46               	movlw	70
  1264  000636  6E31               	movwf	main@disp,c
  1265  000638  D00B               	goto	L5
  1266  00063A                     l2692:
  1267                           
  1268                           ;main.c: 1062: vol=volSet(vol,1);
  1269  00063A  C038  F007         	movff	main@vol,?_volSet
  1270  00063E  C039  F008         	movff	main@vol+1,?_volSet+1
  1271  000642  6E20               	movwf	??_main& (0+255),c
  1272  000644  0E01               	movlw	1
  1273  000646  6E09               	movwf	?_volSet+2,c
  1274  000648  5020               	movf	??_main& (0+255),w,c
  1275  00064A  EC8E  F004         	call	_volSet	;wreg free
  1276  00064E  D00C               	goto	L6
  1277  000650                     L5:
  1278  000650  5020               	movf	??_main& (0+255),w,c
  1279                           
  1280                           ;main.c: 1065: break;
  1281  000652  D71F               	goto	l2622
  1282  000654                     l2698:
  1283                           
  1284                           ;main.c: 1068: vol=volSet(vol,0);
  1285  000654  C038  F007         	movff	main@vol,?_volSet
  1286  000658  C039  F008         	movff	main@vol+1,?_volSet+1
  1287  00065C  6E20               	movwf	??_main& (0+255),c
  1288  00065E  0E00               	movlw	0
  1289  000660  6E09               	movwf	?_volSet+2,c
  1290  000662  5020               	movf	??_main& (0+255),w,c
  1291  000664  EC8E  F004         	call	_volSet	;wreg free
  1292  000668                     L6:
  1293  000668  C007  F038         	movff	?_volSet,main@vol
  1294  00066C  C008  F039         	movff	?_volSet+1,main@vol+1
  1295                           
  1296                           ;main.c: 1069: disp = 'V';
  1297  000670  6E20               	movwf	??_main& (0+255),c
  1298  000672  0E56               	movlw	86
  1299  000674  6E31               	movwf	main@disp,c
  1300  000676  5020               	movf	??_main& (0+255),w,c
  1301                           
  1302                           ;main.c: 1070: toggle = 1;
  1303  000678  6E20               	movwf	??_main& (0+255),c
  1304  00067A  0E01               	movlw	1
  1305  00067C  6E2D               	movwf	main@toggle,c
  1306  00067E  D7E8               	goto	L5
  1307  000680                     l2704:
  1308                           
  1309                           ;main.c: 1079: freq = setScan(1);
  1310  000680  6E20               	movwf	??_main& (0+255),c
  1311  000682  0E01               	movlw	1
  1312  000684  6E13               	movwf	?_setScan,c
  1313  000686  5020               	movf	??_main& (0+255),w,c
  1314  000688  EC50  F005         	call	_setScan	;wreg free
  1315  00068C  C013  F032         	movff	?_setScan,main@freq
  1316  000690  C014  F033         	movff	?_setScan+1,main@freq+1
  1317                           
  1318                           ;main.c: 1080: disp = 'F';
  1319  000694  6E20               	movwf	??_main& (0+255),c
  1320  000696  0E46               	movlw	70
  1321  000698  6E31               	movwf	main@disp,c
  1322  00069A  5020               	movf	??_main& (0+255),w,c
  1323                           
  1324                           ;main.c: 1082: vol = volSet(vol,1);
  1325  00069C  C038  F007         	movff	main@vol,?_volSet
  1326  0006A0  C039  F008         	movff	main@vol+1,?_volSet+1
  1327  0006A4  6E20               	movwf	??_main& (0+255),c
  1328  0006A6  0E01               	movlw	1
  1329  0006A8  6E09               	movwf	?_volSet+2,c
  1330  0006AA  5020               	movf	??_main& (0+255),w,c
  1331  0006AC  EC8E  F004         	call	_volSet	;wreg free
  1332  0006B0  C007  F038         	movff	?_volSet,main@vol
  1333  0006B4  C008  F039         	movff	?_volSet+1,main@vol+1
  1334                           
  1335                           ;main.c: 1083: vol = volSet(vol,0);
  1336  0006B8  C038  F007         	movff	main@vol,?_volSet
  1337  0006BC  C039  F008         	movff	main@vol+1,?_volSet+1
  1338  0006C0  6E20               	movwf	??_main& (0+255),c
  1339  0006C2  0E00               	movlw	0
  1340  0006C4  6E09               	movwf	?_volSet+2,c
  1341  0006C6  5020               	movf	??_main& (0+255),w,c
  1342  0006C8  EC8E  F004         	call	_volSet	;wreg free
  1343  0006CC  D6DE               	goto	L7
  1344  0006CE                     l2712:
  1345                           
  1346                           ;main.c: 1088: freq = setScan(0);
  1347  0006CE  6E20               	movwf	??_main& (0+255),c
  1348  0006D0  0E00               	movlw	0
  1349  0006D2  6E13               	movwf	?_setScan,c
  1350  0006D4  5020               	movf	??_main& (0+255),w,c
  1351  0006D6  EC50  F005         	call	_setScan	;wreg free
  1352  0006DA  C013  F032         	movff	?_setScan,main@freq
  1353  0006DE  C014  F033         	movff	?_setScan+1,main@freq+1
  1354                           
  1355                           ;main.c: 1089: disp = 'F';
  1356  0006E2  6E20               	movwf	??_main& (0+255),c
  1357  0006E4  0E46               	movlw	70
  1358  0006E6  6E31               	movwf	main@disp,c
  1359  0006E8  5020               	movf	??_main& (0+255),w,c
  1360                           
  1361                           ;main.c: 1091: vol = volSet(vol,1);
  1362  0006EA  C038  F007         	movff	main@vol,?_volSet
  1363  0006EE  C039  F008         	movff	main@vol+1,?_volSet+1
  1364  0006F2  6E20               	movwf	??_main& (0+255),c
  1365  0006F4  0E01               	movlw	1
  1366  0006F6  6E09               	movwf	?_volSet+2,c
  1367  0006F8  5020               	movf	??_main& (0+255),w,c
  1368  0006FA  EC8E  F004         	call	_volSet	;wreg free
  1369  0006FE  C007  F038         	movff	?_volSet,main@vol
  1370  000702  C008  F039         	movff	?_volSet+1,main@vol+1
  1371                           
  1372                           ;main.c: 1092: vol = volSet(vol,0);
  1373  000706  C038  F007         	movff	main@vol,?_volSet
  1374  00070A  C039  F008         	movff	main@vol+1,?_volSet+1
  1375  00070E  6E20               	movwf	??_main& (0+255),c
  1376  000710  0E00               	movlw	0
  1377  000712  6E09               	movwf	?_volSet+2,c
  1378  000714  5020               	movf	??_main& (0+255),w,c
  1379  000716  EC8E  F004         	call	_volSet	;wreg free
  1380  00071A  D6B7               	goto	L7
  1381  00071C                     l2722:
  1382  00071C  5030               	movf	main@btn,w,c
  1383                           
  1384                           ; Switch size 1, requested type "space"
  1385                           ; Number of cases is 8, Range of values is 1 to 128
  1386                           ; switch strategies available:
  1387                           ; Name         Instructions Cycles
  1388                           ; simple_byte           25    13 (average)
  1389                           ;	Chosen strategy is simple_byte
  1390  00071E  0A01               	xorlw	1	; case 1
  1391  000720  B4D8               	btfsc	status,2,c
  1392  000722  D7AE               	goto	l2704
  1393  000724  0A03               	xorlw	3	; case 2
  1394  000726  B4D8               	btfsc	status,2,c
  1395  000728  D738               	goto	l2668
  1396  00072A  0A06               	xorlw	6	; case 4
  1397  00072C  B4D8               	btfsc	status,2,c
  1398  00072E  D768               	goto	l2684
  1399  000730  0A0C               	xorlw	12	; case 8
  1400  000732  B4D8               	btfsc	status,2,c
  1401  000734  D782               	goto	l2692
  1402  000736  0A18               	xorlw	24	; case 16
  1403  000738  B4D8               	btfsc	status,2,c
  1404  00073A  D78C               	goto	l2698
  1405  00073C  0A30               	xorlw	48	; case 32
  1406  00073E  B4D8               	btfsc	status,2,c
  1407  000740  D76A               	goto	l2688
  1408  000742  0A60               	xorlw	96	; case 64
  1409  000744  B4D8               	btfsc	status,2,c
  1410  000746  D734               	goto	l2676
  1411  000748  0AC0               	xorlw	192	; case 128
  1412  00074A  B4D8               	btfsc	status,2,c
  1413  00074C  D7C0               	goto	l2712
  1414  00074E  D6A1               	goto	l2622
  1415  000750                     __end_of_main:
  1416                           	opt stack 0
  1417                           tblptru	equ	0xFF8
  1418                           tblptrh	equ	0xFF7
  1419                           tblptrl	equ	0xFF6
  1420                           tablat	equ	0xFF5
  1421                           postinc0	equ	0xFEE
  1422                           wreg	equ	0xFE8
  1423                           postinc1	equ	0xFE6
  1424                           postdec1	equ	0xFE5
  1425                           fsr1l	equ	0xFE1
  1426                           postinc2	equ	0xFDE
  1427                           status	equ	0xFD8
  1428                           
  1429 ;; *************** function _displayText *****************
  1430 ;; Defined at:
  1431 ;;		line 906 in file "main.c"
  1432 ;; Parameters:    Size  Location     Type
  1433 ;;  str             2   14[COMRAM] PTR unsigned char 
  1434 ;;		 -> stationName(90), main@welcomeMessage(6), 
  1435 ;;  pos             2   16[COMRAM] int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  display         3   23[COMRAM] unsigned char [3]
  1438 ;;  i               2   27[COMRAM] int 
  1439 ;;  flag            1   26[COMRAM] unsigned char 
  1440 ;; Return value:  Size  Location     Type
  1441 ;;                  2   14[COMRAM] int 
  1442 ;; Registers used:
  1443 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1444 ;; Tracked objects:
  1445 ;;		On entry : 0/0
  1446 ;;		On exit  : 0/0
  1447 ;;		Unchanged: 0/0
  1448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1449 ;;      Params:         4       0       0       0
  1450 ;;      Locals:         6       0       0       0
  1451 ;;      Temps:          5       0       0       0
  1452 ;;      Totals:        15       0       0       0
  1453 ;;Total ram usage:       15 bytes
  1454 ;; Hardware stack levels used:    1
  1455 ;; Hardware stack levels required when called:    1
  1456 ;; This function calls:
  1457 ;;		_segWrt
  1458 ;; This function is called by:
  1459 ;;		_main
  1460 ;; This function uses a non-reentrant model
  1461 ;;
  1462                           
  1463                           	psect	text1
  1464  000D00                     __ptext1:
  1465                           	opt stack 0
  1466  000D00                     _displayText:
  1467                           	opt stack 29
  1468                           
  1469                           ;main.c: 907: unsigned char display[3] = {0x00,0x00,0x00};
  1470                           
  1471                           ;incstack = 0
  1472                           ;incstack = 0
  1473  000D00  C040  F018         	movff	displayText@F5975,displayText@display
  1474  000D04  C041  F019         	movff	displayText@F5975+1,displayText@display+1
  1475  000D08  C042  F01A         	movff	displayText@F5975+2,displayText@display+2
  1476                           
  1477                           ;main.c: 909: unsigned char flag = 0;
  1478  000D0C  6E13               	movwf	??_displayText& (0+255),c
  1479  000D0E  0E00               	movlw	0
  1480  000D10  6E1B               	movwf	displayText@flag,c
  1481  000D12  5013               	movf	??_displayText& (0+255),w,c
  1482                           
  1483                           ;main.c: 911: segWrt(24, 0);
  1484  000D14  6E13               	movwf	??_displayText& (0+255),c
  1485  000D16  0E18               	movlw	24
  1486  000D18  6E01               	movwf	?_segWrt,c
  1487  000D1A  5013               	movf	??_displayText& (0+255),w,c
  1488  000D1C  6E14               	movwf	(??_displayText+1)& (0+255),c
  1489  000D1E  0E00               	movlw	0
  1490  000D20  6E02               	movwf	?_segWrt+1,c
  1491  000D22  5014               	movf	(??_displayText+1)& (0+255),w,c
  1492  000D24  EC61  F009         	call	_segWrt	;wreg free
  1493                           
  1494                           ;main.c: 913: int i;
  1495                           ;main.c: 914: for(i=0; (flag!= 1)&&(i<3); i++)
  1496  000D28  0E00               	movlw	0
  1497  000D2A  6E1D               	movwf	displayText@i+1,c
  1498  000D2C  0E00               	movlw	0
  1499  000D2E  6E1C               	movwf	displayText@i,c
  1500  000D30  D03D               	goto	l2306
  1501  000D32                     l2298:
  1502                           
  1503                           ;main.c: 915: {
  1504                           ;main.c: 917: if( str[pos +i] == '\0')
  1505  000D32  C011  F013         	movff	displayText@pos,??_displayText
  1506  000D36  C012  F014         	movff	displayText@pos+1,??_displayText+1
  1507  000D3A  501C               	movf	displayText@i,w,c
  1508  000D3C  2613               	addwf	??_displayText,f,c
  1509  000D3E  501D               	movf	displayText@i+1,w,c
  1510  000D40  2214               	addwfc	??_displayText+1,f,c
  1511  000D42  5013               	movf	??_displayText,w,c
  1512  000D44  240F               	addwf	displayText@str,w,c
  1513  000D46  6ED9               	movwf	fsr2l,c
  1514  000D48  5014               	movf	??_displayText+1,w,c
  1515  000D4A  2010               	addwfc	displayText@str+1,w,c
  1516  000D4C  6EDA               	movwf	fsr2h,c
  1517  000D4E  50DF               	movf	indf2,w,c
  1518  000D50  A4D8               	btfss	status,2,c
  1519  000D52  D005               	goto	l2302
  1520                           
  1521                           ;main.c: 918: flag = 1;
  1522  000D54  6E13               	movwf	??_displayText& (0+255),c
  1523  000D56  0E01               	movlw	1
  1524  000D58  6E1B               	movwf	displayText@flag,c
  1525  000D5A  5013               	movf	??_displayText& (0+255),w,c
  1526  000D5C  D025               	goto	l2304
  1527  000D5E                     l2302:
  1528                           
  1529                           ;main.c: 919: else
  1530                           ;main.c: 920: display[i] = LCDLetters[ str[pos +i] - 'A'];
  1531  000D5E  C011  F013         	movff	displayText@pos,??_displayText
  1532  000D62  C012  F014         	movff	displayText@pos+1,??_displayText+1
  1533  000D66  501C               	movf	displayText@i,w,c
  1534  000D68  2613               	addwf	??_displayText,f,c
  1535  000D6A  501D               	movf	displayText@i+1,w,c
  1536  000D6C  2214               	addwfc	??_displayText+1,f,c
  1537  000D6E  5013               	movf	??_displayText,w,c
  1538  000D70  240F               	addwf	displayText@str,w,c
  1539  000D72  6ED9               	movwf	fsr2l,c
  1540  000D74  5014               	movf	??_displayText+1,w,c
  1541  000D76  2010               	addwfc	displayText@str+1,w,c
  1542  000D78  6EDA               	movwf	fsr2h,c
  1543  000D7A  50DF               	movf	indf2,w,c
  1544  000D7C  6E15               	movwf	(??_displayText+2)& (0+255),c
  1545  000D7E  0EBF               	movlw	191
  1546  000D80  2415               	addwf	??_displayText+2,w,c
  1547  000D82  6E16               	movwf	(??_displayText+3)& (0+255),c
  1548  000D84  6A17               	clrf	(??_displayText+4)& (0+255),c
  1549  000D86  0EFF               	movlw	255
  1550  000D88  2217               	addwfc	(??_displayText+4)& (0+255),f,c
  1551  000D8A  0E70               	movlw	low _LCDLetters
  1552  000D8C  2416               	addwf	??_displayText+3,w,c
  1553  000D8E  6EF6               	movwf	tblptrl,c
  1554  000D90  0E03               	movlw	high _LCDLetters
  1555  000D92  2017               	addwfc	??_displayText+4,w,c
  1556  000D94  6EF7               	movwf	tblptrh,c
  1557  000D96  0E18               	movlw	low displayText@display
  1558  000D98  241C               	addwf	displayText@i,w,c
  1559  000D9A  6ED9               	movwf	fsr2l,c
  1560  000D9C  0E00               	movlw	high displayText@display
  1561  000D9E  201D               	addwfc	displayText@i+1,w,c
  1562  000DA0  6EDA               	movwf	fsr2h,c
  1563  000DA2  0008               	tblrd		*
  1564  000DA4  CFF5 FFDF          	movff	tablat,indf2
  1565  000DA8                     l2304:
  1566  000DA8  4A1C               	infsnz	displayText@i,f,c
  1567  000DAA  2A1D               	incf	displayText@i+1,f,c
  1568  000DAC                     l2306:
  1569  000DAC  041B               	decf	displayText@flag,w,c
  1570  000DAE  B4D8               	btfsc	status,2,c
  1571  000DB0  D008               	goto	l262
  1572  000DB2  501D               	movf	displayText@i+1,w,c
  1573  000DB4  0A80               	xorlw	128
  1574  000DB6  0F80               	addlw	-128
  1575  000DB8  0E03               	movlw	3
  1576  000DBA  B4D8               	btfsc	status,2,c
  1577  000DBC  5C1C               	subwf	displayText@i,w,c
  1578  000DBE  A0D8               	btfss	status,0,c
  1579  000DC0  D7B8               	goto	l2298
  1580  000DC2                     l262:
  1581                           
  1582                           ;main.c: 921: }
  1583                           ;main.c: 923: LCDDATA2 = display[0];
  1584  000DC2  C018  FF62         	movff	displayText@display,3938	;volatile
  1585                           
  1586                           ;main.c: 924: LCDDATA1 = display[1];
  1587  000DC6  C019  FF61         	movff	displayText@display+1,3937	;volatile
  1588                           
  1589                           ;main.c: 925: LCDDATA0 = display[2];
  1590  000DCA  C01A  FF60         	movff	displayText@display+2,3936	;volatile
  1591                           
  1592                           ;main.c: 927: if(str[pos] == '\0')
  1593  000DCE  5011               	movf	displayText@pos,w,c
  1594  000DD0  240F               	addwf	displayText@str,w,c
  1595  000DD2  6ED9               	movwf	fsr2l,c
  1596  000DD4  5012               	movf	displayText@pos+1,w,c
  1597  000DD6  2010               	addwfc	displayText@str+1,w,c
  1598  000DD8  6EDA               	movwf	fsr2h,c
  1599  000DDA  50DF               	movf	indf2,w,c
  1600  000DDC  A4D8               	btfss	status,2,c
  1601  000DDE  D005               	goto	l2316
  1602                           
  1603                           ;main.c: 928: return 0;
  1604  000DE0  0E00               	movlw	0
  1605  000DE2  6E10               	movwf	?_displayText+1,c
  1606  000DE4  0E00               	movlw	0
  1607  000DE6  6E0F               	movwf	?_displayText,c
  1608  000DE8  D006               	goto	l264
  1609  000DEA                     l2316:
  1610                           
  1611                           ;main.c: 930: pos++;
  1612  000DEA  4A11               	infsnz	displayText@pos,f,c
  1613  000DEC  2A12               	incf	displayText@pos+1,f,c
  1614                           
  1615                           ;main.c: 931: return pos;
  1616  000DEE  C011  F00F         	movff	displayText@pos,?_displayText
  1617  000DF2  C012  F010         	movff	displayText@pos+1,?_displayText+1
  1618  000DF6                     l264:
  1619  000DF6  0012               	return	
  1620  000DF8                     __end_of_displayText:
  1621                           	opt stack 0
  1622                           tblptru	equ	0xFF8
  1623                           tblptrh	equ	0xFF7
  1624                           tblptrl	equ	0xFF6
  1625                           tablat	equ	0xFF5
  1626                           postinc0	equ	0xFEE
  1627                           wreg	equ	0xFE8
  1628                           postinc1	equ	0xFE6
  1629                           postdec1	equ	0xFE5
  1630                           fsr1l	equ	0xFE1
  1631                           indf2	equ	0xFDF
  1632                           postinc2	equ	0xFDE
  1633                           fsr2h	equ	0xFDA
  1634                           fsr2l	equ	0xFD9
  1635                           status	equ	0xFD8
  1636                           
  1637 ;; *************** function _setScan *****************
  1638 ;; Defined at:
  1639 ;;		line 826 in file "main.c"
  1640 ;; Parameters:    Size  Location     Type
  1641 ;;  dir             1   18[COMRAM] unsigned char 
  1642 ;; Auto vars:     Size  Location     Type
  1643 ;;  chanRgstr       2   24[COMRAM] unsigned int 
  1644 ;;  dat             2   22[COMRAM] unsigned int 
  1645 ;;  reg3Wrd         2    0        int 
  1646 ;; Return value:  Size  Location     Type
  1647 ;;                  2   18[COMRAM] unsigned int 
  1648 ;; Registers used:
  1649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1650 ;; Tracked objects:
  1651 ;;		On entry : 0/0
  1652 ;;		On exit  : 0/0
  1653 ;;		Unchanged: 0/0
  1654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1655 ;;      Params:         2       0       0       0
  1656 ;;      Locals:         4       0       0       0
  1657 ;;      Temps:          2       0       0       0
  1658 ;;      Totals:         8       0       0       0
  1659 ;;Total ram usage:        8 bytes
  1660 ;; Hardware stack levels used:    1
  1661 ;; Hardware stack levels required when called:    4
  1662 ;; This function calls:
  1663 ;;		_dly
  1664 ;;		_errfm
  1665 ;;		_FMwrite
  1666 ;;		_FMread
  1667 ;;		_FMready
  1668 ;; This function is called by:
  1669 ;;		_main
  1670 ;; This function uses a non-reentrant model
  1671 ;;
  1672                           
  1673                           	psect	text2
  1674  000AA0                     __ptext2:
  1675                           	opt stack 0
  1676  000AA0                     _setScan:
  1677                           	opt stack 26
  1678                           
  1679                           ;main.c: 828: unsigned int dat;
  1680                           ;main.c: 829: unsigned int chanRgstr;
  1681                           ;main.c: 830: int reg3Wrd;
  1682                           ;main.c: 832: regImg[1] |= 0x0002;
  1683                           
  1684                           ;incstack = 0
  1685                           ;incstack = 0
  1686  000AA0  0100               	movlb	0	; () banked
  1687  000AA2  0100               	movlb	0	; () banked
  1688  000AA4  83BC               	bsf	(_regImg+2)& (0+255),1,b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 833: FMwrite(1);
  1692  000AA6  6E15               	movwf	??_setScan& (0+255),c
  1693  000AA8  0E01               	movlw	1
  1694  000AAA  6E02               	movwf	?_FMwrite,c
  1695  000AAC  5015               	movf	??_setScan& (0+255),w,c
  1696  000AAE  EC52  F008         	call	_FMwrite	;wreg free
  1697                           
  1698                           ;main.c: 835: regImg[2] &=0xFDFF;
  1699  000AB2  0100               	movlb	0	; () banked
  1700  000AB4  0100               	movlb	0	; () banked
  1701  000AB6  93BF               	bcf	(_regImg+5)& (0+255),1,b
  1702                           
  1703                           ;main.c: 836: FMwrite(2);
  1704  000AB8  6E15               	movwf	??_setScan& (0+255),c
  1705  000ABA  0E02               	movlw	2
  1706  000ABC  6E02               	movwf	?_FMwrite,c
  1707  000ABE  5015               	movf	??_setScan& (0+255),w,c
  1708  000AC0  EC52  F008         	call	_FMwrite	;wreg free
  1709                           
  1710                           ;main.c: 850: regImg[3] &=0xBFFF;
  1711  000AC4  0100               	movlb	0	; () banked
  1712  000AC6  0100               	movlb	0	; () banked
  1713  000AC8  9DC1               	bcf	(_regImg+7)& (0+255),6,b
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 851: FMwrite(3);
  1717  000ACA  6E15               	movwf	??_setScan& (0+255),c
  1718  000ACC  0E03               	movlw	3
  1719  000ACE  6E02               	movwf	?_FMwrite,c
  1720  000AD0  5015               	movf	??_setScan& (0+255),w,c
  1721  000AD2  EC52  F008         	call	_FMwrite	;wreg free
  1722                           
  1723                           ;main.c: 855: regImg[3] |= 0x4000;
  1724  000AD6  0100               	movlb	0	; () banked
  1725  000AD8  0100               	movlb	0	; () banked
  1726  000ADA  8DC1               	bsf	(_regImg+7)& (0+255),6,b
  1727                           
  1728                           ;main.c: 857: regImg[3] |= 0x2000;
  1729  000ADC  0100               	movlb	0	; () banked
  1730  000ADE  0100               	movlb	0	; () banked
  1731  000AE0  8BC1               	bsf	(_regImg+7)& (0+255),5,b
  1732                           
  1733                           ; BSR set to: 0
  1734                           ;main.c: 859: if(dir == 1)
  1735  000AE2  0413               	decf	setScan@dir,w,c
  1736  000AE4  A4D8               	btfss	status,2,c
  1737  000AE6  D004               	goto	l2472
  1738                           
  1739                           ; BSR set to: 0
  1740                           ;main.c: 860: regImg[3] |= 0x8000;
  1741  000AE8  0100               	movlb	0	; () banked
  1742  000AEA  0100               	movlb	0	; () banked
  1743  000AEC  8FC1               	bsf	(_regImg+7)& (0+255),7,b
  1744  000AEE  D003               	goto	l2474
  1745  000AF0                     l2472:
  1746                           
  1747                           ; BSR set to: 0
  1748                           ;main.c: 861: else
  1749                           ;main.c: 862: regImg[3] &= 0x7FFF;
  1750  000AF0  0100               	movlb	0	; () banked
  1751  000AF2  0100               	movlb	0	; () banked
  1752  000AF4  9FC1               	bcf	(_regImg+7)& (0+255),7,b
  1753  000AF6                     l2474:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;main.c: 864: regImg[3] &= 0xE7FF;
  1757  000AF6  0100               	movlb	0	; () banked
  1758  000AF8  0EFF               	movlw	255
  1759  000AFA  0100               	movlb	0	; () banked
  1760  000AFC  17C0               	andwf	(_regImg+6)& (0+255),f,b
  1761  000AFE  0EE7               	movlw	231
  1762  000B00  0100               	movlb	0	; () banked
  1763  000B02  17C1               	andwf	(_regImg+7)& (0+255),f,b
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;main.c: 866: regImg[3] &= 0xFF80;
  1767  000B04  0100               	movlb	0	; () banked
  1768  000B06  0E80               	movlw	128
  1769  000B08  0100               	movlb	0	; () banked
  1770  000B0A  17C0               	andwf	(_regImg+6)& (0+255),f,b
  1771  000B0C  0EFF               	movlw	255
  1772  000B0E  0100               	movlb	0	; () banked
  1773  000B10  17C1               	andwf	(_regImg+7)& (0+255),f,b
  1774                           
  1775                           ;main.c: 867: regImg[3] |= 0x0040;
  1776  000B12  0100               	movlb	0	; () banked
  1777  000B14  0100               	movlb	0	; () banked
  1778  000B16  8DC0               	bsf	(_regImg+6)& (0+255),6,b
  1779                           
  1780                           ;main.c: 869: regImg[10] |= 0x0008;
  1781  000B18  0100               	movlb	0	; () banked
  1782  000B1A  0100               	movlb	0	; () banked
  1783  000B1C  87CE               	bsf	(_regImg+20)& (0+255),3,b
  1784                           
  1785                           ; BSR set to: 0
  1786                           ;main.c: 870: FMwrite(10);
  1787  000B1E  6E15               	movwf	??_setScan& (0+255),c
  1788  000B20  0E0A               	movlw	10
  1789  000B22  6E02               	movwf	?_FMwrite,c
  1790  000B24  5015               	movf	??_setScan& (0+255),w,c
  1791  000B26  EC52  F008         	call	_FMwrite	;wreg free
  1792                           
  1793                           ;main.c: 872: FMwrite(3);
  1794  000B2A  6E15               	movwf	??_setScan& (0+255),c
  1795  000B2C  0E03               	movlw	3
  1796  000B2E  6E02               	movwf	?_FMwrite,c
  1797  000B30  5015               	movf	??_setScan& (0+255),w,c
  1798  000B32  EC52  F008         	call	_FMwrite	;wreg free
  1799  000B36                     l2482:
  1800                           
  1801                           ;main.c: 876: dly(2);
  1802  000B36  0E00               	movlw	0
  1803  000B38  6E02               	movwf	?_dly+1,c
  1804  000B3A  0E02               	movlw	2
  1805  000B3C  6E01               	movwf	?_dly,c
  1806  000B3E  ECCD  F00A         	call	_dly	;wreg free
  1807                           
  1808                           ;main.c: 877: if (FMready(&dat) != 0) return 1;
  1809  000B42  0E00               	movlw	high setScan@dat
  1810  000B44  6E0E               	movwf	?_FMready+1,c
  1811  000B46  0E17               	movlw	low setScan@dat
  1812  000B48  6E0D               	movwf	?_FMready,c
  1813  000B4A  EC43  F00A         	call	_FMready	;wreg free
  1814  000B4E  0900               	iorlw	0
  1815  000B50  B4D8               	btfsc	status,2,c
  1816  000B52  D005               	goto	l2490
  1817  000B54  0E00               	movlw	0
  1818  000B56  6E14               	movwf	?_setScan+1,c
  1819  000B58  0E01               	movlw	1
  1820  000B5A  6E13               	movwf	?_setScan,c
  1821  000B5C  D044               	goto	l249
  1822  000B5E                     l2490:
  1823                           
  1824                           ;main.c: 878: } while (!dat);
  1825  000B5E  5018               	movf	setScan@dat+1,w,c
  1826  000B60  1017               	iorwf	setScan@dat,w,c
  1827  000B62  B4D8               	btfsc	status,2,c
  1828  000B64  D7E8               	goto	l2482
  1829                           
  1830                           ;main.c: 881: if ( FMread(0x13, &chanRgstr) == 1)
  1831  000B66  6E15               	movwf	??_setScan& (0+255),c
  1832  000B68  0E13               	movlw	19
  1833  000B6A  6E02               	movwf	?_FMread,c
  1834  000B6C  5015               	movf	??_setScan& (0+255),w,c
  1835  000B6E  0E00               	movlw	high setScan@chanRgstr
  1836  000B70  6E04               	movwf	?_FMread+2,c
  1837  000B72  0E19               	movlw	low setScan@chanRgstr
  1838  000B74  6E03               	movwf	?_FMread+1,c
  1839  000B76  ECE5  F007         	call	_FMread	;wreg free
  1840  000B7A  6E16               	movwf	(??_setScan+1)& (0+255),c
  1841  000B7C  0416               	decf	??_setScan+1,w,c
  1842  000B7E  B4D8               	btfsc	status,2,c
  1843                           
  1844                           ;main.c: 882: errfm();
  1845  000B80  EC41  F00B         	call	_errfm	;wreg free
  1846                           
  1847                           ;main.c: 884: chanRgstr >>= 7;
  1848  000B84  0E07               	movlw	7
  1849  000B86  6E15               	movwf	??_setScan& (0+255),c
  1850  000B88                     u1535:
  1851  000B88  90D8               	bcf	status,0,c
  1852  000B8A  321A               	rrcf	setScan@chanRgstr+1,f,c
  1853  000B8C  3219               	rrcf	setScan@chanRgstr,f,c
  1854  000B8E  2E15               	decfsz	??_setScan& (0+255),f,c
  1855  000B90  D7FB               	goto	u1535
  1856                           
  1857                           ;main.c: 885: chanRgstr &= 0x01FF;
  1858  000B92  0EFF               	movlw	255
  1859  000B94  1619               	andwf	setScan@chanRgstr,f,c
  1860  000B96  0E01               	movlw	1
  1861  000B98  161A               	andwf	setScan@chanRgstr+1,f,c
  1862                           
  1863                           ;main.c: 887: regImg[2] &= 0xFE00;
  1864  000B9A  0100               	movlb	0	; () banked
  1865  000B9C  0E00               	movlw	0
  1866  000B9E  0100               	movlb	0	; () banked
  1867  000BA0  17BE               	andwf	(_regImg+4)& (0+255),f,b
  1868  000BA2  0EFE               	movlw	254
  1869  000BA4  0100               	movlb	0	; () banked
  1870  000BA6  17BF               	andwf	(_regImg+5)& (0+255),f,b
  1871                           
  1872                           ; BSR set to: 0
  1873                           ;main.c: 888: regImg[2] |= chanRgstr;
  1874  000BA8  5019               	movf	setScan@chanRgstr,w,c
  1875  000BAA  0100               	movlb	0	; () banked
  1876  000BAC  0100               	movlb	0	; () banked
  1877  000BAE  13BE               	iorwf	(_regImg+4)& (0+255),f,b
  1878  000BB0  501A               	movf	setScan@chanRgstr+1,w,c
  1879  000BB2  0100               	movlb	0	; () banked
  1880  000BB4  0100               	movlb	0	; () banked
  1881  000BB6  13BF               	iorwf	(_regImg+5)& (0+255),f,b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 889: FMwrite(2);
  1885  000BB8  6E15               	movwf	??_setScan& (0+255),c
  1886  000BBA  0E02               	movlw	2
  1887  000BBC  6E02               	movwf	?_FMwrite,c
  1888  000BBE  5015               	movf	??_setScan& (0+255),w,c
  1889  000BC0  EC52  F008         	call	_FMwrite	;wreg free
  1890                           
  1891                           ;main.c: 892: chanRgstr += 690;
  1892  000BC4  0EB2               	movlw	178
  1893  000BC6  2619               	addwf	setScan@chanRgstr,f,c
  1894  000BC8  0E02               	movlw	2
  1895  000BCA  221A               	addwfc	setScan@chanRgstr+1,f,c
  1896                           
  1897                           ;main.c: 894: regImg[1] &= 0xFFFD;
  1898  000BCC  0100               	movlb	0	; () banked
  1899  000BCE  0100               	movlb	0	; () banked
  1900  000BD0  93BC               	bcf	(_regImg+2)& (0+255),1,b
  1901                           
  1902                           ; BSR set to: 0
  1903                           ;main.c: 895: FMwrite(1);
  1904  000BD2  6E15               	movwf	??_setScan& (0+255),c
  1905  000BD4  0E01               	movlw	1
  1906  000BD6  6E02               	movwf	?_FMwrite,c
  1907  000BD8  5015               	movf	??_setScan& (0+255),w,c
  1908  000BDA  EC52  F008         	call	_FMwrite	;wreg free
  1909                           
  1910                           ;main.c: 897: return chanRgstr;
  1911  000BDE  C019  F013         	movff	setScan@chanRgstr,?_setScan
  1912  000BE2  C01A  F014         	movff	setScan@chanRgstr+1,?_setScan+1
  1913  000BE6                     l249:
  1914  000BE6  0012               	return	
  1915  000BE8                     __end_of_setScan:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           postinc0	equ	0xFEE
  1922                           wreg	equ	0xFE8
  1923                           postinc1	equ	0xFE6
  1924                           postdec1	equ	0xFE5
  1925                           fsr1l	equ	0xFE1
  1926                           indf2	equ	0xFDF
  1927                           postinc2	equ	0xFDE
  1928                           fsr2h	equ	0xFDA
  1929                           fsr2l	equ	0xFD9
  1930                           status	equ	0xFD8
  1931                           
  1932 ;; *************** function _showChan *****************
  1933 ;; Defined at:
  1934 ;;		line 811 in file "main.c"
  1935 ;; Parameters:    Size  Location     Type
  1936 ;;  channel         2    3[COMRAM] unsigned int 
  1937 ;; Auto vars:     Size  Location     Type
  1938 ;;		None
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  1    wreg      unsigned char 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1948 ;;      Params:         2       0       0       0
  1949 ;;      Locals:         0       0       0       0
  1950 ;;      Temps:          1       0       0       0
  1951 ;;      Totals:         3       0       0       0
  1952 ;;Total ram usage:        3 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    2
  1955 ;; This function calls:
  1956 ;;		_setscn
  1957 ;;		_charWrt
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text3
  1964  001616                     __ptext3:
  1965                           	opt stack 0
  1966  001616                     _showChan:
  1967                           	opt stack 28
  1968                           
  1969                           ;main.c: 812: setscn(0);
  1970                           
  1971                           ;incstack = 0
  1972                           ;incstack = 0
  1973  001616  6E06               	movwf	??_showChan& (0+255),c
  1974  001618  0E00               	movlw	0
  1975  00161A  6E01               	movwf	?_setscn,c
  1976  00161C  5006               	movf	??_showChan& (0+255),w,c
  1977  00161E  ECE6  F00A         	call	_setscn	;wreg free
  1978                           
  1979                           ;main.c: 813: charWrt(channel, 1);
  1980  001622  C004  F001         	movff	showChan@channel,?_charWrt
  1981  001626  6E06               	movwf	??_showChan& (0+255),c
  1982  001628  0E01               	movlw	1
  1983  00162A  6E02               	movwf	?_charWrt+1,c
  1984  00162C  5006               	movf	??_showChan& (0+255),w,c
  1985  00162E  EC69  F00A         	call	_charWrt	;wreg free
  1986                           
  1987                           ;main.c: 815: return 0;
  1988                           ;	Return value of _showChan is never used
  1989  001632  0012               	return	
  1990  001634                     __end_of_showChan:
  1991                           	opt stack 0
  1992                           tblptru	equ	0xFF8
  1993                           tblptrh	equ	0xFF7
  1994                           tblptrl	equ	0xFF6
  1995                           tablat	equ	0xFF5
  1996                           postinc0	equ	0xFEE
  1997                           wreg	equ	0xFE8
  1998                           postinc1	equ	0xFE6
  1999                           postdec1	equ	0xFE5
  2000                           fsr1l	equ	0xFE1
  2001                           indf2	equ	0xFDF
  2002                           postinc2	equ	0xFDE
  2003                           fsr2h	equ	0xFDA
  2004                           fsr2l	equ	0xFD9
  2005                           status	equ	0xFD8
  2006                           
  2007 ;; *************** function _showVol *****************
  2008 ;; Defined at:
  2009 ;;		line 791 in file "main.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;  volume          2    3[COMRAM] unsigned int 
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;                  1    wreg      unsigned char 
  2016 ;; Registers used:
  2017 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2018 ;; Tracked objects:
  2019 ;;		On entry : 0/0
  2020 ;;		On exit  : 0/0
  2021 ;;		Unchanged: 0/0
  2022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2023 ;;      Params:         2       0       0       0
  2024 ;;      Locals:         0       0       0       0
  2025 ;;      Temps:          2       0       0       0
  2026 ;;      Totals:         4       0       0       0
  2027 ;;Total ram usage:        4 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    2
  2030 ;; This function calls:
  2031 ;;		_setscn
  2032 ;;		_charWrt
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037                           
  2038                           	psect	text4
  2039  00151A                     __ptext4:
  2040                           	opt stack 0
  2041  00151A                     _showVol:
  2042                           	opt stack 28
  2043                           
  2044                           ;main.c: 793: setscn(0);
  2045                           
  2046                           ;incstack = 0
  2047                           ;incstack = 0
  2048  00151A  6E06               	movwf	??_showVol& (0+255),c
  2049  00151C  0E00               	movlw	0
  2050  00151E  6E01               	movwf	?_setscn,c
  2051  001520  5006               	movf	??_showVol& (0+255),w,c
  2052  001522  ECE6  F00A         	call	_setscn	;wreg free
  2053                           
  2054                           ;main.c: 795: if (volume >= 10)
  2055  001526  0E0A               	movlw	10
  2056  001528  5C04               	subwf	showVol@volume,w,c
  2057  00152A  0E00               	movlw	0
  2058  00152C  5805               	subwfb	showVol@volume+1,w,c
  2059  00152E  A0D8               	btfss	status,0,c
  2060  001530  D00E               	goto	l2280
  2061                           
  2062                           ;main.c: 796: {
  2063                           ;main.c: 797: charWrt(1,2);
  2064  001532  6E06               	movwf	??_showVol& (0+255),c
  2065  001534  0E01               	movlw	1
  2066  001536  6E01               	movwf	?_charWrt,c
  2067  001538  5006               	movf	??_showVol& (0+255),w,c
  2068  00153A  6E07               	movwf	(??_showVol+1)& (0+255),c
  2069  00153C  0E02               	movlw	2
  2070  00153E  6E02               	movwf	?_charWrt+1,c
  2071  001540  5007               	movf	(??_showVol+1)& (0+255),w,c
  2072  001542  EC69  F00A         	call	_charWrt	;wreg free
  2073                           
  2074                           ;main.c: 798: volume -= 10;
  2075  001546  0E0A               	movlw	10
  2076  001548  5E04               	subwf	showVol@volume,f,c
  2077  00154A  0E00               	movlw	0
  2078  00154C  5A05               	subwfb	showVol@volume+1,f,c
  2079  00154E                     l2280:
  2080                           
  2081                           ;main.c: 799: }
  2082                           ;main.c: 801: charWrt(volume, 3);
  2083  00154E  C004  F001         	movff	showVol@volume,?_charWrt
  2084  001552  6E06               	movwf	??_showVol& (0+255),c
  2085  001554  0E03               	movlw	3
  2086  001556  6E02               	movwf	?_charWrt+1,c
  2087  001558  5006               	movf	??_showVol& (0+255),w,c
  2088  00155A  EC69  F00A         	call	_charWrt	;wreg free
  2089                           
  2090                           ;main.c: 804: return 0;
  2091                           ;	Return value of _showVol is never used
  2092  00155E  0012               	return	
  2093  001560                     __end_of_showVol:
  2094                           	opt stack 0
  2095                           tblptru	equ	0xFF8
  2096                           tblptrh	equ	0xFF7
  2097                           tblptrl	equ	0xFF6
  2098                           tablat	equ	0xFF5
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           postinc1	equ	0xFE6
  2102                           postdec1	equ	0xFE5
  2103                           fsr1l	equ	0xFE1
  2104                           indf2	equ	0xFDF
  2105                           postinc2	equ	0xFDE
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _setscn *****************
  2111 ;; Defined at:
  2112 ;;		line 204 in file "main.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  state           1    0[COMRAM] unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  data            1    2[COMRAM] unsigned char 
  2117 ;; Return value:  Size  Location     Type
  2118 ;;		None               void
  2119 ;; Registers used:
  2120 ;;		wreg, status,2, status,0
  2121 ;; Tracked objects:
  2122 ;;		On entry : 0/0
  2123 ;;		On exit  : 0/0
  2124 ;;		Unchanged: 0/0
  2125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2126 ;;      Params:         1       0       0       0
  2127 ;;      Locals:         1       0       0       0
  2128 ;;      Temps:          1       0       0       0
  2129 ;;      Totals:         3       0       0       0
  2130 ;;Total ram usage:        3 bytes
  2131 ;; Hardware stack levels used:    1
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_showVol
  2136 ;;		_showChan
  2137 ;; This function uses a non-reentrant model
  2138 ;;
  2139                           
  2140                           	psect	text5
  2141  0015CC                     __ptext5:
  2142                           	opt stack 0
  2143  0015CC                     _setscn:
  2144                           	opt stack 29
  2145                           
  2146                           ;main.c: 205: unsigned char data;
  2147                           ;main.c: 207: if(state == 1)
  2148                           
  2149                           ;incstack = 0
  2150                           ;incstack = 0
  2151  0015CC  0401               	decf	setscn@state,w,c
  2152  0015CE  A4D8               	btfss	status,2,c
  2153  0015D0  D002               	goto	l1938
  2154                           
  2155                           ;main.c: 208: data = 0xFF;
  2156  0015D2  6803               	setf	setscn@data,c
  2157  0015D4  D004               	goto	l1940
  2158  0015D6                     l1938:
  2159                           
  2160                           ;main.c: 209: else
  2161                           ;main.c: 210: data = 0x00;
  2162  0015D6  6E02               	movwf	??_setscn& (0+255),c
  2163  0015D8  0E00               	movlw	0
  2164  0015DA  6E03               	movwf	setscn@data,c
  2165  0015DC  5002               	movf	??_setscn& (0+255),w,c
  2166  0015DE                     l1940:
  2167                           
  2168                           ;main.c: 212: LCDDATA0 = data;
  2169  0015DE  C003  FF60         	movff	setscn@data,3936	;volatile
  2170                           
  2171                           ;main.c: 213: LCDDATA1 = data;
  2172  0015E2  C003  FF61         	movff	setscn@data,3937	;volatile
  2173                           
  2174                           ;main.c: 214: LCDDATA2 = data;
  2175  0015E6  C003  FF62         	movff	setscn@data,3938	;volatile
  2176                           
  2177                           ;main.c: 215: data &= 0b00000111;
  2178  0015EA  0E07               	movlw	7
  2179  0015EC  1603               	andwf	setscn@data,f,c
  2180                           
  2181                           ;main.c: 216: LCDDATA3 = data;
  2182  0015EE  C003  FF63         	movff	setscn@data,3939	;volatile
  2183                           
  2184                           ;main.c: 218: return;
  2185  0015F2  0012               	return	
  2186  0015F4                     __end_of_setscn:
  2187                           	opt stack 0
  2188                           tblptru	equ	0xFF8
  2189                           tblptrh	equ	0xFF7
  2190                           tblptrl	equ	0xFF6
  2191                           tablat	equ	0xFF5
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           postinc1	equ	0xFE6
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           indf2	equ	0xFDF
  2198                           postinc2	equ	0xFDE
  2199                           fsr2h	equ	0xFDA
  2200                           fsr2l	equ	0xFD9
  2201                           status	equ	0xFD8
  2202                           
  2203 ;; *************** function _showFreq *****************
  2204 ;; Defined at:
  2205 ;;		line 752 in file "main.c"
  2206 ;; Parameters:    Size  Location     Type
  2207 ;;  frequency       2   14[COMRAM] unsigned int 
  2208 ;; Auto vars:     Size  Location     Type
  2209 ;;  display         3   18[COMRAM] unsigned char [3]
  2210 ;; Return value:  Size  Location     Type
  2211 ;;                  1    wreg      unsigned char 
  2212 ;; Registers used:
  2213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2214 ;; Tracked objects:
  2215 ;;		On entry : 0/0
  2216 ;;		On exit  : 0/0
  2217 ;;		Unchanged: 0/0
  2218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2219 ;;      Params:         2       0       0       0
  2220 ;;      Locals:         3       0       0       0
  2221 ;;      Temps:          2       0       0       0
  2222 ;;      Totals:         7       0       0       0
  2223 ;;Total ram usage:        7 bytes
  2224 ;; Hardware stack levels used:    1
  2225 ;; Hardware stack levels required when called:    2
  2226 ;; This function calls:
  2227 ;;		_segWrt
  2228 ;;		_charWrt
  2229 ;;		___lwdiv
  2230 ;;		___wmul
  2231 ;; This function is called by:
  2232 ;;		_main
  2233 ;; This function uses a non-reentrant model
  2234 ;;
  2235                           
  2236                           	psect	text6
  2237  000BE8                     __ptext6:
  2238                           	opt stack 0
  2239  000BE8                     _showFreq:
  2240                           	opt stack 28
  2241                           
  2242                           ;main.c: 754: unsigned char display[3];
  2243                           ;main.c: 756: if (frequency >= 1000)
  2244                           
  2245                           ;incstack = 0
  2246                           ;incstack = 0
  2247  000BE8  0EE8               	movlw	232
  2248  000BEA  5C0F               	subwf	showFreq@frequency,w,c
  2249  000BEC  0E03               	movlw	3
  2250  000BEE  5810               	subwfb	showFreq@frequency+1,w,c
  2251  000BF0  A0D8               	btfss	status,0,c
  2252  000BF2  D00F               	goto	l2252
  2253                           
  2254                           ;main.c: 757: {
  2255                           ;main.c: 758: segWrt(24, 1);
  2256  000BF4  6E11               	movwf	??_showFreq& (0+255),c
  2257  000BF6  0E18               	movlw	24
  2258  000BF8  6E01               	movwf	?_segWrt,c
  2259  000BFA  5011               	movf	??_showFreq& (0+255),w,c
  2260  000BFC  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2261  000BFE  0E01               	movlw	1
  2262  000C00  6E02               	movwf	?_segWrt+1,c
  2263  000C02  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2264  000C04  EC61  F009         	call	_segWrt	;wreg free
  2265                           
  2266                           ;main.c: 759: frequency -= 1000;
  2267  000C08  0EE8               	movlw	232
  2268  000C0A  5E0F               	subwf	showFreq@frequency,f,c
  2269  000C0C  0E03               	movlw	3
  2270  000C0E  5A10               	subwfb	showFreq@frequency+1,f,c
  2271                           
  2272                           ;main.c: 760: }
  2273  000C10  D00A               	goto	l2254
  2274  000C12                     l2252:
  2275                           
  2276                           ;main.c: 761: else
  2277                           ;main.c: 762: segWrt(24, 0);
  2278  000C12  6E11               	movwf	??_showFreq& (0+255),c
  2279  000C14  0E18               	movlw	24
  2280  000C16  6E01               	movwf	?_segWrt,c
  2281  000C18  5011               	movf	??_showFreq& (0+255),w,c
  2282  000C1A  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2283  000C1C  0E00               	movlw	0
  2284  000C1E  6E02               	movwf	?_segWrt+1,c
  2285  000C20  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2286  000C22  EC61  F009         	call	_segWrt	;wreg free
  2287  000C26                     l2254:
  2288                           
  2289                           ;main.c: 764: display[0] = (frequency/100);
  2290  000C26  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2291  000C2A  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2292  000C2E  0E00               	movlw	0
  2293  000C30  6E04               	movwf	?___lwdiv+3,c
  2294  000C32  0E64               	movlw	100
  2295  000C34  6E03               	movwf	?___lwdiv+2,c
  2296  000C36  ECED  F009         	call	___lwdiv	;wreg free
  2297  000C3A  5001               	movf	?___lwdiv,w,c
  2298  000C3C  6E13               	movwf	showFreq@display,c
  2299                           
  2300                           ;main.c: 766: frequency -= (frequency/100)*100;
  2301  000C3E  0E00               	movlw	0
  2302  000C40  6E04               	movwf	?___lwdiv+3,c
  2303  000C42  0E64               	movlw	100
  2304  000C44  6E03               	movwf	?___lwdiv+2,c
  2305  000C46  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2306  000C4A  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2307  000C4E  ECED  F009         	call	___lwdiv	;wreg free
  2308  000C52  C001  F009         	movff	?___lwdiv,?___wmul
  2309  000C56  C002  F00A         	movff	?___lwdiv+1,?___wmul+1
  2310  000C5A  0E00               	movlw	0
  2311  000C5C  6E0C               	movwf	?___wmul+3,c
  2312  000C5E  0E64               	movlw	100
  2313  000C60  6E0B               	movwf	?___wmul+2,c
  2314  000C62  ECB0  F00A         	call	___wmul	;wreg free
  2315  000C66  5009               	movf	?___wmul,w,c
  2316  000C68  5E0F               	subwf	showFreq@frequency,f,c
  2317  000C6A  500A               	movf	?___wmul+1,w,c
  2318  000C6C  5A10               	subwfb	showFreq@frequency+1,f,c
  2319                           
  2320                           ;main.c: 768: display[1] = (frequency/10);
  2321  000C6E  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2322  000C72  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2323  000C76  0E00               	movlw	0
  2324  000C78  6E04               	movwf	?___lwdiv+3,c
  2325  000C7A  0E0A               	movlw	10
  2326  000C7C  6E03               	movwf	?___lwdiv+2,c
  2327  000C7E  ECED  F009         	call	___lwdiv	;wreg free
  2328  000C82  5001               	movf	?___lwdiv,w,c
  2329  000C84  6E14               	movwf	showFreq@display+1,c
  2330                           
  2331                           ;main.c: 770: frequency -= (frequency/10)*10;
  2332  000C86  0E00               	movlw	0
  2333  000C88  6E04               	movwf	?___lwdiv+3,c
  2334  000C8A  0E0A               	movlw	10
  2335  000C8C  6E03               	movwf	?___lwdiv+2,c
  2336  000C8E  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2337  000C92  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2338  000C96  ECED  F009         	call	___lwdiv	;wreg free
  2339  000C9A  C001  F009         	movff	?___lwdiv,?___wmul
  2340  000C9E  C002  F00A         	movff	?___lwdiv+1,?___wmul+1
  2341  000CA2  0E00               	movlw	0
  2342  000CA4  6E0C               	movwf	?___wmul+3,c
  2343  000CA6  0E0A               	movlw	10
  2344  000CA8  6E0B               	movwf	?___wmul+2,c
  2345  000CAA  ECB0  F00A         	call	___wmul	;wreg free
  2346  000CAE  5009               	movf	?___wmul,w,c
  2347  000CB0  5E0F               	subwf	showFreq@frequency,f,c
  2348  000CB2  500A               	movf	?___wmul+1,w,c
  2349  000CB4  5A10               	subwfb	showFreq@frequency+1,f,c
  2350                           
  2351                           ;main.c: 772: display[2] = frequency;
  2352  000CB6  C00F  F015         	movff	showFreq@frequency,showFreq@display+2
  2353                           
  2354                           ;main.c: 774: charWrt(display[0], 1);
  2355  000CBA  C013  F001         	movff	showFreq@display,?_charWrt
  2356  000CBE  6E11               	movwf	??_showFreq& (0+255),c
  2357  000CC0  0E01               	movlw	1
  2358  000CC2  6E02               	movwf	?_charWrt+1,c
  2359  000CC4  5011               	movf	??_showFreq& (0+255),w,c
  2360  000CC6  EC69  F00A         	call	_charWrt	;wreg free
  2361                           
  2362                           ;main.c: 775: charWrt(display[1], 2);
  2363  000CCA  C014  F001         	movff	showFreq@display+1,?_charWrt
  2364  000CCE  6E11               	movwf	??_showFreq& (0+255),c
  2365  000CD0  0E02               	movlw	2
  2366  000CD2  6E02               	movwf	?_charWrt+1,c
  2367  000CD4  5011               	movf	??_showFreq& (0+255),w,c
  2368  000CD6  EC69  F00A         	call	_charWrt	;wreg free
  2369                           
  2370                           ;main.c: 776: segWrt(23, 1);
  2371  000CDA  6E11               	movwf	??_showFreq& (0+255),c
  2372  000CDC  0E17               	movlw	23
  2373  000CDE  6E01               	movwf	?_segWrt,c
  2374  000CE0  5011               	movf	??_showFreq& (0+255),w,c
  2375  000CE2  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2376  000CE4  0E01               	movlw	1
  2377  000CE6  6E02               	movwf	?_segWrt+1,c
  2378  000CE8  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2379  000CEA  EC61  F009         	call	_segWrt	;wreg free
  2380                           
  2381                           ;main.c: 777: charWrt(display[2], 3);
  2382  000CEE  C015  F001         	movff	showFreq@display+2,?_charWrt
  2383  000CF2  6E11               	movwf	??_showFreq& (0+255),c
  2384  000CF4  0E03               	movlw	3
  2385  000CF6  6E02               	movwf	?_charWrt+1,c
  2386  000CF8  5011               	movf	??_showFreq& (0+255),w,c
  2387  000CFA  EC69  F00A         	call	_charWrt	;wreg free
  2388                           
  2389                           ;main.c: 779: return 0;
  2390                           ;	Return value of _showFreq is never used
  2391  000CFE  0012               	return	
  2392  000D00                     __end_of_showFreq:
  2393                           	opt stack 0
  2394                           tblptru	equ	0xFF8
  2395                           tblptrh	equ	0xFF7
  2396                           tblptrl	equ	0xFF6
  2397                           tablat	equ	0xFF5
  2398                           postinc0	equ	0xFEE
  2399                           wreg	equ	0xFE8
  2400                           postinc1	equ	0xFE6
  2401                           postdec1	equ	0xFE5
  2402                           fsr1l	equ	0xFE1
  2403                           indf2	equ	0xFDF
  2404                           postinc2	equ	0xFDE
  2405                           fsr2h	equ	0xFDA
  2406                           fsr2l	equ	0xFD9
  2407                           status	equ	0xFD8
  2408                           
  2409 ;; *************** function ___lwdiv *****************
  2410 ;; Defined at:
  2411 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  2412 ;; Parameters:    Size  Location     Type
  2413 ;;  dividend        2    0[COMRAM] unsigned int 
  2414 ;;  divisor         2    2[COMRAM] unsigned int 
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;  quotient        2    5[COMRAM] unsigned int 
  2417 ;;  counter         1    7[COMRAM] unsigned char 
  2418 ;; Return value:  Size  Location     Type
  2419 ;;                  2    0[COMRAM] unsigned int 
  2420 ;; Registers used:
  2421 ;;		wreg, status,2, status,0
  2422 ;; Tracked objects:
  2423 ;;		On entry : 0/0
  2424 ;;		On exit  : 0/0
  2425 ;;		Unchanged: 0/0
  2426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2427 ;;      Params:         4       0       0       0
  2428 ;;      Locals:         3       0       0       0
  2429 ;;      Temps:          1       0       0       0
  2430 ;;      Totals:         8       0       0       0
  2431 ;;Total ram usage:        8 bytes
  2432 ;; Hardware stack levels used:    1
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_showFreq
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439                           
  2440                           	psect	text7
  2441  0013DA                     __ptext7:
  2442                           	opt stack 0
  2443  0013DA                     ___lwdiv:
  2444                           	opt stack 29
  2445                           
  2446                           ;incstack = 0
  2447                           ;incstack = 0
  2448  0013DA  0E00               	movlw	0
  2449  0013DC  6E07               	movwf	___lwdiv@quotient+1,c
  2450  0013DE  0E00               	movlw	0
  2451  0013E0  6E06               	movwf	___lwdiv@quotient,c
  2452  0013E2  5004               	movf	___lwdiv@divisor+1,w,c
  2453  0013E4  1003               	iorwf	___lwdiv@divisor,w,c
  2454  0013E6  B4D8               	btfsc	status,2,c
  2455  0013E8  D01E               	goto	l880
  2456  0013EA  6E05               	movwf	??___lwdiv& (0+255),c
  2457  0013EC  0E01               	movlw	1
  2458  0013EE  6E08               	movwf	___lwdiv@counter,c
  2459  0013F0  5005               	movf	??___lwdiv& (0+255),w,c
  2460  0013F2  D004               	goto	l2004
  2461  0013F4                     l2002:
  2462  0013F4  90D8               	bcf	status,0,c
  2463  0013F6  3603               	rlcf	___lwdiv@divisor,f,c
  2464  0013F8  3604               	rlcf	___lwdiv@divisor+1,f,c
  2465  0013FA  2A08               	incf	___lwdiv@counter,f,c
  2466  0013FC                     l2004:
  2467  0013FC  AE04               	btfss	___lwdiv@divisor+1,7,c
  2468  0013FE  D7FA               	goto	l2002
  2469  001400                     l2006:
  2470  001400  90D8               	bcf	status,0,c
  2471  001402  3606               	rlcf	___lwdiv@quotient,f,c
  2472  001404  3607               	rlcf	___lwdiv@quotient+1,f,c
  2473  001406  5003               	movf	___lwdiv@divisor,w,c
  2474  001408  5C01               	subwf	___lwdiv@dividend,w,c
  2475  00140A  5004               	movf	___lwdiv@divisor+1,w,c
  2476  00140C  5802               	subwfb	___lwdiv@dividend+1,w,c
  2477  00140E  A0D8               	btfss	status,0,c
  2478  001410  D005               	goto	l2014
  2479  001412  5003               	movf	___lwdiv@divisor,w,c
  2480  001414  5E01               	subwf	___lwdiv@dividend,f,c
  2481  001416  5004               	movf	___lwdiv@divisor+1,w,c
  2482  001418  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2483  00141A  8006               	bsf	___lwdiv@quotient,0,c
  2484  00141C                     l2014:
  2485  00141C  90D8               	bcf	status,0,c
  2486  00141E  3204               	rrcf	___lwdiv@divisor+1,f,c
  2487  001420  3203               	rrcf	___lwdiv@divisor,f,c
  2488  001422  2E08               	decfsz	___lwdiv@counter,f,c
  2489  001424  D7ED               	goto	l2006
  2490  001426                     l880:
  2491  001426  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  2492  00142A  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2493  00142E  0012               	return	
  2494  001430                     __end_of___lwdiv:
  2495                           	opt stack 0
  2496                           tblptru	equ	0xFF8
  2497                           tblptrh	equ	0xFF7
  2498                           tblptrl	equ	0xFF6
  2499                           tablat	equ	0xFF5
  2500                           postinc0	equ	0xFEE
  2501                           wreg	equ	0xFE8
  2502                           postinc1	equ	0xFE6
  2503                           postdec1	equ	0xFE5
  2504                           fsr1l	equ	0xFE1
  2505                           indf2	equ	0xFDF
  2506                           postinc2	equ	0xFDE
  2507                           fsr2h	equ	0xFDA
  2508                           fsr2l	equ	0xFD9
  2509                           status	equ	0xFD8
  2510                           
  2511 ;; *************** function _charWrt *****************
  2512 ;; Defined at:
  2513 ;;		line 310 in file "main.c"
  2514 ;; Parameters:    Size  Location     Type
  2515 ;;  numToDisp       1    0[COMRAM] unsigned char 
  2516 ;;  DigitNo         1    1[COMRAM] unsigned char 
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;		None
  2519 ;; Return value:  Size  Location     Type
  2520 ;;		None               void
  2521 ;; Registers used:
  2522 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2528 ;;      Params:         2       0       0       0
  2529 ;;      Locals:         0       0       0       0
  2530 ;;      Temps:          0       0       0       0
  2531 ;;      Totals:         2       0       0       0
  2532 ;;Total ram usage:        2 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    1
  2535 ;; This function calls:
  2536 ;;		_errfm
  2537 ;; This function is called by:
  2538 ;;		_showFreq
  2539 ;;		_showVol
  2540 ;;		_showChan
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text8
  2545  0014D2                     __ptext8:
  2546                           	opt stack 0
  2547  0014D2                     _charWrt:
  2548                           	opt stack 28
  2549                           
  2550                           ;main.c: 312: numToDisp = segData[numToDisp];
  2551                           
  2552                           ;incstack = 0
  2553                           ;incstack = 0
  2554  0014D2  5001               	movf	charWrt@numToDisp,w,c
  2555  0014D4  0D01               	mullw	1
  2556  0014D6  0E97               	movlw	low _segData
  2557  0014D8  24F3               	addwf	prodl,w,c
  2558  0014DA  6EF6               	movwf	tblptrl,c
  2559  0014DC  0E03               	movlw	high _segData
  2560  0014DE  20F4               	addwfc	prodh,w,c
  2561  0014E0  6EF7               	movwf	tblptrh,c
  2562  0014E2  0008               	tblrd		*
  2563  0014E4  CFF5 F001          	movff	tablat,charWrt@numToDisp
  2564                           
  2565                           ;main.c: 314: switch(DigitNo)
  2566  0014E8  D00C               	goto	l2134
  2567  0014EA                     l124:
  2568                           
  2569                           ;main.c: 317: LCDDATA2 = numToDisp;
  2570  0014EA  C001  FF62         	movff	charWrt@numToDisp,3938	;volatile
  2571                           
  2572                           ;main.c: 318: break;
  2573  0014EE  D014               	goto	l129
  2574  0014F0                     l126:
  2575                           
  2576                           ;main.c: 320: LCDDATA1 = numToDisp;
  2577  0014F0  C001  FF61         	movff	charWrt@numToDisp,3937	;volatile
  2578                           
  2579                           ;main.c: 321: break;
  2580  0014F4  D011               	goto	l129
  2581  0014F6                     l127:
  2582                           
  2583                           ;main.c: 323: LCDDATA0 = numToDisp;
  2584  0014F6  C001  FF60         	movff	charWrt@numToDisp,3936	;volatile
  2585                           
  2586                           ;main.c: 324: break;
  2587  0014FA  D00E               	goto	l129
  2588  0014FC                     l2130:
  2589                           
  2590                           ;main.c: 326: errfm();
  2591  0014FC  EC41  F00B         	call	_errfm	;wreg free
  2592                           
  2593                           ;main.c: 327: break;
  2594  001500  D00B               	goto	l129
  2595  001502                     l2134:
  2596  001502  5002               	movf	charWrt@DigitNo,w,c
  2597                           
  2598                           ; Switch size 1, requested type "space"
  2599                           ; Number of cases is 3, Range of values is 1 to 3
  2600                           ; switch strategies available:
  2601                           ; Name         Instructions Cycles
  2602                           ; simple_byte           10     6 (average)
  2603                           ;	Chosen strategy is simple_byte
  2604  001504  0A01               	xorlw	1	; case 1
  2605  001506  B4D8               	btfsc	status,2,c
  2606  001508  D7F0               	goto	l124
  2607  00150A  0A03               	xorlw	3	; case 2
  2608  00150C  B4D8               	btfsc	status,2,c
  2609  00150E  D7F0               	goto	l126
  2610  001510  0A01               	xorlw	1	; case 3
  2611  001512  B4D8               	btfsc	status,2,c
  2612  001514  D7F0               	goto	l127
  2613  001516  D7F2               	goto	l2130
  2614  001518                     l129:
  2615  001518  0012               	return	
  2616  00151A                     __end_of_charWrt:
  2617                           	opt stack 0
  2618                           tblptru	equ	0xFF8
  2619                           tblptrh	equ	0xFF7
  2620                           tblptrl	equ	0xFF6
  2621                           tablat	equ	0xFF5
  2622                           prodh	equ	0xFF4
  2623                           prodl	equ	0xFF3
  2624                           postinc0	equ	0xFEE
  2625                           wreg	equ	0xFE8
  2626                           postinc1	equ	0xFE6
  2627                           postdec1	equ	0xFE5
  2628                           fsr1l	equ	0xFE1
  2629                           indf2	equ	0xFDF
  2630                           postinc2	equ	0xFDE
  2631                           fsr2h	equ	0xFDA
  2632                           fsr2l	equ	0xFD9
  2633                           status	equ	0xFD8
  2634                           
  2635 ;; *************** function _segWrt *****************
  2636 ;; Defined at:
  2637 ;;		line 286 in file "main.c"
  2638 ;; Parameters:    Size  Location     Type
  2639 ;;  segOrd          1    0[COMRAM] unsigned char 
  2640 ;;  state           1    1[COMRAM] unsigned char 
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;  LCReg           2    4[COMRAM] PTR unsigned char 
  2643 ;;		 -> LCDDATA0(1), 
  2644 ;;  bitSelect       1    6[COMRAM] unsigned char 
  2645 ;; Return value:  Size  Location     Type
  2646 ;;		None               void
  2647 ;; Registers used:
  2648 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2649 ;; Tracked objects:
  2650 ;;		On entry : 0/0
  2651 ;;		On exit  : 0/0
  2652 ;;		Unchanged: 0/0
  2653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2654 ;;      Params:         2       0       0       0
  2655 ;;      Locals:         3       0       0       0
  2656 ;;      Temps:          2       0       0       0
  2657 ;;      Totals:         7       0       0       0
  2658 ;;Total ram usage:        7 bytes
  2659 ;; Hardware stack levels used:    1
  2660 ;; This function calls:
  2661 ;;		Nothing
  2662 ;; This function is called by:
  2663 ;;		_showFreq
  2664 ;;		_displayText
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text9
  2669  0012C2                     __ptext9:
  2670                           	opt stack 0
  2671  0012C2                     _segWrt:
  2672                           	opt stack 29
  2673                           
  2674                           ;main.c: 288: unsigned char bitSelect;
  2675                           ;main.c: 289: unsigned char *LCReg;
  2676                           ;main.c: 291: if (segOrd > 26)
  2677                           
  2678                           ;incstack = 0
  2679                           ;incstack = 0
  2680  0012C2  0E1A               	movlw	26
  2681  0012C4  6401               	cpfsgt	segWrt@segOrd,c
  2682  0012C6  D001               	goto	l1968
  2683  0012C8  D02C               	goto	l118
  2684  0012CA                     l1968:
  2685                           
  2686                           ;main.c: 294: LCReg = (unsigned char *)&LCDDATA0 + (segOrd >> 3);
  2687  0012CA  3801               	swapf	segWrt@segOrd,w,c
  2688  0012CC  46E8               	rlncf	wreg,f,c
  2689  0012CE  0B1F               	andlw	31
  2690  0012D0  6E03               	movwf	??_segWrt& (0+255),c
  2691  0012D2  6A04               	clrf	(??_segWrt+1)& (0+255),c
  2692  0012D4  0E60               	movlw	96	;volatile
  2693  0012D6  2403               	addwf	??_segWrt,w,c
  2694  0012D8  6E05               	movwf	segWrt@LCReg,c
  2695  0012DA  0E0F               	movlw	15	;volatile
  2696  0012DC  2004               	addwfc	??_segWrt+1,w,c
  2697  0012DE  6E06               	movwf	segWrt@LCReg+1,c
  2698                           
  2699                           ;main.c: 295: bitSelect = 1 << (segOrd & 0x07);
  2700  0012E0  C001  F003         	movff	segWrt@segOrd,??_segWrt
  2701  0012E4  0E07               	movlw	7
  2702  0012E6  1603               	andwf	??_segWrt,f,c
  2703  0012E8  0E01               	movlw	1
  2704  0012EA  6E04               	movwf	(??_segWrt+1)& (0+255),c
  2705  0012EC  2A03               	incf	??_segWrt,f,c
  2706  0012EE  D002               	goto	u914
  2707  0012F0                     u915:
  2708  0012F0  90D8               	bcf	status,0,c
  2709  0012F2  3604               	rlcf	??_segWrt+1,f,c
  2710  0012F4                     u914:
  2711  0012F4  2E03               	decfsz	??_segWrt,f,c
  2712  0012F6  D7FC               	goto	u915
  2713  0012F8  5004               	movf	??_segWrt+1,w,c
  2714  0012FA  6E07               	movwf	segWrt@bitSelect,c
  2715                           
  2716                           ;main.c: 297: if (state)
  2717  0012FC  5002               	movf	segWrt@state,w,c
  2718  0012FE  B4D8               	btfsc	status,2,c
  2719  001300  D007               	goto	l1974
  2720                           
  2721                           ;main.c: 298: *LCReg |= bitSelect;
  2722  001302  C005  FFD9         	movff	segWrt@LCReg,fsr2l
  2723  001306  C006  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2724  00130A  5007               	movf	segWrt@bitSelect,w,c
  2725  00130C  12DF               	iorwf	indf2,f,c
  2726  00130E  D009               	goto	l118
  2727  001310                     l1974:
  2728                           
  2729                           ;main.c: 299: else
  2730                           ;main.c: 300: *LCReg &= ~bitSelect;
  2731  001310  5007               	movf	segWrt@bitSelect,w,c
  2732  001312  0AFF               	xorlw	255
  2733  001314  6E03               	movwf	??_segWrt& (0+255),c
  2734  001316  C005  FFD9         	movff	segWrt@LCReg,fsr2l
  2735  00131A  C006  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2736  00131E  5003               	movf	??_segWrt,w,c
  2737  001320  16DF               	andwf	indf2,f,c
  2738  001322                     l118:
  2739  001322  0012               	return	
  2740  001324                     __end_of_segWrt:
  2741                           	opt stack 0
  2742                           tblptru	equ	0xFF8
  2743                           tblptrh	equ	0xFF7
  2744                           tblptrl	equ	0xFF6
  2745                           tablat	equ	0xFF5
  2746                           prodh	equ	0xFF4
  2747                           prodl	equ	0xFF3
  2748                           postinc0	equ	0xFEE
  2749                           wreg	equ	0xFE8
  2750                           postinc1	equ	0xFE6
  2751                           postdec1	equ	0xFE5
  2752                           fsr1l	equ	0xFE1
  2753                           indf2	equ	0xFDF
  2754                           postinc2	equ	0xFDE
  2755                           fsr2h	equ	0xFDA
  2756                           fsr2l	equ	0xFD9
  2757                           status	equ	0xFD8
  2758                           
  2759 ;; *************** function _nextChan *****************
  2760 ;; Defined at:
  2761 ;;		line 685 in file "main.c"
  2762 ;; Parameters:    Size  Location     Type
  2763 ;;  chan            2   26[COMRAM] unsigned int 
  2764 ;;  dir             1   28[COMRAM] unsigned char 
  2765 ;; Auto vars:     Size  Location     Type
  2766 ;;		None
  2767 ;; Return value:  Size  Location     Type
  2768 ;;                  2   26[COMRAM] unsigned int 
  2769 ;; Registers used:
  2770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2771 ;; Tracked objects:
  2772 ;;		On entry : 0/0
  2773 ;;		On exit  : 0/0
  2774 ;;		Unchanged: 0/0
  2775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2776 ;;      Params:         3       0       0       0
  2777 ;;      Locals:         0       0       0       0
  2778 ;;      Temps:          2       0       0       0
  2779 ;;      Totals:         5       0       0       0
  2780 ;;Total ram usage:        5 bytes
  2781 ;; Hardware stack levels used:    1
  2782 ;; Hardware stack levels required when called:    5
  2783 ;; This function calls:
  2784 ;;		_errfm
  2785 ;;		_FMfrequenc
  2786 ;; This function is called by:
  2787 ;;		_main
  2788 ;; This function uses a non-reentrant model
  2789 ;;
  2790                           
  2791                           	psect	text10
  2792  000DF8                     __ptext10:
  2793                           	opt stack 0
  2794  000DF8                     _nextChan:
  2795                           	opt stack 25
  2796                           
  2797                           ;main.c: 687: switch (dir)
  2798                           
  2799                           ;incstack = 0
  2800                           ;incstack = 0
  2801  000DF8  D06A               	goto	l2570
  2802  000DFA                     l2546:
  2803                           
  2804                           ;main.c: 690: if(chan < 5)
  2805  000DFA  0E05               	movlw	5
  2806  000DFC  5C1B               	subwf	nextChan@chan,w,c
  2807  000DFE  0E00               	movlw	0
  2808  000E00  581C               	subwfb	nextChan@chan+1,w,c
  2809  000E02  B0D8               	btfsc	status,0,c
  2810  000E04  D016               	goto	l2552
  2811                           
  2812                           ;main.c: 691: {
  2813                           ;main.c: 692: chan++;
  2814  000E06  4A1B               	infsnz	nextChan@chan,f,c
  2815  000E08  2A1C               	incf	nextChan@chan+1,f,c
  2816                           
  2817                           ;main.c: 693: FMfrequenc(station[chan]);
  2818  000E0A  90D8               	bcf	status,0,c
  2819  000E0C  341B               	rlcf	nextChan@chan,w,c
  2820  000E0E  6E1E               	movwf	??_nextChan& (0+255),c
  2821  000E10  341C               	rlcf	nextChan@chan+1,w,c
  2822  000E12  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2823  000E14  0E8B               	movlw	low _station
  2824  000E16  241E               	addwf	??_nextChan,w,c
  2825  000E18  6EF6               	movwf	tblptrl,c
  2826  000E1A  0E03               	movlw	high _station
  2827  000E1C  201F               	addwfc	??_nextChan+1,w,c
  2828  000E1E  6EF7               	movwf	tblptrh,c
  2829  000E20  0009               	tblrd		*+
  2830  000E22  CFF5 F013          	movff	tablat,?_FMfrequenc
  2831  000E26  000A               	tblrd		*-
  2832  000E28  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2833  000E2C  ECE2  F008         	call	_FMfrequenc	;wreg free
  2834                           
  2835                           ;main.c: 694: } else {
  2836  000E30  D056               	goto	l220
  2837  000E32                     l2552:
  2838                           
  2839                           ;main.c: 695: chan = 0;
  2840  000E32  0E00               	movlw	0
  2841  000E34  6E1C               	movwf	nextChan@chan+1,c
  2842  000E36  0E00               	movlw	0
  2843  000E38  6E1B               	movwf	nextChan@chan,c
  2844                           
  2845                           ;main.c: 696: FMfrequenc(station[chan]);
  2846  000E3A  90D8               	bcf	status,0,c
  2847  000E3C  341B               	rlcf	nextChan@chan,w,c
  2848  000E3E  6E1E               	movwf	??_nextChan& (0+255),c
  2849  000E40  341C               	rlcf	nextChan@chan+1,w,c
  2850  000E42  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2851  000E44  0E8B               	movlw	low _station
  2852  000E46  241E               	addwf	??_nextChan,w,c
  2853  000E48  6EF6               	movwf	tblptrl,c
  2854  000E4A  0E03               	movlw	high _station
  2855  000E4C  201F               	addwfc	??_nextChan+1,w,c
  2856  000E4E  6EF7               	movwf	tblptrh,c
  2857  000E50  0009               	tblrd		*+
  2858  000E52  CFF5 F013          	movff	tablat,?_FMfrequenc
  2859  000E56  000A               	tblrd		*-
  2860  000E58  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2861  000E5C  ECE2  F008         	call	_FMfrequenc	;wreg free
  2862  000E60  D03E               	goto	l220
  2863  000E62                     l2556:
  2864                           
  2865                           ;main.c: 702: if(chan > 0)
  2866  000E62  501C               	movf	nextChan@chan+1,w,c
  2867  000E64  101B               	iorwf	nextChan@chan,w,c
  2868  000E66  B4D8               	btfsc	status,2,c
  2869  000E68  D017               	goto	l2562
  2870                           
  2871                           ;main.c: 703: {
  2872                           ;main.c: 704: chan--;
  2873  000E6A  061B               	decf	nextChan@chan,f,c
  2874  000E6C  A0D8               	btfss	status,0,c
  2875  000E6E  061C               	decf	nextChan@chan+1,f,c
  2876                           
  2877                           ;main.c: 705: FMfrequenc(station[chan]);
  2878  000E70  90D8               	bcf	status,0,c
  2879  000E72  341B               	rlcf	nextChan@chan,w,c
  2880  000E74  6E1E               	movwf	??_nextChan& (0+255),c
  2881  000E76  341C               	rlcf	nextChan@chan+1,w,c
  2882  000E78  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2883  000E7A  0E8B               	movlw	low _station
  2884  000E7C  241E               	addwf	??_nextChan,w,c
  2885  000E7E  6EF6               	movwf	tblptrl,c
  2886  000E80  0E03               	movlw	high _station
  2887  000E82  201F               	addwfc	??_nextChan+1,w,c
  2888  000E84  6EF7               	movwf	tblptrh,c
  2889  000E86  0009               	tblrd		*+
  2890  000E88  CFF5 F013          	movff	tablat,?_FMfrequenc
  2891  000E8C  000A               	tblrd		*-
  2892  000E8E  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2893  000E92  ECE2  F008         	call	_FMfrequenc	;wreg free
  2894                           
  2895                           ;main.c: 706: } else {
  2896  000E96  D023               	goto	l220
  2897  000E98                     l2562:
  2898                           
  2899                           ;main.c: 707: chan = 5;
  2900  000E98  0E00               	movlw	0
  2901  000E9A  6E1C               	movwf	nextChan@chan+1,c
  2902  000E9C  0E05               	movlw	5
  2903  000E9E  6E1B               	movwf	nextChan@chan,c
  2904                           
  2905                           ;main.c: 708: FMfrequenc(station[chan]);
  2906  000EA0  90D8               	bcf	status,0,c
  2907  000EA2  341B               	rlcf	nextChan@chan,w,c
  2908  000EA4  6E1E               	movwf	??_nextChan& (0+255),c
  2909  000EA6  341C               	rlcf	nextChan@chan+1,w,c
  2910  000EA8  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2911  000EAA  0E8B               	movlw	low _station
  2912  000EAC  241E               	addwf	??_nextChan,w,c
  2913  000EAE  6EF6               	movwf	tblptrl,c
  2914  000EB0  0E03               	movlw	high _station
  2915  000EB2  201F               	addwfc	??_nextChan+1,w,c
  2916  000EB4  6EF7               	movwf	tblptrh,c
  2917  000EB6  0009               	tblrd		*+
  2918  000EB8  CFF5 F013          	movff	tablat,?_FMfrequenc
  2919  000EBC  000A               	tblrd		*-
  2920  000EBE  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2921  000EC2  ECE2  F008         	call	_FMfrequenc	;wreg free
  2922  000EC6  D00B               	goto	l220
  2923  000EC8                     l2566:
  2924                           
  2925                           ;main.c: 713: errfm();
  2926  000EC8  EC41  F00B         	call	_errfm	;wreg free
  2927                           
  2928                           ;main.c: 714: break;
  2929  000ECC  D008               	goto	l220
  2930  000ECE                     l2570:
  2931  000ECE  501D               	movf	nextChan@dir,w,c
  2932                           
  2933                           ; Switch size 1, requested type "space"
  2934                           ; Number of cases is 2, Range of values is 0 to 1
  2935                           ; switch strategies available:
  2936                           ; Name         Instructions Cycles
  2937                           ; simple_byte            7     4 (average)
  2938                           ;	Chosen strategy is simple_byte
  2939  000ED0  0A00               	xorlw	0	; case 0
  2940  000ED2  B4D8               	btfsc	status,2,c
  2941  000ED4  D7C6               	goto	l2556
  2942  000ED6  0A01               	xorlw	1	; case 1
  2943  000ED8  B4D8               	btfsc	status,2,c
  2944  000EDA  D78F               	goto	l2546
  2945  000EDC  D7F5               	goto	l2566
  2946  000EDE                     l220:
  2947                           
  2948                           ;main.c: 717: return chan;
  2949  000EDE  C01B  F01B         	movff	nextChan@chan,?_nextChan
  2950  000EE2  C01C  F01C         	movff	nextChan@chan+1,?_nextChan+1
  2951  000EE6  0012               	return	
  2952  000EE8                     __end_of_nextChan:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           prodh	equ	0xFF4
  2959                           prodl	equ	0xFF3
  2960                           postinc0	equ	0xFEE
  2961                           wreg	equ	0xFE8
  2962                           postinc1	equ	0xFE6
  2963                           postdec1	equ	0xFE5
  2964                           fsr1l	equ	0xFE1
  2965                           indf2	equ	0xFDF
  2966                           postinc2	equ	0xFDE
  2967                           fsr2h	equ	0xFDA
  2968                           fsr2l	equ	0xFD9
  2969                           status	equ	0xFD8
  2970                           
  2971 ;; *************** function _volSet *****************
  2972 ;; Defined at:
  2973 ;;		line 622 in file "main.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  vol             2    6[COMRAM] unsigned int 
  2976 ;;  dir             1    8[COMRAM] unsigned char 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;		None
  2979 ;; Return value:  Size  Location     Type
  2980 ;;                  2    6[COMRAM] unsigned int 
  2981 ;; Registers used:
  2982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2983 ;; Tracked objects:
  2984 ;;		On entry : 0/0
  2985 ;;		On exit  : 0/0
  2986 ;;		Unchanged: 0/0
  2987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2988 ;;      Params:         3       0       0       0
  2989 ;;      Locals:         0       0       0       0
  2990 ;;      Temps:          4       0       0       0
  2991 ;;      Totals:         7       0       0       0
  2992 ;;Total ram usage:        7 bytes
  2993 ;; Hardware stack levels used:    1
  2994 ;; Hardware stack levels required when called:    3
  2995 ;; This function calls:
  2996 ;;		_errfm
  2997 ;;		_FMwrite
  2998 ;; This function is called by:
  2999 ;;		_main
  3000 ;; This function uses a non-reentrant model
  3001 ;;
  3002                           
  3003                           	psect	text11
  3004  00091C                     __ptext11:
  3005                           	opt stack 0
  3006  00091C                     _volSet:
  3007                           	opt stack 27
  3008                           
  3009                           ;main.c: 626: switch (dir)
  3010                           
  3011                           ;incstack = 0
  3012                           ;incstack = 0
  3013  00091C  D0B4               	goto	l2378
  3014  00091E                     l2342:
  3015                           
  3016                           ;main.c: 629: if(vol < 18)
  3017  00091E  0E12               	movlw	18
  3018  000920  5C07               	subwf	volSet@vol,w,c
  3019  000922  0E00               	movlw	0
  3020  000924  5808               	subwfb	volSet@vol+1,w,c
  3021  000926  B0D8               	btfsc	status,0,c
  3022  000928  D0B6               	goto	l209
  3023                           
  3024                           ;main.c: 630: {
  3025                           ;main.c: 631: vol++;
  3026  00092A  4A07               	infsnz	volSet@vol,f,c
  3027  00092C  2A08               	incf	volSet@vol+1,f,c
  3028                           
  3029                           ;main.c: 634: regImg[3] &= 0xF87F;
  3030  00092E  0100               	movlb	0	; () banked
  3031  000930  0E7F               	movlw	127
  3032  000932  0100               	movlb	0	; () banked
  3033  000934  17C0               	andwf	(_regImg+6)& (0+255),f,b
  3034  000936  0EF8               	movlw	248
  3035  000938  0100               	movlb	0	; () banked
  3036  00093A  17C1               	andwf	(_regImg+7)& (0+255),f,b
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;main.c: 635: regImg[14] &= 0x0FFF;
  3040  00093C  0100               	movlb	0	; () banked
  3041  00093E  0EFF               	movlw	255
  3042  000940  0100               	movlb	0	; () banked
  3043  000942  17D6               	andwf	(_regImg+28)& (0+255),f,b
  3044  000944  0E0F               	movlw	15
  3045  000946  0100               	movlb	0	; () banked
  3046  000948  17D7               	andwf	(_regImg+29)& (0+255),f,b
  3047                           
  3048                           ; BSR set to: 0
  3049                           ;main.c: 638: regImg[3] |= volumePair[0][vol];
  3050  00094A  90D8               	bcf	status,0,c
  3051  00094C  3407               	rlcf	volSet@vol,w,c
  3052  00094E  6E0A               	movwf	??_volSet& (0+255),c
  3053  000950  3408               	rlcf	volSet@vol+1,w,c
  3054  000952  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3055  000954  0E00               	movlw	low _volumePair
  3056  000956  240A               	addwf	??_volSet,w,c
  3057  000958  6EF6               	movwf	tblptrl,c
  3058  00095A  0E03               	movlw	high _volumePair
  3059  00095C  200B               	addwfc	??_volSet+1,w,c
  3060  00095E  6EF7               	movwf	tblptrh,c
  3061  000960  0009               	tblrd		*+
  3062  000962  CFF5 F00C          	movff	tablat,??_volSet+2
  3063  000966  0009               	tblrd		*+
  3064  000968  CFF5 F00D          	movff	tablat,??_volSet+3
  3065  00096C  500C               	movf	??_volSet+2,w,c
  3066  00096E  0100               	movlb	0	; () banked
  3067  000970  0100               	movlb	0	; () banked
  3068  000972  13C0               	iorwf	(_regImg+6)& (0+255),f,b
  3069  000974  500D               	movf	??_volSet+3,w,c
  3070  000976  0100               	movlb	0	; () banked
  3071  000978  0100               	movlb	0	; () banked
  3072  00097A  13C1               	iorwf	(_regImg+7)& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;main.c: 639: regImg[14] |= volumePair[1][vol];
  3076  00097C  90D8               	bcf	status,0,c
  3077  00097E  3407               	rlcf	volSet@vol,w,c
  3078  000980  6E0A               	movwf	??_volSet& (0+255),c
  3079  000982  3408               	rlcf	volSet@vol+1,w,c
  3080  000984  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3081  000986  0E26               	movlw	38
  3082  000988  260A               	addwf	??_volSet,f,c
  3083  00098A  0E00               	movlw	0
  3084  00098C  220B               	addwfc	??_volSet+1,f,c
  3085  00098E  0E00               	movlw	low _volumePair
  3086  000990  240A               	addwf	??_volSet,w,c
  3087  000992  6EF6               	movwf	tblptrl,c
  3088  000994  0E03               	movlw	high _volumePair
  3089  000996  200B               	addwfc	??_volSet+1,w,c
  3090  000998  6EF7               	movwf	tblptrh,c
  3091  00099A  0009               	tblrd		*+
  3092  00099C  CFF5 F00C          	movff	tablat,??_volSet+2
  3093  0009A0  0009               	tblrd		*+
  3094  0009A2  CFF5 F00D          	movff	tablat,??_volSet+3
  3095  0009A6  500C               	movf	??_volSet+2,w,c
  3096  0009A8  0100               	movlb	0	; () banked
  3097  0009AA  0100               	movlb	0	; () banked
  3098  0009AC  13D6               	iorwf	(_regImg+28)& (0+255),f,b
  3099  0009AE  500D               	movf	??_volSet+3,w,c
  3100  0009B0  0100               	movlb	0	; () banked
  3101  0009B2  0100               	movlb	0	; () banked
  3102  0009B4  13D7               	iorwf	(_regImg+29)& (0+255),f,b
  3103                           
  3104                           ; BSR set to: 0
  3105                           ;main.c: 641: FMwrite(3);
  3106  0009B6  6E0A               	movwf	??_volSet& (0+255),c
  3107  0009B8  0E03               	movlw	3
  3108  0009BA  6E02               	movwf	?_FMwrite,c
  3109  0009BC  500A               	movf	??_volSet& (0+255),w,c
  3110  0009BE  EC52  F008         	call	_FMwrite	;wreg free
  3111                           
  3112                           ;main.c: 642: FMwrite(14);
  3113  0009C2  6E0A               	movwf	??_volSet& (0+255),c
  3114  0009C4  0E0E               	movlw	14
  3115  0009C6  6E02               	movwf	?_FMwrite,c
  3116  0009C8  500A               	movf	??_volSet& (0+255),w,c
  3117  0009CA  EC52  F008         	call	_FMwrite	;wreg free
  3118  0009CE  D063               	goto	l209
  3119  0009D0                     l2358:
  3120                           
  3121                           ;main.c: 647: if(vol > 0)
  3122  0009D0  5008               	movf	volSet@vol+1,w,c
  3123  0009D2  1007               	iorwf	volSet@vol,w,c
  3124  0009D4  B4D8               	btfsc	status,2,c
  3125  0009D6  D05F               	goto	l209
  3126                           
  3127                           ;main.c: 648: {
  3128                           ;main.c: 649: vol--;
  3129  0009D8  0607               	decf	volSet@vol,f,c
  3130  0009DA  A0D8               	btfss	status,0,c
  3131  0009DC  0608               	decf	volSet@vol+1,f,c
  3132                           
  3133                           ;main.c: 652: regImg[3] &= 0xF87F;
  3134  0009DE  0100               	movlb	0	; () banked
  3135  0009E0  0E7F               	movlw	127
  3136  0009E2  0100               	movlb	0	; () banked
  3137  0009E4  17C0               	andwf	(_regImg+6)& (0+255),f,b
  3138  0009E6  0EF8               	movlw	248
  3139  0009E8  0100               	movlb	0	; () banked
  3140  0009EA  17C1               	andwf	(_regImg+7)& (0+255),f,b
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;main.c: 653: regImg[14] &= 0x0FFF;
  3144  0009EC  0100               	movlb	0	; () banked
  3145  0009EE  0EFF               	movlw	255
  3146  0009F0  0100               	movlb	0	; () banked
  3147  0009F2  17D6               	andwf	(_regImg+28)& (0+255),f,b
  3148  0009F4  0E0F               	movlw	15
  3149  0009F6  0100               	movlb	0	; () banked
  3150  0009F8  17D7               	andwf	(_regImg+29)& (0+255),f,b
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;main.c: 655: regImg[3] |= volumePair[0][vol];
  3154  0009FA  90D8               	bcf	status,0,c
  3155  0009FC  3407               	rlcf	volSet@vol,w,c
  3156  0009FE  6E0A               	movwf	??_volSet& (0+255),c
  3157  000A00  3408               	rlcf	volSet@vol+1,w,c
  3158  000A02  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3159  000A04  0E00               	movlw	low _volumePair
  3160  000A06  240A               	addwf	??_volSet,w,c
  3161  000A08  6EF6               	movwf	tblptrl,c
  3162  000A0A  0E03               	movlw	high _volumePair
  3163  000A0C  200B               	addwfc	??_volSet+1,w,c
  3164  000A0E  6EF7               	movwf	tblptrh,c
  3165  000A10  0009               	tblrd		*+
  3166  000A12  CFF5 F00C          	movff	tablat,??_volSet+2
  3167  000A16  0009               	tblrd		*+
  3168  000A18  CFF5 F00D          	movff	tablat,??_volSet+3
  3169  000A1C  500C               	movf	??_volSet+2,w,c
  3170  000A1E  0100               	movlb	0	; () banked
  3171  000A20  0100               	movlb	0	; () banked
  3172  000A22  13C0               	iorwf	(_regImg+6)& (0+255),f,b
  3173  000A24  500D               	movf	??_volSet+3,w,c
  3174  000A26  0100               	movlb	0	; () banked
  3175  000A28  0100               	movlb	0	; () banked
  3176  000A2A  13C1               	iorwf	(_regImg+7)& (0+255),f,b
  3177                           
  3178                           ; BSR set to: 0
  3179                           ;main.c: 656: regImg[14] |= volumePair[1][vol];
  3180  000A2C  90D8               	bcf	status,0,c
  3181  000A2E  3407               	rlcf	volSet@vol,w,c
  3182  000A30  6E0A               	movwf	??_volSet& (0+255),c
  3183  000A32  3408               	rlcf	volSet@vol+1,w,c
  3184  000A34  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3185  000A36  0E26               	movlw	38
  3186  000A38  260A               	addwf	??_volSet,f,c
  3187  000A3A  0E00               	movlw	0
  3188  000A3C  220B               	addwfc	??_volSet+1,f,c
  3189  000A3E  0E00               	movlw	low _volumePair
  3190  000A40  240A               	addwf	??_volSet,w,c
  3191  000A42  6EF6               	movwf	tblptrl,c
  3192  000A44  0E03               	movlw	high _volumePair
  3193  000A46  200B               	addwfc	??_volSet+1,w,c
  3194  000A48  6EF7               	movwf	tblptrh,c
  3195  000A4A  0009               	tblrd		*+
  3196  000A4C  CFF5 F00C          	movff	tablat,??_volSet+2
  3197  000A50  0009               	tblrd		*+
  3198  000A52  CFF5 F00D          	movff	tablat,??_volSet+3
  3199  000A56  500C               	movf	??_volSet+2,w,c
  3200  000A58  0100               	movlb	0	; () banked
  3201  000A5A  0100               	movlb	0	; () banked
  3202  000A5C  13D6               	iorwf	(_regImg+28)& (0+255),f,b
  3203  000A5E  500D               	movf	??_volSet+3,w,c
  3204  000A60  0100               	movlb	0	; () banked
  3205  000A62  0100               	movlb	0	; () banked
  3206  000A64  13D7               	iorwf	(_regImg+29)& (0+255),f,b
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;main.c: 657: FMwrite(3);
  3210  000A66  6E0A               	movwf	??_volSet& (0+255),c
  3211  000A68  0E03               	movlw	3
  3212  000A6A  6E02               	movwf	?_FMwrite,c
  3213  000A6C  500A               	movf	??_volSet& (0+255),w,c
  3214  000A6E  EC52  F008         	call	_FMwrite	;wreg free
  3215                           
  3216                           ;main.c: 658: FMwrite(14);
  3217  000A72  6E0A               	movwf	??_volSet& (0+255),c
  3218  000A74  0E0E               	movlw	14
  3219  000A76  6E02               	movwf	?_FMwrite,c
  3220  000A78  500A               	movf	??_volSet& (0+255),w,c
  3221  000A7A  EC52  F008         	call	_FMwrite	;wreg free
  3222  000A7E  D00B               	goto	l209
  3223  000A80                     l2374:
  3224                           
  3225                           ;main.c: 664: errfm();
  3226  000A80  EC41  F00B         	call	_errfm	;wreg free
  3227                           
  3228                           ;main.c: 665: break;
  3229  000A84  D008               	goto	l209
  3230  000A86                     l2378:
  3231  000A86  5009               	movf	volSet@dir,w,c
  3232                           
  3233                           ; Switch size 1, requested type "space"
  3234                           ; Number of cases is 2, Range of values is 0 to 1
  3235                           ; switch strategies available:
  3236                           ; Name         Instructions Cycles
  3237                           ; simple_byte            7     4 (average)
  3238                           ;	Chosen strategy is simple_byte
  3239  000A88  0A00               	xorlw	0	; case 0
  3240  000A8A  B4D8               	btfsc	status,2,c
  3241  000A8C  D7A1               	goto	l2358
  3242  000A8E  0A01               	xorlw	1	; case 1
  3243  000A90  B4D8               	btfsc	status,2,c
  3244  000A92  D745               	goto	l2342
  3245  000A94  D7F5               	goto	l2374
  3246  000A96                     l209:
  3247                           
  3248                           ;main.c: 668: return vol;
  3249  000A96  C007  F007         	movff	volSet@vol,?_volSet
  3250  000A9A  C008  F008         	movff	volSet@vol+1,?_volSet+1
  3251  000A9E  0012               	return	
  3252  000AA0                     __end_of_volSet:
  3253                           	opt stack 0
  3254                           tblptru	equ	0xFF8
  3255                           tblptrh	equ	0xFF7
  3256                           tblptrl	equ	0xFF6
  3257                           tablat	equ	0xFF5
  3258                           prodh	equ	0xFF4
  3259                           prodl	equ	0xFF3
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postinc1	equ	0xFE6
  3263                           postdec1	equ	0xFE5
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           fsr2h	equ	0xFDA
  3268                           fsr2l	equ	0xFD9
  3269                           status	equ	0xFD8
  3270                           
  3271 ;; *************** function _FMvers *****************
  3272 ;; Defined at:
  3273 ;;		line 585 in file "main.c"
  3274 ;; Parameters:    Size  Location     Type
  3275 ;;  vsn             2   12[COMRAM] PTR unsigned int 
  3276 ;;		 -> main@ui(2), 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      unsigned char 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3288 ;;      Params:         2       0       0       0
  3289 ;;      Locals:         0       0       0       0
  3290 ;;      Temps:          1       0       0       0
  3291 ;;      Totals:         3       0       0       0
  3292 ;;Total ram usage:        3 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    3
  3295 ;; This function calls:
  3296 ;;		_FMread
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;; This function uses a non-reentrant model
  3300 ;;
  3301                           
  3302                           	psect	text12
  3303  00166C                     __ptext12:
  3304                           	opt stack 0
  3305  00166C                     _FMvers:
  3306                           	opt stack 27
  3307                           
  3308                           ;main.c: 586: if (FMread(0x1C, vsn) != 0) return 1;
  3309                           
  3310                           ;incstack = 0
  3311                           ;incstack = 0
  3312  00166C  6E0F               	movwf	??_FMvers& (0+255),c
  3313  00166E  0E1C               	movlw	28
  3314  001670  6E02               	movwf	?_FMread,c
  3315  001672  500F               	movf	??_FMvers& (0+255),w,c
  3316  001674  C00D  F003         	movff	FMvers@vsn,?_FMread+1
  3317  001678  C00E  F004         	movff	FMvers@vsn+1,?_FMread+2
  3318  00167C  ECE5  F007         	call	_FMread	;wreg free
  3319                           
  3320                           ;main.c: 587: return 0;
  3321                           ;	Return value of _FMvers is never used
  3322                           
  3323                           ;	Return value of _FMvers is never used
  3324  001680  0012               	return	
  3325  001682                     __end_of_FMvers:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           postinc0	equ	0xFEE
  3334                           wreg	equ	0xFE8
  3335                           postinc1	equ	0xFE6
  3336                           postdec1	equ	0xFE5
  3337                           fsr1l	equ	0xFE1
  3338                           indf2	equ	0xFDF
  3339                           postinc2	equ	0xFDE
  3340                           fsr2h	equ	0xFDA
  3341                           fsr2l	equ	0xFD9
  3342                           status	equ	0xFD8
  3343                           
  3344 ;; *************** function _FMinit *****************
  3345 ;; Defined at:
  3346 ;;		line 510 in file "main.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;		None
  3349 ;; Auto vars:     Size  Location     Type
  3350 ;;  dat             2   20[COMRAM] unsigned int 
  3351 ;;  ad              1   22[COMRAM] unsigned char 
  3352 ;; Return value:  Size  Location     Type
  3353 ;;                  1    wreg      unsigned char 
  3354 ;; Registers used:
  3355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 0/0
  3358 ;;		On exit  : 0/0
  3359 ;;		Unchanged: 0/0
  3360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3361 ;;      Params:         0       0       0       0
  3362 ;;      Locals:         3       0       0       0
  3363 ;;      Temps:          2       0       0       0
  3364 ;;      Totals:         5       0       0       0
  3365 ;;Total ram usage:        5 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    4
  3368 ;; This function calls:
  3369 ;;		_dly
  3370 ;;		_FMwrite
  3371 ;;		_FMready
  3372 ;; This function is called by:
  3373 ;;		_main
  3374 ;; This function uses a non-reentrant model
  3375 ;;
  3376                           
  3377                           	psect	text13
  3378  000EE8                     __ptext13:
  3379                           	opt stack 0
  3380  000EE8                     _FMinit:
  3381                           	opt stack 26
  3382                           
  3383                           ;main.c: 512: unsigned char ad;
  3384                           ;main.c: 513: unsigned int dat;
  3385                           ;main.c: 516: for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  3386                           
  3387                           ;incstack = 0
  3388                           ;incstack = 0
  3389  000EE8  6E13               	movwf	??_FMinit& (0+255),c
  3390  000EEA  0E00               	movlw	0
  3391  000EEC  6E17               	movwf	FMinit@ad,c
  3392  000EEE  5013               	movf	??_FMinit& (0+255),w,c
  3393  000EF0  D01D               	goto	L9
  3394  000EF2                     l2408:
  3395  000EF2  5017               	movf	FMinit@ad,w,c
  3396  000EF4  0D02               	mullw	2
  3397  000EF6  0E4C               	movlw	low _regDflt
  3398  000EF8  24F3               	addwf	prodl,w,c
  3399  000EFA  6EF6               	movwf	tblptrl,c
  3400  000EFC  0E03               	movlw	high _regDflt
  3401  000EFE  20F4               	addwfc	prodh,w,c
  3402  000F00  6EF7               	movwf	tblptrh,c
  3403  000F02  0009               	tblrd		*+
  3404  000F04  CFF5 F013          	movff	tablat,??_FMinit
  3405  000F08  0009               	tblrd		*+
  3406  000F0A  CFF5 F014          	movff	tablat,??_FMinit+1
  3407  000F0E  5017               	movf	FMinit@ad,w,c
  3408  000F10  0D02               	mullw	2
  3409  000F12  0100               	movlb	0	; () banked
  3410  000F14  0EBA               	movlw	low _regImg
  3411  000F16  24F3               	addwf	prodl,w,c
  3412  000F18  6ED9               	movwf	fsr2l,c
  3413  000F1A  0100               	movlb	0	; () banked
  3414  000F1C  0E00               	movlw	high _regImg
  3415  000F1E  20F4               	addwfc	prodh,w,c
  3416  000F20  6EDA               	movwf	fsr2h,c
  3417  000F22  C013  FFDE         	movff	??_FMinit,postinc2
  3418  000F26  C014  FFDD         	movff	??_FMinit+1,postdec2
  3419                           
  3420                           ; BSR set to: 0
  3421  000F2A  2A17               	incf	FMinit@ad,f,c
  3422  000F2C                     L9:
  3423                           
  3424                           ; BSR set to: 0
  3425  000F2C  0E11               	movlw	17
  3426  000F2E  6417               	cpfsgt	FMinit@ad,c
  3427  000F30  D7E0               	goto	l2408
  3428                           
  3429                           ;main.c: 518: dat = regImg[0];
  3430  000F32  C0BA  F015         	movff	_regImg,FMinit@dat
  3431  000F36  C0BB  F016         	movff	_regImg+1,FMinit@dat+1
  3432                           
  3433                           ;main.c: 519: regImg[0] &= ~1;
  3434  000F3A  0100               	movlb	0	; () banked
  3435  000F3C  0100               	movlb	0	; () banked
  3436  000F3E  91BA               	bcf	_regImg& (0+255),0,b
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;main.c: 520: if (FMwrite(0) != 0) return 1;
  3440  000F40  6E13               	movwf	??_FMinit& (0+255),c
  3441  000F42  0E00               	movlw	0
  3442  000F44  6E02               	movwf	?_FMwrite,c
  3443  000F46  5013               	movf	??_FMinit& (0+255),w,c
  3444  000F48  EC52  F008         	call	_FMwrite	;wreg free
  3445  000F4C  0900               	iorlw	0
  3446  000F4E  A4D8               	btfss	status,2,c
  3447  000F50  D021               	goto	u1470
  3448                           
  3449                           ;main.c: 521: for(ad = 1; ad < 18; ad++) {
  3450  000F52  6E13               	movwf	??_FMinit& (0+255),c
  3451  000F54  0E01               	movlw	1
  3452  000F56  6E17               	movwf	FMinit@ad,c
  3453  000F58  5013               	movf	??_FMinit& (0+255),w,c
  3454  000F5A  D008               	goto	L10
  3455  000F5C                     l2428:
  3456                           
  3457                           ;main.c: 522: if (FMwrite(ad) != 0)return 1;
  3458  000F5C  C017  F002         	movff	FMinit@ad,?_FMwrite
  3459  000F60  EC52  F008         	call	_FMwrite	;wreg free
  3460  000F64  0900               	iorlw	0
  3461  000F66  A4D8               	btfss	status,2,c
  3462  000F68  D015               	goto	u1470
  3463  000F6A  2A17               	incf	FMinit@ad,f,c
  3464  000F6C                     L10:
  3465  000F6C  0E11               	movlw	17
  3466  000F6E  6417               	cpfsgt	FMinit@ad,c
  3467  000F70  D7F5               	goto	l2428
  3468                           
  3469                           ;main.c: 523: }
  3470                           ;main.c: 525: regImg[0] = dat | 1;
  3471  000F72  0E01               	movlw	1
  3472  000F74  1015               	iorwf	FMinit@dat,w,c
  3473  000F76  0100               	movlb	0	; () banked
  3474  000F78  0100               	movlb	0	; () banked
  3475  000F7A  6FBA               	movwf	_regImg& (0+255),b
  3476  000F7C  5016               	movf	FMinit@dat+1,w,c
  3477  000F7E  0100               	movlb	0	; () banked
  3478  000F80  6FBB               	movwf	(_regImg+1)& (0+255),b
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;main.c: 526: if (FMwrite(0) != 0) return 1;
  3482  000F82  6E13               	movwf	??_FMinit& (0+255),c
  3483  000F84  0E00               	movlw	0
  3484  000F86  6E02               	movwf	?_FMwrite,c
  3485  000F88  5013               	movf	??_FMinit& (0+255),w,c
  3486  000F8A  EC52  F008         	call	_FMwrite	;wreg free
  3487  000F8E  0900               	iorlw	0
  3488  000F90  B4D8               	btfsc	status,2,c
  3489  000F92  D002               	goto	l2446
  3490  000F94                     u1470:
  3491  000F94  0E01               	movlw	1
  3492  000F96  D018               	goto	l180
  3493  000F98                     l2446:
  3494                           
  3495                           ;main.c: 527: dly(20);
  3496  000F98  0E00               	movlw	0
  3497  000F9A  6E02               	movwf	?_dly+1,c
  3498  000F9C  0E14               	movlw	20
  3499  000F9E  6E01               	movwf	?_dly,c
  3500  000FA0  ECCD  F00A         	call	_dly	;wreg free
  3501                           
  3502                           ;main.c: 528: while (FMready(&dat), !dat) dly(2);
  3503  000FA4  D006               	goto	l2450
  3504  000FA6                     l2448:
  3505  000FA6  0E00               	movlw	0
  3506  000FA8  6E02               	movwf	?_dly+1,c
  3507  000FAA  0E02               	movlw	2
  3508  000FAC  6E01               	movwf	?_dly,c
  3509  000FAE  ECCD  F00A         	call	_dly	;wreg free
  3510  000FB2                     l2450:
  3511  000FB2  0E00               	movlw	high FMinit@dat
  3512  000FB4  6E0E               	movwf	?_FMready+1,c
  3513  000FB6  0E15               	movlw	low FMinit@dat
  3514  000FB8  6E0D               	movwf	?_FMready,c
  3515  000FBA  EC43  F00A         	call	_FMready	;wreg free
  3516  000FBE  5016               	movf	FMinit@dat+1,w,c
  3517  000FC0  1015               	iorwf	FMinit@dat,w,c
  3518  000FC2  B4D8               	btfsc	status,2,c
  3519  000FC4  D7F0               	goto	l2448
  3520                           
  3521                           ;main.c: 529: return 0;
  3522  000FC6  0E00               	movlw	0
  3523  000FC8                     l180:
  3524  000FC8  0012               	return	
  3525  000FCA                     __end_of_FMinit:
  3526                           	opt stack 0
  3527                           tblptru	equ	0xFF8
  3528                           tblptrh	equ	0xFF7
  3529                           tblptrl	equ	0xFF6
  3530                           tablat	equ	0xFF5
  3531                           prodh	equ	0xFF4
  3532                           prodl	equ	0xFF3
  3533                           postinc0	equ	0xFEE
  3534                           wreg	equ	0xFE8
  3535                           postinc1	equ	0xFE6
  3536                           postdec1	equ	0xFE5
  3537                           fsr1l	equ	0xFE1
  3538                           indf2	equ	0xFDF
  3539                           postinc2	equ	0xFDE
  3540                           postdec2	equ	0xFDD
  3541                           fsr2h	equ	0xFDA
  3542                           fsr2l	equ	0xFD9
  3543                           status	equ	0xFD8
  3544                           
  3545 ;; *************** function _manualTune *****************
  3546 ;; Defined at:
  3547 ;;		line 343 in file "main.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;  freq            2   26[COMRAM] unsigned int 
  3550 ;;  dir             1   28[COMRAM] unsigned char 
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;		None
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  2   26[COMRAM] unsigned int 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3562 ;;      Params:         3       0       0       0
  3563 ;;      Locals:         0       0       0       0
  3564 ;;      Temps:          0       0       0       0
  3565 ;;      Totals:         3       0       0       0
  3566 ;;Total ram usage:        3 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    5
  3569 ;; This function calls:
  3570 ;;		_errfm
  3571 ;;		_FMfrequenc
  3572 ;; This function is called by:
  3573 ;;		_main
  3574 ;; This function uses a non-reentrant model
  3575 ;;
  3576                           
  3577                           	psect	text14
  3578  001138                     __ptext14:
  3579                           	opt stack 0
  3580  001138                     _manualTune:
  3581                           	opt stack 25
  3582                           
  3583                           ;main.c: 346: switch (dir)
  3584                           
  3585                           ;incstack = 0
  3586                           ;incstack = 0
  3587  001138  D038               	goto	l2542
  3588  00113A                     l2518:
  3589                           
  3590                           ;main.c: 349: if(freq < 1080)
  3591  00113A  0E38               	movlw	56
  3592  00113C  5C1B               	subwf	manualTune@freq,w,c
  3593  00113E  0E04               	movlw	4
  3594  001140  581C               	subwfb	manualTune@freq+1,w,c
  3595  001142  B0D8               	btfsc	status,0,c
  3596  001144  D009               	goto	l2524
  3597                           
  3598                           ;main.c: 350: {
  3599                           ;main.c: 351: freq++;
  3600  001146  4A1B               	infsnz	manualTune@freq,f,c
  3601  001148  2A1C               	incf	manualTune@freq+1,f,c
  3602                           
  3603                           ;main.c: 352: FMfrequenc(freq);
  3604  00114A  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3605  00114E  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3606  001152  ECE2  F008         	call	_FMfrequenc	;wreg free
  3607                           
  3608                           ;main.c: 353: } else {
  3609  001156  D031               	goto	l136
  3610  001158                     l2524:
  3611                           
  3612                           ;main.c: 354: freq = 875;
  3613  001158  0E03               	movlw	3
  3614  00115A  6E1C               	movwf	manualTune@freq+1,c
  3615  00115C  0E6B               	movlw	107
  3616  00115E  6E1B               	movwf	manualTune@freq,c
  3617                           
  3618                           ;main.c: 355: FMfrequenc(freq);
  3619  001160  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3620  001164  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3621  001168  ECE2  F008         	call	_FMfrequenc	;wreg free
  3622  00116C  D026               	goto	l136
  3623  00116E                     l2528:
  3624                           
  3625                           ;main.c: 361: if(freq > 875)
  3626  00116E  0E6C               	movlw	108
  3627  001170  5C1B               	subwf	manualTune@freq,w,c
  3628  001172  0E03               	movlw	3
  3629  001174  581C               	subwfb	manualTune@freq+1,w,c
  3630  001176  A0D8               	btfss	status,0,c
  3631  001178  D00A               	goto	l2534
  3632                           
  3633                           ;main.c: 362: {
  3634                           ;main.c: 363: freq--;
  3635  00117A  061B               	decf	manualTune@freq,f,c
  3636  00117C  A0D8               	btfss	status,0,c
  3637  00117E  061C               	decf	manualTune@freq+1,f,c
  3638                           
  3639                           ;main.c: 364: FMfrequenc(freq);
  3640  001180  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3641  001184  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3642  001188  ECE2  F008         	call	_FMfrequenc	;wreg free
  3643                           
  3644                           ;main.c: 365: } else {
  3645  00118C  D016               	goto	l136
  3646  00118E                     l2534:
  3647                           
  3648                           ;main.c: 366: freq = 1080;
  3649  00118E  0E04               	movlw	4
  3650  001190  6E1C               	movwf	manualTune@freq+1,c
  3651  001192  0E38               	movlw	56
  3652  001194  6E1B               	movwf	manualTune@freq,c
  3653                           
  3654                           ;main.c: 367: FMfrequenc(freq);
  3655  001196  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3656  00119A  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3657  00119E  ECE2  F008         	call	_FMfrequenc	;wreg free
  3658  0011A2  D00B               	goto	l136
  3659  0011A4                     l2538:
  3660                           
  3661                           ;main.c: 372: errfm();
  3662  0011A4  EC41  F00B         	call	_errfm	;wreg free
  3663                           
  3664                           ;main.c: 373: break;
  3665  0011A8  D008               	goto	l136
  3666  0011AA                     l2542:
  3667  0011AA  501D               	movf	manualTune@dir,w,c
  3668                           
  3669                           ; Switch size 1, requested type "space"
  3670                           ; Number of cases is 2, Range of values is 0 to 1
  3671                           ; switch strategies available:
  3672                           ; Name         Instructions Cycles
  3673                           ; simple_byte            7     4 (average)
  3674                           ;	Chosen strategy is simple_byte
  3675  0011AC  0A00               	xorlw	0	; case 0
  3676  0011AE  B4D8               	btfsc	status,2,c
  3677  0011B0  D7DE               	goto	l2528
  3678  0011B2  0A01               	xorlw	1	; case 1
  3679  0011B4  B4D8               	btfsc	status,2,c
  3680  0011B6  D7C1               	goto	l2518
  3681  0011B8  D7F5               	goto	l2538
  3682  0011BA                     l136:
  3683                           
  3684                           ;main.c: 376: return freq;
  3685  0011BA  C01B  F01B         	movff	manualTune@freq,?_manualTune
  3686  0011BE  C01C  F01C         	movff	manualTune@freq+1,?_manualTune+1
  3687  0011C2  0012               	return	
  3688  0011C4                     __end_of_manualTune:
  3689                           	opt stack 0
  3690                           tblptru	equ	0xFF8
  3691                           tblptrh	equ	0xFF7
  3692                           tblptrl	equ	0xFF6
  3693                           tablat	equ	0xFF5
  3694                           prodh	equ	0xFF4
  3695                           prodl	equ	0xFF3
  3696                           postinc0	equ	0xFEE
  3697                           wreg	equ	0xFE8
  3698                           postinc1	equ	0xFE6
  3699                           postdec1	equ	0xFE5
  3700                           fsr1l	equ	0xFE1
  3701                           indf2	equ	0xFDF
  3702                           postinc2	equ	0xFDE
  3703                           postdec2	equ	0xFDD
  3704                           fsr2h	equ	0xFDA
  3705                           fsr2l	equ	0xFD9
  3706                           status	equ	0xFD8
  3707                           
  3708 ;; *************** function _FMfrequenc *****************
  3709 ;; Defined at:
  3710 ;;		line 548 in file "main.c"
  3711 ;; Parameters:    Size  Location     Type
  3712 ;;  f               2   18[COMRAM] unsigned int 
  3713 ;; Auto vars:     Size  Location     Type
  3714 ;;  dat             2   24[COMRAM] unsigned int 
  3715 ;;  cn              2   22[COMRAM] unsigned int 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      unsigned char 
  3718 ;; Registers used:
  3719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3725 ;;      Params:         2       0       0       0
  3726 ;;      Locals:         4       0       0       0
  3727 ;;      Temps:          2       0       0       0
  3728 ;;      Totals:         8       0       0       0
  3729 ;;Total ram usage:        8 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    4
  3732 ;; This function calls:
  3733 ;;		_dly
  3734 ;;		_FMwrite
  3735 ;;		_FMready
  3736 ;; This function is called by:
  3737 ;;		_manualTune
  3738 ;;		_nextChan
  3739 ;;		_main
  3740 ;; This function uses a non-reentrant model
  3741 ;;
  3742                           
  3743                           	psect	text15
  3744  0011C4                     __ptext15:
  3745                           	opt stack 0
  3746  0011C4                     _FMfrequenc:
  3747                           	opt stack 25
  3748                           
  3749                           ;main.c: 550: unsigned int dat;
  3750                           ;main.c: 551: unsigned int cn;
  3751                           ;main.c: 553: cn = f - 690;
  3752                           
  3753                           ;incstack = 0
  3754                           ;incstack = 0
  3755  0011C4  0E4E               	movlw	78
  3756  0011C6  2413               	addwf	FMfrequenc@f,w,c
  3757  0011C8  6E17               	movwf	FMfrequenc@cn,c
  3758  0011CA  0EFD               	movlw	253
  3759  0011CC  2014               	addwfc	FMfrequenc@f+1,w,c
  3760  0011CE  6E18               	movwf	FMfrequenc@cn+1,c
  3761                           
  3762                           ;main.c: 556: regImg[2] &= ~0x0200;
  3763  0011D0  0100               	movlb	0	; () banked
  3764  0011D2  0100               	movlb	0	; () banked
  3765  0011D4  93BF               	bcf	(_regImg+5)& (0+255),1,b
  3766                           
  3767                           ; BSR set to: 0
  3768                           ;main.c: 557: if (FMwrite(2) != 0)
  3769  0011D6  6E15               	movwf	??_FMfrequenc& (0+255),c
  3770  0011D8  0E02               	movlw	2
  3771  0011DA  6E02               	movwf	?_FMwrite,c
  3772  0011DC  5015               	movf	??_FMfrequenc& (0+255),w,c
  3773  0011DE  EC52  F008         	call	_FMwrite	;wreg free
  3774  0011E2  0900               	iorlw	0
  3775  0011E4  A4D8               	btfss	status,2,c
  3776  0011E6  D030               	goto	l191
  3777                           
  3778                           ;main.c: 559: regImg[2] &= 0xfe00;
  3779                           
  3780                           ;main.c: 558: return 1;
  3781                           ;	Return value of _FMfrequenc is never used
  3782  0011E8  0100               	movlb	0	; () banked
  3783  0011EA  0E00               	movlw	0
  3784  0011EC  0100               	movlb	0	; () banked
  3785  0011EE  17BE               	andwf	(_regImg+4)& (0+255),f,b
  3786  0011F0  0EFE               	movlw	254
  3787  0011F2  0100               	movlb	0	; () banked
  3788  0011F4  17BF               	andwf	(_regImg+5)& (0+255),f,b
  3789                           
  3790                           ;main.c: 560: regImg[2] |= (cn | 0x0200);
  3791  0011F6  0E00               	movlw	0
  3792  0011F8  1017               	iorwf	FMfrequenc@cn,w,c
  3793  0011FA  6E15               	movwf	??_FMfrequenc& (0+255),c
  3794  0011FC  0E02               	movlw	2
  3795  0011FE  1018               	iorwf	FMfrequenc@cn+1,w,c
  3796  001200  6E16               	movwf	(??_FMfrequenc+1)& (0+255),c
  3797  001202  5015               	movf	??_FMfrequenc,w,c
  3798  001204  0100               	movlb	0	; () banked
  3799  001206  0100               	movlb	0	; () banked
  3800  001208  13BE               	iorwf	(_regImg+4)& (0+255),f,b
  3801  00120A  5016               	movf	??_FMfrequenc+1,w,c
  3802  00120C  0100               	movlb	0	; () banked
  3803  00120E  0100               	movlb	0	; () banked
  3804  001210  13BF               	iorwf	(_regImg+5)& (0+255),f,b
  3805                           
  3806                           ; BSR set to: 0
  3807                           ;main.c: 561: if (FMwrite(2) != 0)
  3808  001212  6E15               	movwf	??_FMfrequenc& (0+255),c
  3809  001214  0E02               	movlw	2
  3810  001216  6E02               	movwf	?_FMwrite,c
  3811  001218  5015               	movf	??_FMfrequenc& (0+255),w,c
  3812  00121A  EC52  F008         	call	_FMwrite	;wreg free
  3813  00121E  0900               	iorlw	0
  3814  001220  A4D8               	btfss	status,2,c
  3815  001222  D012               	goto	l191
  3816                           
  3817                           ;main.c: 564: dly(2);
  3818                           
  3819                           ;main.c: 563: do {
  3820                           
  3821                           ;main.c: 562: return 1;
  3822                           ;	Return value of _FMfrequenc is never used
  3823  001224  0E00               	movlw	0
  3824  001226  6E02               	movwf	?_dly+1,c
  3825  001228  0E02               	movlw	2
  3826  00122A  6E01               	movwf	?_dly,c
  3827  00122C  ECCD  F00A         	call	_dly	;wreg free
  3828                           
  3829                           ;main.c: 565: if (FMready(&dat) != 0)
  3830  001230  0E00               	movlw	high FMfrequenc@dat
  3831  001232  6E0E               	movwf	?_FMready+1,c
  3832  001234  0E19               	movlw	low FMfrequenc@dat
  3833  001236  6E0D               	movwf	?_FMready,c
  3834  001238  EC43  F00A         	call	_FMready	;wreg free
  3835  00123C  0900               	iorlw	0
  3836  00123E  A4D8               	btfss	status,2,c
  3837  001240  D003               	goto	l191
  3838                           
  3839                           ;main.c: 567: } while (!dat);
  3840                           
  3841                           ;main.c: 566: return 1;
  3842                           ;	Return value of _FMfrequenc is never used
  3843  001242  501A               	movf	FMfrequenc@dat+1,w,c
  3844  001244  1019               	iorwf	FMfrequenc@dat,w,c
  3845  001246  D7EC               	goto	L11
  3846  001248                     l191:
  3847  001248  0012               	return	
  3848  00124A                     __end_of_FMfrequenc:
  3849                           	opt stack 0
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodh	equ	0xFF4
  3855                           prodl	equ	0xFF3
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           postinc1	equ	0xFE6
  3859                           postdec1	equ	0xFE5
  3860                           fsr1l	equ	0xFE1
  3861                           indf2	equ	0xFDF
  3862                           postinc2	equ	0xFDE
  3863                           postdec2	equ	0xFDD
  3864                           fsr2h	equ	0xFDA
  3865                           fsr2l	equ	0xFD9
  3866                           status	equ	0xFD8
  3867                           
  3868 ;; *************** function _FMready *****************
  3869 ;; Defined at:
  3870 ;;		line 489 in file "main.c"
  3871 ;; Parameters:    Size  Location     Type
  3872 ;;  rdy             2   12[COMRAM] PTR unsigned int 
  3873 ;;		 -> setScan@dat(2), FMfrequenc@dat(2), FMinit@dat(2), 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  sts             2   16[COMRAM] unsigned int 
  3876 ;; Return value:  Size  Location     Type
  3877 ;;                  1    wreg      unsigned char 
  3878 ;; Registers used:
  3879 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3880 ;; Tracked objects:
  3881 ;;		On entry : 0/0
  3882 ;;		On exit  : 0/0
  3883 ;;		Unchanged: 0/0
  3884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3885 ;;      Params:         2       0       0       0
  3886 ;;      Locals:         2       0       0       0
  3887 ;;      Temps:          2       0       0       0
  3888 ;;      Totals:         6       0       0       0
  3889 ;;Total ram usage:        6 bytes
  3890 ;; Hardware stack levels used:    1
  3891 ;; Hardware stack levels required when called:    3
  3892 ;; This function calls:
  3893 ;;		_FMread
  3894 ;; This function is called by:
  3895 ;;		_FMinit
  3896 ;;		_FMfrequenc
  3897 ;;		_setScan
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           	psect	text16
  3902  001486                     __ptext16:
  3903                           	opt stack 0
  3904  001486                     _FMready:
  3905                           	opt stack 26
  3906                           
  3907                           ;main.c: 491: unsigned int sts;
  3908                           ;main.c: 493: if (FMread(0x13, &sts) != 0) return 1;
  3909                           
  3910                           ;incstack = 0
  3911                           ;incstack = 0
  3912  001486  6E0F               	movwf	??_FMready& (0+255),c
  3913  001488  0E13               	movlw	19
  3914  00148A  6E02               	movwf	?_FMread,c
  3915  00148C  500F               	movf	??_FMready& (0+255),w,c
  3916  00148E  0E00               	movlw	high FMready@sts
  3917  001490  6E04               	movwf	?_FMread+2,c
  3918  001492  0E11               	movlw	low FMready@sts
  3919  001494  6E03               	movwf	?_FMread+1,c
  3920  001496  ECE5  F007         	call	_FMread	;wreg free
  3921  00149A  0900               	iorlw	0
  3922  00149C  B4D8               	btfsc	status,2,c
  3923  00149E  D002               	goto	l2328
  3924  0014A0  0E01               	movlw	1
  3925  0014A2  D016               	goto	l174
  3926  0014A4                     l2328:
  3927                           
  3928                           ;main.c: 494: sts &= 0x0020;
  3929  0014A4  0E20               	movlw	32
  3930  0014A6  1611               	andwf	FMready@sts,f,c
  3931  0014A8  0E00               	movlw	0
  3932  0014AA  1612               	andwf	FMready@sts+1,f,c
  3933                           
  3934                           ;main.c: 495: *rdy = sts ? 1 : 0;
  3935  0014AC  5012               	movf	FMready@sts+1,w,c
  3936  0014AE  1011               	iorwf	FMready@sts,w,c
  3937  0014B0  B4D8               	btfsc	status,2,c
  3938  0014B2  D002               	goto	u1340
  3939  0014B4  0E01               	movlw	1
  3940  0014B6  D001               	goto	u1346
  3941  0014B8                     u1340:
  3942  0014B8  0E00               	movlw	0
  3943  0014BA                     u1346:
  3944  0014BA  6E0F               	movwf	??_FMready& (0+255),c
  3945  0014BC  6A10               	clrf	(??_FMready+1)& (0+255),c
  3946  0014BE  C00D  FFD9         	movff	FMready@rdy,fsr2l
  3947  0014C2  C00E  FFDA         	movff	FMready@rdy+1,fsr2h
  3948  0014C6  C00F  FFDE         	movff	??_FMready,postinc2
  3949  0014CA  C010  FFDD         	movff	??_FMready+1,postdec2
  3950                           
  3951                           ;main.c: 496: return 0;
  3952  0014CE  0E00               	movlw	0
  3953  0014D0                     l174:
  3954  0014D0  0012               	return	
  3955  0014D2                     __end_of_FMready:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postinc1	equ	0xFE6
  3966                           postdec1	equ	0xFE5
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _FMread *****************
  3976 ;; Defined at:
  3977 ;;		line 439 in file "main.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  regAddr         1    1[COMRAM] unsigned char 
  3980 ;;  data            2    2[COMRAM] PTR unsigned int 
  3981 ;;		 -> main@ui(2), setScan@chanRgstr(2), FMready@sts(2), 
  3982 ;; Auto vars:     Size  Location     Type
  3983 ;;  secndByt        1   11[COMRAM] unsigned char 
  3984 ;;  firstByt        1   10[COMRAM] unsigned char 
  3985 ;; Return value:  Size  Location     Type
  3986 ;;                  1    wreg      unsigned char 
  3987 ;; Registers used:
  3988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3989 ;; Tracked objects:
  3990 ;;		On entry : 0/0
  3991 ;;		On exit  : 0/0
  3992 ;;		Unchanged: 0/0
  3993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3994 ;;      Params:         3       0       0       0
  3995 ;;      Locals:         2       0       0       0
  3996 ;;      Temps:          6       0       0       0
  3997 ;;      Totals:        11       0       0       0
  3998 ;;Total ram usage:       11 bytes
  3999 ;; Hardware stack levels used:    1
  4000 ;; Hardware stack levels required when called:    2
  4001 ;; This function calls:
  4002 ;;		_IdleI2C
  4003 ;;		_WriteI2C
  4004 ;;		_ReadI2C
  4005 ;; This function is called by:
  4006 ;;		_FMready
  4007 ;;		_FMvers
  4008 ;;		_setScan
  4009 ;;		_FMid
  4010 ;; This function uses a non-reentrant model
  4011 ;;
  4012                           
  4013                           	psect	text17
  4014  000FCA                     __ptext17:
  4015                           	opt stack 0
  4016  000FCA                     _FMread:
  4017                           	opt stack 26
  4018                           
  4019                           ;main.c: 441: unsigned char firstByt;
  4020                           ;main.c: 442: unsigned char secndByt;
  4021                           ;main.c: 444: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4022                           
  4023                           ;incstack = 0
  4024                           ;incstack = 0
  4025  000FCA  80C5               	bsf	4037,0,c	;volatile
  4026  000FCC                     l154:
  4027  000FCC  B0C5               	btfsc	4037,0,c	;volatile
  4028  000FCE  D7FE               	goto	l154
  4029                           
  4030                           ;main.c: 445: IdleI2C();
  4031  000FD0  EC48  F00B         	call	_IdleI2C	;wreg free
  4032                           
  4033                           ;main.c: 448: if (WriteI2C(0x20)) return 1;
  4034  000FD4  6E05               	movwf	??_FMread& (0+255),c
  4035  000FD6  0E20               	movlw	32
  4036  000FD8  6E01               	movwf	?_WriteI2C,c
  4037  000FDA  5005               	movf	??_FMread& (0+255),w,c
  4038  000FDC  EC18  F00A         	call	_WriteI2C	;wreg free
  4039  000FE0  0900               	iorlw	0
  4040  000FE2  B4D8               	btfsc	status,2,c
  4041  000FE4  D002               	goto	l2214
  4042  000FE6  0E01               	movlw	1
  4043  000FE8  D05C               	goto	l158
  4044  000FEA                     l2214:
  4045                           
  4046                           ;main.c: 449: IdleI2C();
  4047  000FEA  EC48  F00B         	call	_IdleI2C	;wreg free
  4048                           
  4049                           ;main.c: 450: WriteI2C(regAddr);
  4050  000FEE  C002  F001         	movff	FMread@regAddr,?_WriteI2C
  4051  000FF2  EC18  F00A         	call	_WriteI2C	;wreg free
  4052                           
  4053                           ;main.c: 451: IdleI2C();
  4054  000FF6  EC48  F00B         	call	_IdleI2C	;wreg free
  4055                           
  4056                           ;main.c: 452: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  4057  000FFA  82C5               	bsf	4037,1,c	;volatile
  4058  000FFC                     l159:
  4059  000FFC  B2C5               	btfsc	4037,1,c	;volatile
  4060  000FFE  D7FE               	goto	l159
  4061                           
  4062                           ;main.c: 453: IdleI2C();
  4063  001000  EC48  F00B         	call	_IdleI2C	;wreg free
  4064                           
  4065                           ;main.c: 454: WriteI2C(0x20 + 0x01);
  4066  001004  6E05               	movwf	??_FMread& (0+255),c
  4067  001006  0E21               	movlw	33
  4068  001008  6E01               	movwf	?_WriteI2C,c
  4069  00100A  5005               	movf	??_FMread& (0+255),w,c
  4070  00100C  EC18  F00A         	call	_WriteI2C	;wreg free
  4071                           
  4072                           ;main.c: 455: IdleI2C();
  4073  001010  EC48  F00B         	call	_IdleI2C	;wreg free
  4074                           
  4075                           ;main.c: 456: firstByt = ReadI2C();
  4076  001014  EC1A  F00B         	call	_ReadI2C	;wreg free
  4077  001018  6E0B               	movwf	FMread@firstByt,c
  4078                           
  4079                           ;main.c: 457: IdleI2C();
  4080  00101A  EC48  F00B         	call	_IdleI2C	;wreg free
  4081                           
  4082                           ;main.c: 458: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4083  00101E  9AC5               	bcf	4037,5,c	;volatile
  4084  001020  88C5               	bsf	4037,4,c	;volatile
  4085  001022                     l162:
  4086  001022  B8C5               	btfsc	4037,4,c	;volatile
  4087  001024  D7FE               	goto	l162
  4088                           
  4089                           ;main.c: 459: IdleI2C();
  4090  001026  EC48  F00B         	call	_IdleI2C	;wreg free
  4091                           
  4092                           ;main.c: 460: secndByt = ReadI2C();
  4093  00102A  EC1A  F00B         	call	_ReadI2C	;wreg free
  4094  00102E  6E0C               	movwf	FMread@secndByt,c
  4095                           
  4096                           ;main.c: 461: IdleI2C();
  4097  001030  EC48  F00B         	call	_IdleI2C	;wreg free
  4098                           
  4099                           ;main.c: 462: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4100  001034  8AC5               	bsf	4037,5,c	;volatile
  4101  001036  88C5               	bsf	4037,4,c	;volatile
  4102  001038                     l165:
  4103  001038  B8C5               	btfsc	4037,4,c	;volatile
  4104  00103A  D7FE               	goto	l165
  4105                           
  4106                           ;main.c: 463: IdleI2C();
  4107  00103C  EC48  F00B         	call	_IdleI2C	;wreg free
  4108                           
  4109                           ;main.c: 464: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4110  001040  84C5               	bsf	4037,2,c	;volatile
  4111  001042                     l168:
  4112  001042  B4C5               	btfsc	4037,2,c	;volatile
  4113  001044  D7FE               	goto	l168
  4114                           
  4115                           ;main.c: 465: IdleI2C();
  4116  001046  EC48  F00B         	call	_IdleI2C	;wreg free
  4117                           
  4118                           ;main.c: 466: *data = firstByt;
  4119  00104A  500B               	movf	FMread@firstByt,w,c
  4120  00104C  6E05               	movwf	??_FMread& (0+255),c
  4121  00104E  6A06               	clrf	(??_FMread+1)& (0+255),c
  4122  001050  C003  FFD9         	movff	FMread@data,fsr2l
  4123  001054  C004  FFDA         	movff	FMread@data+1,fsr2h
  4124  001058  C005  FFDE         	movff	??_FMread,postinc2
  4125  00105C  C006  FFDD         	movff	??_FMread+1,postdec2
  4126                           
  4127                           ;main.c: 467: *data <<= 8;
  4128  001060  C003  FFD9         	movff	FMread@data,fsr2l
  4129  001064  C004  FFDA         	movff	FMread@data+1,fsr2h
  4130  001068  50DE               	movf	postinc2,w,c
  4131  00106A  6EDD               	movwf	postdec2,c
  4132  00106C  6ADF               	clrf	indf2,c
  4133                           
  4134                           ;main.c: 468: *data = *data | secndByt;
  4135  00106E  C003  FFD9         	movff	FMread@data,fsr2l
  4136  001072  C004  FFDA         	movff	FMread@data+1,fsr2h
  4137  001076  CFDE F005          	movff	postinc2,??_FMread
  4138  00107A  CFDD F006          	movff	postdec2,??_FMread+1
  4139  00107E  500C               	movf	FMread@secndByt,w,c
  4140  001080  6E07               	movwf	(??_FMread+2)& (0+255),c
  4141  001082  6A08               	clrf	(??_FMread+3)& (0+255),c
  4142  001084  5005               	movf	??_FMread,w,c
  4143  001086  1007               	iorwf	??_FMread+2,w,c
  4144  001088  6E09               	movwf	(??_FMread+4)& (0+255),c
  4145  00108A  5006               	movf	??_FMread+1,w,c
  4146  00108C  1008               	iorwf	??_FMread+3,w,c
  4147  00108E  6E0A               	movwf	(??_FMread+5)& (0+255),c
  4148  001090  C003  FFD9         	movff	FMread@data,fsr2l
  4149  001094  C004  FFDA         	movff	FMread@data+1,fsr2h
  4150  001098  C009  FFDE         	movff	??_FMread+4,postinc2
  4151  00109C  C00A  FFDD         	movff	??_FMread+5,postdec2
  4152                           
  4153                           ;main.c: 470: return 0;
  4154  0010A0  0E00               	movlw	0
  4155  0010A2                     l158:
  4156  0010A2  0012               	return	
  4157  0010A4                     __end_of_FMread:
  4158                           	opt stack 0
  4159                           tblptru	equ	0xFF8
  4160                           tblptrh	equ	0xFF7
  4161                           tblptrl	equ	0xFF6
  4162                           tablat	equ	0xFF5
  4163                           prodh	equ	0xFF4
  4164                           prodl	equ	0xFF3
  4165                           postinc0	equ	0xFEE
  4166                           wreg	equ	0xFE8
  4167                           postinc1	equ	0xFE6
  4168                           postdec1	equ	0xFE5
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _ReadI2C *****************
  4178 ;; Defined at:
  4179 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_read.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;                  1    wreg      unsigned char 
  4186 ;; Registers used:
  4187 ;;		wreg, status,2, status,0
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4193 ;;      Params:         0       0       0       0
  4194 ;;      Locals:         0       0       0       0
  4195 ;;      Temps:          0       0       0       0
  4196 ;;      Totals:         0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; This function calls:
  4200 ;;		Nothing
  4201 ;; This function is called by:
  4202 ;;		_FMread
  4203 ;; This function uses a non-reentrant model
  4204 ;;
  4205                           
  4206                           	psect	text18
  4207  001634                     __ptext18:
  4208                           	opt stack 0
  4209  001634                     _ReadI2C:
  4210                           	opt stack 27
  4211                           
  4212                           ;incstack = 0
  4213                           ;incstack = 0
  4214  001634  50C6               	movf	4038,w,c	;volatile
  4215  001636  0B0F               	andlw	15
  4216  001638  0A08               	xorlw	8
  4217  00163A  B4D8               	btfsc	status,2,c
  4218  00163C  D004               	goto	l336
  4219  00163E  50C6               	movf	4038,w,c	;volatile
  4220  001640  0B0F               	andlw	15
  4221  001642  0A0B               	xorlw	11
  4222  001644  B4D8               	btfsc	status,2,c
  4223  001646                     l336:
  4224  001646  86C5               	bsf	4037,3,c	;volatile
  4225  001648                     l337:
  4226  001648  A0C7               	btfss	4039,0,c	;volatile
  4227  00164A  D7FE               	goto	l337
  4228  00164C  50C9               	movf	4041,w,c	;volatile
  4229  00164E  0012               	return	
  4230  001650                     __end_of_ReadI2C:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           prodh	equ	0xFF4
  4237                           prodl	equ	0xFF3
  4238                           postinc0	equ	0xFEE
  4239                           wreg	equ	0xFE8
  4240                           postinc1	equ	0xFE6
  4241                           postdec1	equ	0xFE5
  4242                           fsr1l	equ	0xFE1
  4243                           indf2	equ	0xFDF
  4244                           postinc2	equ	0xFDE
  4245                           postdec2	equ	0xFDD
  4246                           fsr2h	equ	0xFDA
  4247                           fsr2l	equ	0xFD9
  4248                           status	equ	0xFD8
  4249                           
  4250 ;; *************** function _FMwrite *****************
  4251 ;; Defined at:
  4252 ;;		line 395 in file "main.c"
  4253 ;; Parameters:    Size  Location     Type
  4254 ;;  adr             1    1[COMRAM] unsigned char 
  4255 ;; Auto vars:     Size  Location     Type
  4256 ;;  regstr          2    0        unsigned int 
  4257 ;;  secndByt        1    5[COMRAM] unsigned char 
  4258 ;;  firstByt        1    4[COMRAM] unsigned char 
  4259 ;;  rpy             1    0        unsigned char 
  4260 ;; Return value:  Size  Location     Type
  4261 ;;                  1    wreg      unsigned char 
  4262 ;; Registers used:
  4263 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4264 ;; Tracked objects:
  4265 ;;		On entry : 0/0
  4266 ;;		On exit  : 0/0
  4267 ;;		Unchanged: 0/0
  4268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4269 ;;      Params:         1       0       0       0
  4270 ;;      Locals:         2       0       0       0
  4271 ;;      Temps:          2       0       0       0
  4272 ;;      Totals:         5       0       0       0
  4273 ;;Total ram usage:        5 bytes
  4274 ;; Hardware stack levels used:    1
  4275 ;; Hardware stack levels required when called:    2
  4276 ;; This function calls:
  4277 ;;		_IdleI2C
  4278 ;;		_WriteI2C
  4279 ;; This function is called by:
  4280 ;;		_FMinit
  4281 ;;		_FMfrequenc
  4282 ;;		_volSet
  4283 ;;		_setScan
  4284 ;; This function uses a non-reentrant model
  4285 ;;
  4286                           
  4287                           	psect	text19
  4288  0010A4                     __ptext19:
  4289                           	opt stack 0
  4290  0010A4                     _FMwrite:
  4291                           	opt stack 27
  4292                           
  4293                           ;main.c: 397: unsigned int regstr;
  4294                           ;main.c: 398: unsigned char firstByt;
  4295                           ;main.c: 399: unsigned char secndByt;
  4296                           ;main.c: 400: unsigned char rpy;
  4297                           ;main.c: 402: firstByt = regImg[adr] >> 8;
  4298                           
  4299                           ;incstack = 0
  4300                           ;incstack = 0
  4301  0010A4  5002               	movf	FMwrite@adr,w,c
  4302  0010A6  0D02               	mullw	2
  4303  0010A8  0100               	movlb	0	; () banked
  4304  0010AA  0EBA               	movlw	low _regImg
  4305  0010AC  24F3               	addwf	prodl,w,c
  4306  0010AE  6ED9               	movwf	fsr2l,c
  4307  0010B0  0100               	movlb	0	; () banked
  4308  0010B2  0E00               	movlw	high _regImg
  4309  0010B4  20F4               	addwfc	prodh,w,c
  4310  0010B6  6EDA               	movwf	fsr2h,c
  4311  0010B8  CFDE F003          	movff	postinc2,??_FMwrite
  4312  0010BC  CFDD F004          	movff	postdec2,??_FMwrite+1
  4313  0010C0  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  4314  0010C4  6A04               	clrf	??_FMwrite+1,c
  4315  0010C6  5003               	movf	??_FMwrite,w,c
  4316  0010C8  6E05               	movwf	FMwrite@firstByt,c
  4317                           
  4318                           ;main.c: 403: secndByt = regImg[adr];
  4319  0010CA  5002               	movf	FMwrite@adr,w,c
  4320  0010CC  0D02               	mullw	2
  4321  0010CE  0100               	movlb	0	; () banked
  4322  0010D0  0EBA               	movlw	low _regImg
  4323  0010D2  24F3               	addwf	prodl,w,c
  4324  0010D4  6ED9               	movwf	fsr2l,c
  4325  0010D6  0100               	movlb	0	; () banked
  4326  0010D8  0E00               	movlw	high _regImg
  4327  0010DA  20F4               	addwfc	prodh,w,c
  4328  0010DC  6EDA               	movwf	fsr2h,c
  4329  0010DE  50DF               	movf	indf2,w,c
  4330  0010E0  6E06               	movwf	FMwrite@secndByt,c
  4331                           
  4332                           ; BSR set to: 0
  4333                           ;main.c: 405: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4334  0010E2  80C5               	bsf	4037,0,c	;volatile
  4335  0010E4                     l144:
  4336  0010E4  B0C5               	btfsc	4037,0,c	;volatile
  4337  0010E6  D7FE               	goto	l144
  4338                           
  4339                           ;main.c: 406: IdleI2C();
  4340  0010E8  EC48  F00B         	call	_IdleI2C	;wreg free
  4341                           
  4342                           ;main.c: 409: if (WriteI2C(0x20)) return 1;
  4343  0010EC  6E03               	movwf	??_FMwrite& (0+255),c
  4344  0010EE  0E20               	movlw	32
  4345  0010F0  6E01               	movwf	?_WriteI2C,c
  4346  0010F2  5003               	movf	??_FMwrite& (0+255),w,c
  4347  0010F4  EC18  F00A         	call	_WriteI2C	;wreg free
  4348  0010F8  0900               	iorlw	0
  4349  0010FA  B4D8               	btfsc	status,2,c
  4350  0010FC  D002               	goto	l2196
  4351  0010FE  0E01               	movlw	1
  4352  001100  D01A               	goto	l148
  4353  001102                     l2196:
  4354                           
  4355                           ;main.c: 410: IdleI2C();
  4356  001102  EC48  F00B         	call	_IdleI2C	;wreg free
  4357                           
  4358                           ;main.c: 411: WriteI2C(adr);
  4359  001106  C002  F001         	movff	FMwrite@adr,?_WriteI2C
  4360  00110A  EC18  F00A         	call	_WriteI2C	;wreg free
  4361                           
  4362                           ;main.c: 412: IdleI2C();
  4363  00110E  EC48  F00B         	call	_IdleI2C	;wreg free
  4364                           
  4365                           ;main.c: 413: WriteI2C(firstByt);
  4366  001112  C005  F001         	movff	FMwrite@firstByt,?_WriteI2C
  4367  001116  EC18  F00A         	call	_WriteI2C	;wreg free
  4368                           
  4369                           ;main.c: 414: IdleI2C();
  4370  00111A  EC48  F00B         	call	_IdleI2C	;wreg free
  4371                           
  4372                           ;main.c: 415: WriteI2C(secndByt);
  4373  00111E  C006  F001         	movff	FMwrite@secndByt,?_WriteI2C
  4374  001122  EC18  F00A         	call	_WriteI2C	;wreg free
  4375                           
  4376                           ;main.c: 416: IdleI2C();
  4377  001126  EC48  F00B         	call	_IdleI2C	;wreg free
  4378                           
  4379                           ;main.c: 417: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4380  00112A  84C5               	bsf	4037,2,c	;volatile
  4381  00112C                     l149:
  4382  00112C  B4C5               	btfsc	4037,2,c	;volatile
  4383  00112E  D7FE               	goto	l149
  4384                           
  4385                           ;main.c: 418: IdleI2C();
  4386  001130  EC48  F00B         	call	_IdleI2C	;wreg free
  4387                           
  4388                           ;main.c: 419: return 0;
  4389  001134  0E00               	movlw	0
  4390  001136                     l148:
  4391  001136  0012               	return	
  4392  001138                     __end_of_FMwrite:
  4393                           	opt stack 0
  4394                           tblptru	equ	0xFF8
  4395                           tblptrh	equ	0xFF7
  4396                           tblptrl	equ	0xFF6
  4397                           tablat	equ	0xFF5
  4398                           prodh	equ	0xFF4
  4399                           prodl	equ	0xFF3
  4400                           postinc0	equ	0xFEE
  4401                           wreg	equ	0xFE8
  4402                           postinc1	equ	0xFE6
  4403                           postdec1	equ	0xFE5
  4404                           fsr1l	equ	0xFE1
  4405                           indf2	equ	0xFDF
  4406                           postinc2	equ	0xFDE
  4407                           postdec2	equ	0xFDD
  4408                           fsr2h	equ	0xFDA
  4409                           fsr2l	equ	0xFD9
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _WriteI2C *****************
  4413 ;; Defined at:
  4414 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_writ.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;  data_out        1    0[COMRAM] unsigned char 
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;                  1    wreg      char 
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, status,0, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4428 ;;      Params:         1       0       0       0
  4429 ;;      Locals:         0       0       0       0
  4430 ;;      Temps:          0       0       0       0
  4431 ;;      Totals:         1       0       0       0
  4432 ;;Total ram usage:        1 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    1
  4435 ;; This function calls:
  4436 ;;		_IdleI2C
  4437 ;; This function is called by:
  4438 ;;		_FMwrite
  4439 ;;		_FMread
  4440 ;; This function uses a non-reentrant model
  4441 ;;
  4442                           
  4443                           	psect	text20
  4444  001430                     __ptext20:
  4445                           	opt stack 0
  4446  001430                     _WriteI2C:
  4447                           	opt stack 26
  4448                           
  4449                           ;incstack = 0
  4450                           ;incstack = 0
  4451  001430  C001  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  4452  001434  AEC6               	btfss	4038,7,c	;volatile
  4453  001436  D002               	goto	l2144
  4454  001438  0EFF               	movlw	255
  4455  00143A  D024               	goto	l358
  4456  00143C                     l2144:
  4457  00143C  50C6               	movf	4038,w,c	;volatile
  4458  00143E  0B0F               	andlw	15
  4459  001440  0A08               	xorlw	8
  4460  001442  B4D8               	btfsc	status,2,c
  4461  001444  D00C               	goto	l2162
  4462  001446  50C6               	movf	4038,w,c	;volatile
  4463  001448  0B0F               	andlw	15
  4464  00144A  0A0B               	xorlw	11
  4465  00144C  B4D8               	btfsc	status,2,c
  4466  00144E  D007               	goto	l2162
  4467  001450  88C6               	bsf	4038,4,c	;volatile
  4468  001452                     l361:
  4469  001452  A69E               	btfss	3998,3,c	;volatile
  4470  001454  D7FE               	goto	l361
  4471  001456  A4C7               	btfss	4039,2,c	;volatile
  4472  001458  B0C7               	btfsc	4039,0,c	;volatile
  4473  00145A  D013               	goto	l2176
  4474  00145C  D010               	goto	u1170
  4475  00145E                     l2162:
  4476  00145E  50C6               	movf	4038,w,c	;volatile
  4477  001460  0B0F               	andlw	15
  4478  001462  0A08               	xorlw	8
  4479  001464  B4D8               	btfsc	status,2,c
  4480  001466  D005               	goto	l370
  4481  001468  50C6               	movf	4038,w,c	;volatile
  4482  00146A  0B0F               	andlw	15
  4483  00146C  0A0B               	xorlw	11
  4484  00146E  A4D8               	btfss	status,2,c
  4485  001470  D009               	goto	l358
  4486  001472                     l370:
  4487  001472  B0C7               	btfsc	4039,0,c	;volatile
  4488  001474  D7FE               	goto	l370
  4489  001476  EC48  F00B         	call	_IdleI2C	;wreg free
  4490  00147A  ACC5               	btfss	4037,6,c	;volatile
  4491  00147C  D002               	goto	l2176
  4492  00147E                     u1170:
  4493  00147E  0EFE               	movlw	254
  4494  001480  D001               	goto	l358
  4495  001482                     l2176:
  4496  001482  0E00               	movlw	0
  4497  001484                     l358:
  4498  001484  0012               	return	
  4499  001486                     __end_of_WriteI2C:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           postinc0	equ	0xFEE
  4508                           wreg	equ	0xFE8
  4509                           postinc1	equ	0xFE6
  4510                           postdec1	equ	0xFE5
  4511                           fsr1l	equ	0xFE1
  4512                           indf2	equ	0xFDF
  4513                           postinc2	equ	0xFDE
  4514                           postdec2	equ	0xFDD
  4515                           fsr2h	equ	0xFDA
  4516                           fsr2l	equ	0xFD9
  4517                           status	equ	0xFD8
  4518                           
  4519 ;; *************** function _IdleI2C *****************
  4520 ;; Defined at:
  4521 ;;		line 25 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_idle.c"
  4522 ;; Parameters:    Size  Location     Type
  4523 ;;		None
  4524 ;; Auto vars:     Size  Location     Type
  4525 ;;		None
  4526 ;; Return value:  Size  Location     Type
  4527 ;;		None               void
  4528 ;; Registers used:
  4529 ;;		wreg, status,2, status,0
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4535 ;;      Params:         0       0       0       0
  4536 ;;      Locals:         0       0       0       0
  4537 ;;      Temps:          0       0       0       0
  4538 ;;      Totals:         0       0       0       0
  4539 ;;Total ram usage:        0 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_FMwrite
  4545 ;;		_FMread
  4546 ;;		_WriteI2C
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text21
  4551  001690                     __ptext21:
  4552                           	opt stack 0
  4553  001690                     _IdleI2C:
  4554                           	opt stack 26
  4555  001690                     l1980:
  4556  001690  50C5               	movf	4037,w,c	;volatile
  4557  001692  0B1F               	andlw	31
  4558  001694  B4D8               	btfsc	status,2,c
  4559  001696  B4C7               	btfsc	4039,2,c	;volatile
  4560  001698  D7FB               	goto	l1980
  4561  00169A  0012               	return	
  4562  00169C                     __end_of_IdleI2C:
  4563                           	opt stack 0
  4564                           tblptru	equ	0xFF8
  4565                           tblptrh	equ	0xFF7
  4566                           tblptrl	equ	0xFF6
  4567                           tablat	equ	0xFF5
  4568                           prodh	equ	0xFF4
  4569                           prodl	equ	0xFF3
  4570                           postinc0	equ	0xFEE
  4571                           wreg	equ	0xFE8
  4572                           postinc1	equ	0xFE6
  4573                           postdec1	equ	0xFE5
  4574                           fsr1l	equ	0xFE1
  4575                           indf2	equ	0xFDF
  4576                           postinc2	equ	0xFDE
  4577                           postdec2	equ	0xFDD
  4578                           fsr2h	equ	0xFDA
  4579                           fsr2l	equ	0xFD9
  4580                           status	equ	0xFD8
  4581                           
  4582 ;; *************** function _dly *****************
  4583 ;; Defined at:
  4584 ;;		line 187 in file "main.c"
  4585 ;; Parameters:    Size  Location     Type
  4586 ;;  d               2    0[COMRAM] int 
  4587 ;; Auto vars:     Size  Location     Type
  4588 ;;  i               2    2[COMRAM] int 
  4589 ;; Return value:  Size  Location     Type
  4590 ;;		None               void
  4591 ;; Registers used:
  4592 ;;		wreg, status,2, status,0
  4593 ;; Tracked objects:
  4594 ;;		On entry : 0/0
  4595 ;;		On exit  : 0/0
  4596 ;;		Unchanged: 0/0
  4597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4598 ;;      Params:         2       0       0       0
  4599 ;;      Locals:         2       0       0       0
  4600 ;;      Temps:          0       0       0       0
  4601 ;;      Totals:         4       0       0       0
  4602 ;;Total ram usage:        4 bytes
  4603 ;; Hardware stack levels used:    1
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_FMinit
  4608 ;;		_FMfrequenc
  4609 ;;		_setScan
  4610 ;;		_main
  4611 ;; This function uses a non-reentrant model
  4612 ;;
  4613                           
  4614                           	psect	text22
  4615  00159A                     __ptext22:
  4616                           	opt stack 0
  4617  00159A                     _dly:
  4618                           	opt stack 29
  4619                           
  4620                           ;main.c: 189: int i = 0;
  4621                           
  4622                           ;incstack = 0
  4623                           ;incstack = 0
  4624  00159A  0E00               	movlw	0
  4625  00159C  6E04               	movwf	dly@i+1,c
  4626  00159E  0E00               	movlw	0
  4627  0015A0  6E03               	movwf	dly@i,c
  4628                           
  4629                           ;main.c: 191: for ( ; d; --d)
  4630  0015A2  D00F               	goto	l1932
  4631  0015A4                     l1924:
  4632                           
  4633                           ;main.c: 192: for (i = 100; i; --i) ;
  4634  0015A4  0E00               	movlw	0
  4635  0015A6  6E04               	movwf	dly@i+1,c
  4636  0015A8  0E64               	movlw	100
  4637  0015AA  6E03               	movwf	dly@i,c
  4638  0015AC  D003               	goto	l1928
  4639  0015AE                     l1926:
  4640  0015AE  0603               	decf	dly@i,f,c
  4641  0015B0  A0D8               	btfss	status,0,c
  4642  0015B2  0604               	decf	dly@i+1,f,c
  4643  0015B4                     l1928:
  4644  0015B4  5004               	movf	dly@i+1,w,c
  4645  0015B6  1003               	iorwf	dly@i,w,c
  4646  0015B8  A4D8               	btfss	status,2,c
  4647  0015BA  D7F9               	goto	l1926
  4648  0015BC  0601               	decf	dly@d,f,c
  4649  0015BE  A0D8               	btfss	status,0,c
  4650  0015C0  0602               	decf	dly@d+1,f,c
  4651  0015C2                     l1932:
  4652  0015C2  5002               	movf	dly@d+1,w,c
  4653  0015C4  1001               	iorwf	dly@d,w,c
  4654  0015C6  B4D8               	btfsc	status,2,c
  4655  0015C8  0012               	return	
  4656  0015CA  D7EC               	goto	l1924
  4657  0015CC                     __end_of_dly:
  4658                           	opt stack 0
  4659                           tblptru	equ	0xFF8
  4660                           tblptrh	equ	0xFF7
  4661                           tblptrl	equ	0xFF6
  4662                           tablat	equ	0xFF5
  4663                           prodh	equ	0xFF4
  4664                           prodl	equ	0xFF3
  4665                           postinc0	equ	0xFEE
  4666                           wreg	equ	0xFE8
  4667                           postinc1	equ	0xFE6
  4668                           postdec1	equ	0xFE5
  4669                           fsr1l	equ	0xFE1
  4670                           indf2	equ	0xFDF
  4671                           postinc2	equ	0xFDE
  4672                           postdec2	equ	0xFDD
  4673                           fsr2h	equ	0xFDA
  4674                           fsr2l	equ	0xFD9
  4675                           status	equ	0xFD8
  4676                           
  4677 ;; *************** function _errfm *****************
  4678 ;; Defined at:
  4679 ;;		line 734 in file "main.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;		None
  4682 ;; Auto vars:     Size  Location     Type
  4683 ;;		None
  4684 ;; Return value:  Size  Location     Type
  4685 ;;		None               void
  4686 ;; Registers used:
  4687 ;;		wreg, status,2
  4688 ;; Tracked objects:
  4689 ;;		On entry : 0/0
  4690 ;;		On exit  : 0/0
  4691 ;;		Unchanged: 0/0
  4692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4693 ;;      Params:         0       0       0       0
  4694 ;;      Locals:         0       0       0       0
  4695 ;;      Temps:          0       0       0       0
  4696 ;;      Totals:         0       0       0       0
  4697 ;;Total ram usage:        0 bytes
  4698 ;; Hardware stack levels used:    1
  4699 ;; This function calls:
  4700 ;;		Nothing
  4701 ;; This function is called by:
  4702 ;;		_charWrt
  4703 ;;		_manualTune
  4704 ;;		_volSet
  4705 ;;		_nextChan
  4706 ;;		_setScan
  4707 ;;		_main
  4708 ;; This function uses a non-reentrant model
  4709 ;;
  4710                           
  4711                           	psect	text23
  4712  001682                     __ptext23:
  4713                           	opt stack 0
  4714  001682                     _errfm:
  4715                           	opt stack 29
  4716                           
  4717                           ;main.c: 736: LCDDATA2 = 0b01111001;
  4718                           
  4719                           ;incstack = 0
  4720                           ;incstack = 0
  4721  001682  0E79               	movlw	121
  4722  001684  6E62               	movwf	3938,c	;volatile
  4723                           
  4724                           ;main.c: 737: LCDDATA1 = 0b00110001;
  4725  001686  0E31               	movlw	49
  4726  001688  6E61               	movwf	3937,c	;volatile
  4727                           
  4728                           ;main.c: 738: LCDDATA0 = 0b00110001;
  4729  00168A  0E31               	movlw	49
  4730  00168C  6E60               	movwf	3936,c	;volatile
  4731  00168E                     l228:
  4732  00168E  D7FF               	goto	l228
  4733  001690                     __end_of_errfm:
  4734                           	opt stack 0
  4735                           tblptru	equ	0xFF8
  4736                           tblptrh	equ	0xFF7
  4737                           tblptrl	equ	0xFF6
  4738                           tablat	equ	0xFF5
  4739                           prodh	equ	0xFF4
  4740                           prodl	equ	0xFF3
  4741                           postinc0	equ	0xFEE
  4742                           wreg	equ	0xFE8
  4743                           postinc1	equ	0xFE6
  4744                           postdec1	equ	0xFE5
  4745                           fsr1l	equ	0xFE1
  4746                           indf2	equ	0xFDF
  4747                           postinc2	equ	0xFDE
  4748                           postdec2	equ	0xFDD
  4749                           fsr2h	equ	0xFDA
  4750                           fsr2l	equ	0xFD9
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _Init *****************
  4754 ;; Defined at:
  4755 ;;		line 244 in file "main.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;		None
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  i               2    0        int 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;		None               void
  4762 ;; Registers used:
  4763 ;;		wreg, status,2, status,0, cstack
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4769 ;;      Params:         0       0       0       0
  4770 ;;      Locals:         0       0       0       0
  4771 ;;      Temps:          2       0       0       0
  4772 ;;      Totals:         2       0       0       0
  4773 ;;Total ram usage:        2 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:    1
  4776 ;; This function calls:
  4777 ;;		_OpenI2C
  4778 ;; This function is called by:
  4779 ;;		_main
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text24
  4784  00124A                     __ptext24:
  4785                           	opt stack 0
  4786  00124A                     _Init:
  4787                           	opt stack 29
  4788                           
  4789                           ;main.c: 246: int i;
  4790                           ;main.c: 248: OSCCON = 0b01110010;
  4791                           
  4792                           ;incstack = 0
  4793                           ;incstack = 0
  4794  00124A  0E72               	movlw	114
  4795  00124C  6ED3               	movwf	4051,c	;volatile
  4796                           
  4797                           ;main.c: 249: LCDSE0 = 0b11111111;
  4798  00124E  010F               	movlb	15	; () banked
  4799  001250  010F               	movlb	15	; () banked
  4800  001252  695A               	setf	90,b	;volatile
  4801                           
  4802                           ; BSR set to: 15
  4803                           ;main.c: 250: LCDSE1 = 0b11111111;
  4804  001254  010F               	movlb	15	; () banked
  4805  001256  010F               	movlb	15	; () banked
  4806  001258  695B               	setf	91,b	;volatile
  4807                           
  4808                           ; BSR set to: 15
  4809                           ;main.c: 251: LCDSE2 = 0b11111111;
  4810  00125A  010F               	movlb	15	; () banked
  4811  00125C  010F               	movlb	15	; () banked
  4812  00125E  695C               	setf	92,b	;volatile
  4813                           
  4814                           ;main.c: 252: LCDSE3 = 0b00000111;
  4815  001260  0E07               	movlw	7
  4816  001262  010F               	movlb	15	; () banked
  4817  001264  010F               	movlb	15	; () banked
  4818  001266  6F5D               	movwf	93,b	;volatile
  4819                           
  4820                           ;main.c: 253: LCDCON = 0b10001000;
  4821  001268  0E88               	movlw	136
  4822  00126A  010F               	movlb	15	; () banked
  4823  00126C  010F               	movlb	15	; () banked
  4824  00126E  6F59               	movwf	89,b	;volatile
  4825                           
  4826                           ;main.c: 254: LCDPS = 0b00110110;
  4827  001270  0E36               	movlw	54
  4828  001272  010F               	movlb	15	; () banked
  4829  001274  010F               	movlb	15	; () banked
  4830  001276  6F58               	movwf	88,b	;volatile
  4831                           
  4832                           ;main.c: 255: ADCON1 = 0b00111111;
  4833  001278  0E3F               	movlw	63
  4834  00127A  6EC1               	movwf	4033,c	;volatile
  4835                           
  4836                           ;main.c: 256: TRISA = 0b00000011;
  4837  00127C  0E03               	movlw	3
  4838  00127E  6E92               	movwf	3986,c	;volatile
  4839                           
  4840                           ;main.c: 257: TRISB = 0b00100001;
  4841  001280  0E21               	movlw	33
  4842  001282  6E93               	movwf	3987,c	;volatile
  4843                           
  4844                           ;main.c: 258: TRISC = 0b00011000;
  4845  001284  0E18               	movlw	24
  4846  001286  6E94               	movwf	3988,c	;volatile
  4847                           
  4848                           ;main.c: 259: TRISG = 0b11101111;
  4849  001288  0EEF               	movlw	239
  4850  00128A  6E98               	movwf	3992,c	;volatile
  4851                           
  4852                           ;main.c: 260: PORTA = 0;
  4853  00128C  0E00               	movlw	0
  4854  00128E  6E80               	movwf	3968,c	;volatile
  4855                           
  4856                           ;main.c: 261: PORTB = 0;
  4857  001290  0E00               	movlw	0
  4858  001292  6E81               	movwf	3969,c	;volatile
  4859                           
  4860                           ;main.c: 262: PORTC = 0;
  4861  001294  0E00               	movlw	0
  4862  001296  6E82               	movwf	3970,c	;volatile
  4863                           
  4864                           ; BSR set to: 15
  4865                           ;main.c: 263: INTCONbits.TMR0IF = 0;
  4866  001298  94F2               	bcf	intcon,2,c	;volatile
  4867                           
  4868                           ;main.c: 265: T0CON = 0b00001000;
  4869  00129A  0E08               	movlw	8
  4870  00129C  6ED5               	movwf	4053,c	;volatile
  4871                           
  4872                           ;main.c: 266: TMR0H = 0;
  4873  00129E  0E00               	movlw	0
  4874  0012A0  6ED7               	movwf	4055,c	;volatile
  4875                           
  4876                           ;main.c: 267: TMR0L = 0;
  4877  0012A2  0E00               	movlw	0
  4878  0012A4  6ED6               	movwf	4054,c	;volatile
  4879                           
  4880                           ; BSR set to: 15
  4881                           ;main.c: 268: T0CONbits.TMR0ON = 1;
  4882  0012A6  8ED5               	bsf	4053,7,c	;volatile
  4883                           
  4884                           ; BSR set to: 15
  4885                           ;main.c: 269: OpenI2C( 0b00001000, 0b10000000);
  4886  0012A8  6E03               	movwf	??_Init& (0+255),c
  4887  0012AA  0E08               	movlw	8
  4888  0012AC  6E01               	movwf	?_OpenI2C,c
  4889  0012AE  5003               	movf	??_Init& (0+255),w,c
  4890  0012B0  6E04               	movwf	(??_Init+1)& (0+255),c
  4891  0012B2  0E80               	movlw	128
  4892  0012B4  6E02               	movwf	?_OpenI2C+1,c
  4893  0012B6  5004               	movf	(??_Init+1)& (0+255),w,c
  4894  0012B8  EC28  F00B         	call	_OpenI2C	;wreg free
  4895                           
  4896                           ;main.c: 270: SSPADD = 0x3F;
  4897  0012BC  0E3F               	movlw	63
  4898  0012BE  6EC8               	movwf	4040,c	;volatile
  4899  0012C0  0012               	return	
  4900  0012C2                     __end_of_Init:
  4901                           	opt stack 0
  4902                           tblptru	equ	0xFF8
  4903                           tblptrh	equ	0xFF7
  4904                           tblptrl	equ	0xFF6
  4905                           tablat	equ	0xFF5
  4906                           prodh	equ	0xFF4
  4907                           prodl	equ	0xFF3
  4908                           intcon	equ	0xFF2
  4909                           postinc0	equ	0xFEE
  4910                           wreg	equ	0xFE8
  4911                           postinc1	equ	0xFE6
  4912                           postdec1	equ	0xFE5
  4913                           fsr1l	equ	0xFE1
  4914                           indf2	equ	0xFDF
  4915                           postinc2	equ	0xFDE
  4916                           postdec2	equ	0xFDD
  4917                           fsr2h	equ	0xFDA
  4918                           fsr2l	equ	0xFD9
  4919                           status	equ	0xFD8
  4920                           
  4921 ;; *************** function _OpenI2C *****************
  4922 ;; Defined at:
  4923 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_open.c"
  4924 ;; Parameters:    Size  Location     Type
  4925 ;;  sync_mode       1    0[COMRAM] unsigned char 
  4926 ;;  slew            1    1[COMRAM] unsigned char 
  4927 ;; Auto vars:     Size  Location     Type
  4928 ;;		None
  4929 ;; Return value:  Size  Location     Type
  4930 ;;		None               void
  4931 ;; Registers used:
  4932 ;;		wreg, status,2, status,0
  4933 ;; Tracked objects:
  4934 ;;		On entry : 0/0
  4935 ;;		On exit  : 0/0
  4936 ;;		Unchanged: 0/0
  4937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4938 ;;      Params:         2       0       0       0
  4939 ;;      Locals:         0       0       0       0
  4940 ;;      Temps:          0       0       0       0
  4941 ;;      Totals:         2       0       0       0
  4942 ;;Total ram usage:        2 bytes
  4943 ;; Hardware stack levels used:    1
  4944 ;; This function calls:
  4945 ;;		Nothing
  4946 ;; This function is called by:
  4947 ;;		_Init
  4948 ;; This function uses a non-reentrant model
  4949 ;;
  4950                           
  4951                           	psect	text25
  4952  001650                     __ptext25:
  4953                           	opt stack 0
  4954  001650                     _OpenI2C:
  4955                           	opt stack 29
  4956                           
  4957                           ;incstack = 0
  4958                           ;incstack = 0
  4959  001650  0E3F               	movlw	63
  4960  001652  16C7               	andwf	4039,f,c	;volatile
  4961  001654  0E00               	movlw	0
  4962  001656  6EC6               	movwf	4038,c	;volatile
  4963  001658  0E00               	movlw	0
  4964  00165A  6EC5               	movwf	4037,c	;volatile
  4965  00165C  5001               	movf	OpenI2C@sync_mode,w,c
  4966  00165E  12C6               	iorwf	4038,f,c	;volatile
  4967  001660  5002               	movf	OpenI2C@slew,w,c
  4968  001662  12C7               	iorwf	4039,f,c	;volatile
  4969  001664  8694               	bsf	3988,3,c	;volatile
  4970  001666  8894               	bsf	3988,4,c	;volatile
  4971  001668  8AC6               	bsf	4038,5,c	;volatile
  4972  00166A  0012               	return	
  4973  00166C                     __end_of_OpenI2C:
  4974                           	opt stack 0
  4975                           tblptru	equ	0xFF8
  4976                           tblptrh	equ	0xFF7
  4977                           tblptrl	equ	0xFF6
  4978                           tablat	equ	0xFF5
  4979                           prodh	equ	0xFF4
  4980                           prodl	equ	0xFF3
  4981                           intcon	equ	0xFF2
  4982                           postinc0	equ	0xFEE
  4983                           wreg	equ	0xFE8
  4984                           postinc1	equ	0xFE6
  4985                           postdec1	equ	0xFE5
  4986                           fsr1l	equ	0xFE1
  4987                           indf2	equ	0xFDF
  4988                           postinc2	equ	0xFDE
  4989                           postdec2	equ	0xFDD
  4990                           fsr2h	equ	0xFDA
  4991                           fsr2l	equ	0xFD9
  4992                           status	equ	0xFD8
  4993                           
  4994 ;; *************** function _butnEvent *****************
  4995 ;; Defined at:
  4996 ;;		line 82 in file "main.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  butn            2    4[COMRAM] PTR unsigned char 
  4999 ;;		 -> main@btn(1), 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;  returnVal       1    8[COMRAM] unsigned char 
  5002 ;;  newPin          1    7[COMRAM] unsigned char 
  5003 ;;  oldPin          1    6[COMRAM] unsigned char 
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      unsigned char 
  5006 ;; Registers used:
  5007 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5013 ;;      Params:         2       0       0       0
  5014 ;;      Locals:         3       0       0       0
  5015 ;;      Temps:          0       0       0       0
  5016 ;;      Totals:         5       0       0       0
  5017 ;;Total ram usage:        5 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    1
  5020 ;; This function calls:
  5021 ;;		_testPinState
  5022 ;; This function is called by:
  5023 ;;		_main
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text26
  5028  000750                     __ptext26:
  5029                           	opt stack 0
  5030  000750                     _butnEvent:
  5031                           	opt stack 29
  5032                           
  5033                           ;main.c: 85: unsigned char newPin, oldPin, returnVal;
  5034                           ;main.c: 88: newPin = PORTB & 0b00000001;
  5035                           
  5036                           ;incstack = 0
  5037                           ;incstack = 0
  5038  000750  5081               	movf	3969,w,c	;volatile
  5039  000752  0B01               	andlw	1
  5040  000754  6E08               	movwf	butnEvent@newPin,c
  5041                           
  5042                           ;main.c: 89: newPin ^= 0b00000001;
  5043  000756  0E01               	movlw	1
  5044  000758  1A08               	xorwf	butnEvent@newPin,f,c
  5045                           
  5046                           ;main.c: 90: oldPin = *butn & 0b00000001;
  5047  00075A  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5048  00075E  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5049  000762  50DF               	movf	indf2,w,c
  5050  000764  0B01               	andlw	1
  5051  000766  6E07               	movwf	butnEvent@oldPin,c
  5052                           
  5053                           ;main.c: 91: returnVal = testPinState(oldPin, newPin, butn);
  5054  000768  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5055  00076C  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5056  000770  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5057  000774  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5058  000778  ECFA  F00A         	call	_testPinState	;wreg free
  5059  00077C  6E09               	movwf	butnEvent@returnVal,c
  5060                           
  5061                           ;main.c: 92: if(returnVal !=0)
  5062  00077E  5009               	movf	butnEvent@returnVal,w,c
  5063  000780  A4D8               	btfss	status,2,c
  5064  000782  D0CA               	goto	L12
  5065                           
  5066                           ;main.c: 96: newPin = PORTB & 0b00100000;
  5067                           
  5068                           ;main.c: 93: return returnVal;
  5069  000784  5081               	movf	3969,w,c	;volatile
  5070  000786  0B20               	andlw	32
  5071  000788  6E08               	movwf	butnEvent@newPin,c
  5072                           
  5073                           ;main.c: 97: newPin ^= 0b00100000;
  5074  00078A  0E20               	movlw	32
  5075  00078C  1A08               	xorwf	butnEvent@newPin,f,c
  5076                           
  5077                           ;main.c: 98: newPin >>= 4;
  5078  00078E  3A08               	swapf	butnEvent@newPin,f,c
  5079  000790  0E0F               	movlw	15
  5080  000792  1608               	andwf	butnEvent@newPin,f,c
  5081                           
  5082                           ;main.c: 99: oldPin = *butn & 0b00000010;
  5083  000794  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5084  000798  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5085  00079C  50DF               	movf	indf2,w,c
  5086  00079E  0B02               	andlw	2
  5087  0007A0  6E07               	movwf	butnEvent@oldPin,c
  5088                           
  5089                           ;main.c: 100: returnVal = testPinState(oldPin, newPin, butn);
  5090  0007A2  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5091  0007A6  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5092  0007AA  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5093  0007AE  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5094  0007B2  ECFA  F00A         	call	_testPinState	;wreg free
  5095  0007B6  6E09               	movwf	butnEvent@returnVal,c
  5096                           
  5097                           ;main.c: 101: if(returnVal !=0)
  5098  0007B8  5009               	movf	butnEvent@returnVal,w,c
  5099  0007BA  A4D8               	btfss	status,2,c
  5100  0007BC  D0AD               	goto	L12
  5101                           
  5102                           ;main.c: 105: newPin = PORTA & 0b00000001;
  5103                           
  5104                           ;main.c: 102: return returnVal;
  5105  0007BE  5080               	movf	3968,w,c	;volatile
  5106  0007C0  0B01               	andlw	1
  5107  0007C2  6E08               	movwf	butnEvent@newPin,c
  5108                           
  5109                           ;main.c: 106: newPin ^= 0b00000001;
  5110  0007C4  0E01               	movlw	1
  5111  0007C6  1A08               	xorwf	butnEvent@newPin,f,c
  5112                           
  5113                           ;main.c: 107: newPin <<= 2;
  5114  0007C8  90D8               	bcf	status,0,c
  5115  0007CA  3608               	rlcf	butnEvent@newPin,f,c
  5116  0007CC  90D8               	bcf	status,0,c
  5117  0007CE  3608               	rlcf	butnEvent@newPin,f,c
  5118                           
  5119                           ;main.c: 108: oldPin = *butn & 0b00000100;
  5120  0007D0  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5121  0007D4  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5122  0007D8  50DF               	movf	indf2,w,c
  5123  0007DA  0B04               	andlw	4
  5124  0007DC  6E07               	movwf	butnEvent@oldPin,c
  5125                           
  5126                           ;main.c: 109: returnVal = testPinState(oldPin, newPin, butn);
  5127  0007DE  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5128  0007E2  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5129  0007E6  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5130  0007EA  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5131  0007EE  ECFA  F00A         	call	_testPinState	;wreg free
  5132  0007F2  6E09               	movwf	butnEvent@returnVal,c
  5133                           
  5134                           ;main.c: 110: if(returnVal !=0)
  5135  0007F4  5009               	movf	butnEvent@returnVal,w,c
  5136  0007F6  A4D8               	btfss	status,2,c
  5137  0007F8  D08F               	goto	L12
  5138                           
  5139                           ;main.c: 114: newPin = PORTA & 0b00000010;
  5140                           
  5141                           ;main.c: 111: return returnVal;
  5142  0007FA  5080               	movf	3968,w,c	;volatile
  5143  0007FC  0B02               	andlw	2
  5144  0007FE  6E08               	movwf	butnEvent@newPin,c
  5145                           
  5146                           ;main.c: 115: newPin ^= 0b00000010;
  5147  000800  0E02               	movlw	2
  5148  000802  1A08               	xorwf	butnEvent@newPin,f,c
  5149                           
  5150                           ;main.c: 116: newPin <<= 2;
  5151  000804  90D8               	bcf	status,0,c
  5152  000806  3608               	rlcf	butnEvent@newPin,f,c
  5153  000808  90D8               	bcf	status,0,c
  5154  00080A  3608               	rlcf	butnEvent@newPin,f,c
  5155                           
  5156                           ;main.c: 117: oldPin = *butn & 0b00001000;
  5157  00080C  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5158  000810  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5159  000814  50DF               	movf	indf2,w,c
  5160  000816  0B08               	andlw	8
  5161  000818  6E07               	movwf	butnEvent@oldPin,c
  5162                           
  5163                           ;main.c: 118: returnVal = testPinState(oldPin, newPin, butn);
  5164  00081A  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5165  00081E  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5166  000822  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5167  000826  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5168  00082A  ECFA  F00A         	call	_testPinState	;wreg free
  5169  00082E  6E09               	movwf	butnEvent@returnVal,c
  5170                           
  5171                           ;main.c: 119: if(returnVal !=0)
  5172  000830  5009               	movf	butnEvent@returnVal,w,c
  5173  000832  A4D8               	btfss	status,2,c
  5174  000834  D071               	goto	L12
  5175                           
  5176                           ;main.c: 123: newPin = PORTG & 0b00000001;
  5177                           
  5178                           ;main.c: 120: return returnVal;
  5179  000836  5086               	movf	3974,w,c	;volatile
  5180  000838  0B01               	andlw	1
  5181  00083A  6E08               	movwf	butnEvent@newPin,c
  5182                           
  5183                           ;main.c: 124: newPin ^= 0b00000001;
  5184  00083C  0E01               	movlw	1
  5185  00083E  1A08               	xorwf	butnEvent@newPin,f,c
  5186                           
  5187                           ;main.c: 125: newPin <<= 4;
  5188  000840  3A08               	swapf	butnEvent@newPin,f,c
  5189  000842  0EF0               	movlw	240
  5190  000844  1608               	andwf	butnEvent@newPin,f,c
  5191                           
  5192                           ;main.c: 126: oldPin = *butn & 0b00010000;
  5193  000846  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5194  00084A  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5195  00084E  50DF               	movf	indf2,w,c
  5196  000850  0B10               	andlw	16
  5197  000852  6E07               	movwf	butnEvent@oldPin,c
  5198                           
  5199                           ;main.c: 127: returnVal = testPinState(oldPin, newPin, butn);
  5200  000854  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5201  000858  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5202  00085C  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5203  000860  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5204  000864  ECFA  F00A         	call	_testPinState	;wreg free
  5205  000868  6E09               	movwf	butnEvent@returnVal,c
  5206                           
  5207                           ;main.c: 128: if(returnVal !=0)
  5208  00086A  5009               	movf	butnEvent@returnVal,w,c
  5209  00086C  A4D8               	btfss	status,2,c
  5210  00086E  D054               	goto	L12
  5211                           
  5212                           ;main.c: 132: newPin = PORTG & 0b00000010;
  5213                           
  5214                           ;main.c: 129: return returnVal;
  5215  000870  5086               	movf	3974,w,c	;volatile
  5216  000872  0B02               	andlw	2
  5217  000874  6E08               	movwf	butnEvent@newPin,c
  5218                           
  5219                           ;main.c: 133: newPin ^= 0b00000010;
  5220  000876  0E02               	movlw	2
  5221  000878  1A08               	xorwf	butnEvent@newPin,f,c
  5222                           
  5223                           ;main.c: 134: newPin <<= 4;
  5224  00087A  3A08               	swapf	butnEvent@newPin,f,c
  5225  00087C  0EF0               	movlw	240
  5226  00087E  1608               	andwf	butnEvent@newPin,f,c
  5227                           
  5228                           ;main.c: 135: oldPin = *butn & 0b00100000;
  5229  000880  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5230  000884  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5231  000888  50DF               	movf	indf2,w,c
  5232  00088A  0B20               	andlw	32
  5233  00088C  6E07               	movwf	butnEvent@oldPin,c
  5234                           
  5235                           ;main.c: 136: returnVal = testPinState(oldPin, newPin, butn);
  5236  00088E  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5237  000892  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5238  000896  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5239  00089A  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5240  00089E  ECFA  F00A         	call	_testPinState	;wreg free
  5241  0008A2  6E09               	movwf	butnEvent@returnVal,c
  5242                           
  5243                           ;main.c: 137: if(returnVal !=0)
  5244  0008A4  5009               	movf	butnEvent@returnVal,w,c
  5245  0008A6  A4D8               	btfss	status,2,c
  5246  0008A8  D037               	goto	L12
  5247                           
  5248                           ;main.c: 141: newPin = PORTG & 0b00000100;
  5249                           
  5250                           ;main.c: 138: return returnVal;
  5251  0008AA  5086               	movf	3974,w,c	;volatile
  5252  0008AC  0B04               	andlw	4
  5253  0008AE  6E08               	movwf	butnEvent@newPin,c
  5254                           
  5255                           ;main.c: 142: newPin ^= 0b00000100;
  5256  0008B0  0E04               	movlw	4
  5257  0008B2  1A08               	xorwf	butnEvent@newPin,f,c
  5258                           
  5259                           ;main.c: 143: newPin <<= 4;
  5260  0008B4  3A08               	swapf	butnEvent@newPin,f,c
  5261  0008B6  0EF0               	movlw	240
  5262  0008B8  1608               	andwf	butnEvent@newPin,f,c
  5263                           
  5264                           ;main.c: 144: oldPin = *butn & 0b01000000;
  5265  0008BA  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5266  0008BE  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5267  0008C2  50DF               	movf	indf2,w,c
  5268  0008C4  0B40               	andlw	64
  5269  0008C6  6E07               	movwf	butnEvent@oldPin,c
  5270                           
  5271                           ;main.c: 145: returnVal = testPinState(oldPin, newPin, butn);
  5272  0008C8  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5273  0008CC  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5274  0008D0  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5275  0008D4  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5276  0008D8  ECFA  F00A         	call	_testPinState	;wreg free
  5277  0008DC  6E09               	movwf	butnEvent@returnVal,c
  5278                           
  5279                           ;main.c: 146: if(returnVal !=0)
  5280  0008DE  5009               	movf	butnEvent@returnVal,w,c
  5281  0008E0  A4D8               	btfss	status,2,c
  5282  0008E2  D01A               	goto	L12
  5283                           
  5284                           ;main.c: 150: newPin = PORTG & 0b00001000;
  5285                           
  5286                           ;main.c: 147: return returnVal;
  5287  0008E4  5086               	movf	3974,w,c	;volatile
  5288  0008E6  0B08               	andlw	8
  5289  0008E8  6E08               	movwf	butnEvent@newPin,c
  5290                           
  5291                           ;main.c: 151: newPin ^= 0b00001000;
  5292  0008EA  0E08               	movlw	8
  5293  0008EC  1A08               	xorwf	butnEvent@newPin,f,c
  5294                           
  5295                           ;main.c: 152: newPin <<= 4;
  5296  0008EE  3A08               	swapf	butnEvent@newPin,f,c
  5297  0008F0  0EF0               	movlw	240
  5298  0008F2  1608               	andwf	butnEvent@newPin,f,c
  5299                           
  5300                           ;main.c: 153: oldPin = *butn & 0b10000000;
  5301  0008F4  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5302  0008F8  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5303  0008FC  50DF               	movf	indf2,w,c
  5304  0008FE  0B80               	andlw	128
  5305  000900  6E07               	movwf	butnEvent@oldPin,c
  5306                           
  5307                           ;main.c: 154: returnVal = testPinState(oldPin, newPin, butn);
  5308  000902  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5309  000906  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5310  00090A  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5311  00090E  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5312  000912  ECFA  F00A         	call	_testPinState	;wreg free
  5313  000916  6E09               	movwf	butnEvent@returnVal,c
  5314  000918                     L12:
  5315                           
  5316                           ;main.c: 156: return returnVal;
  5317  000918  5009               	movf	butnEvent@returnVal,w,c
  5318  00091A  0012               	return	
  5319  00091C                     __end_of_butnEvent:
  5320                           	opt stack 0
  5321                           tblptru	equ	0xFF8
  5322                           tblptrh	equ	0xFF7
  5323                           tblptrl	equ	0xFF6
  5324                           tablat	equ	0xFF5
  5325                           prodh	equ	0xFF4
  5326                           prodl	equ	0xFF3
  5327                           intcon	equ	0xFF2
  5328                           postinc0	equ	0xFEE
  5329                           wreg	equ	0xFE8
  5330                           postinc1	equ	0xFE6
  5331                           postdec1	equ	0xFE5
  5332                           fsr1l	equ	0xFE1
  5333                           indf2	equ	0xFDF
  5334                           postinc2	equ	0xFDE
  5335                           postdec2	equ	0xFDD
  5336                           fsr2h	equ	0xFDA
  5337                           fsr2l	equ	0xFD9
  5338                           status	equ	0xFD8
  5339                           
  5340 ;; *************** function _testPinState *****************
  5341 ;; Defined at:
  5342 ;;		line 169 in file "main.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  oldPin          1    0[COMRAM] unsigned char 
  5345 ;;  newPin          1    1[COMRAM] unsigned char 
  5346 ;;  butn            2    2[COMRAM] PTR unsigned char 
  5347 ;;		 -> main@btn(1), 
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      unsigned char 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr2l, fsr2h, status,2
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5359 ;;      Params:         4       0       0       0
  5360 ;;      Locals:         0       0       0       0
  5361 ;;      Temps:          0       0       0       0
  5362 ;;      Totals:         4       0       0       0
  5363 ;;Total ram usage:        4 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_butnEvent
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           	psect	text27
  5373  0015F4                     __ptext27:
  5374                           	opt stack 0
  5375  0015F4                     _testPinState:
  5376                           	opt stack 29
  5377                           
  5378                           ;main.c: 172: if( newPin == oldPin)
  5379                           
  5380                           ;incstack = 0
  5381                           ;incstack = 0
  5382  0015F4  5001               	movf	testPinState@oldPin,w,c
  5383  0015F6  6202               	cpfseq	testPinState@newPin,c
  5384  0015F8  D002               	goto	l1910
  5385                           
  5386                           ;main.c: 173: return 0;
  5387  0015FA  0E00               	movlw	0
  5388  0015FC  D00B               	goto	l96
  5389  0015FE                     l1910:
  5390                           
  5391                           ;main.c: 175: *butn = newPin;
  5392  0015FE  C003  FFD9         	movff	testPinState@butn,fsr2l
  5393  001602  C004  FFDA         	movff	testPinState@butn+1,fsr2h
  5394  001606  C002  FFDF         	movff	testPinState@newPin,indf2
  5395                           
  5396                           ;main.c: 177: if(newPin == 0)
  5397  00160A  6602               	tstfsz	testPinState@newPin,c
  5398  00160C  D002               	goto	l1918
  5399                           
  5400                           ;main.c: 178: return 2;
  5401  00160E  0E02               	movlw	2
  5402  001610  D001               	goto	l96
  5403  001612                     l1918:
  5404                           
  5405                           ;main.c: 180: return 1;
  5406  001612  0E01               	movlw	1
  5407  001614                     l96:
  5408  001614  0012               	return	
  5409  001616                     __end_of_testPinState:
  5410                           	opt stack 0
  5411                           tblptru	equ	0xFF8
  5412                           tblptrh	equ	0xFF7
  5413                           tblptrl	equ	0xFF6
  5414                           tablat	equ	0xFF5
  5415                           prodh	equ	0xFF4
  5416                           prodl	equ	0xFF3
  5417                           intcon	equ	0xFF2
  5418                           postinc0	equ	0xFEE
  5419                           wreg	equ	0xFE8
  5420                           postinc1	equ	0xFE6
  5421                           postdec1	equ	0xFE5
  5422                           fsr1l	equ	0xFE1
  5423                           indf2	equ	0xFDF
  5424                           postinc2	equ	0xFDE
  5425                           postdec2	equ	0xFDD
  5426                           fsr2h	equ	0xFDA
  5427                           fsr2l	equ	0xFD9
  5428                           status	equ	0xFD8
  5429                           
  5430 ;; *************** function ___wmul *****************
  5431 ;; Defined at:
  5432 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\wmul.c"
  5433 ;; Parameters:    Size  Location     Type
  5434 ;;  multiplier      2    8[COMRAM] unsigned int 
  5435 ;;  multiplicand    2   10[COMRAM] unsigned int 
  5436 ;; Auto vars:     Size  Location     Type
  5437 ;;  product         2   12[COMRAM] unsigned int 
  5438 ;; Return value:  Size  Location     Type
  5439 ;;                  2    8[COMRAM] unsigned int 
  5440 ;; Registers used:
  5441 ;;		wreg, status,2, status,0, prodl, prodh
  5442 ;; Tracked objects:
  5443 ;;		On entry : 0/0
  5444 ;;		On exit  : 0/0
  5445 ;;		Unchanged: 0/0
  5446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5447 ;;      Params:         4       0       0       0
  5448 ;;      Locals:         2       0       0       0
  5449 ;;      Temps:          0       0       0       0
  5450 ;;      Totals:         6       0       0       0
  5451 ;;Total ram usage:        6 bytes
  5452 ;; Hardware stack levels used:    1
  5453 ;; This function calls:
  5454 ;;		Nothing
  5455 ;; This function is called by:
  5456 ;;		_showFreq
  5457 ;;		_main
  5458 ;; This function uses a non-reentrant model
  5459 ;;
  5460                           
  5461                           	psect	text28
  5462  001560                     __ptext28:
  5463                           	opt stack 0
  5464  001560                     ___wmul:
  5465                           	opt stack 30
  5466                           
  5467                           ;incstack = 0
  5468                           ;incstack = 0
  5469  001560  5009               	movf	___wmul@multiplier,w,c
  5470  001562  020B               	mulwf	___wmul@multiplicand,c
  5471  001564  CFF3 F00D          	movff	prodl,___wmul@product
  5472  001568  CFF4 F00E          	movff	prodh,___wmul@product+1
  5473  00156C  5009               	movf	___wmul@multiplier,w,c
  5474  00156E  020C               	mulwf	___wmul@multiplicand+1,c
  5475  001570  CFF3 FFF4          	movff	prodl,prodh
  5476  001574  6AF3               	clrf	prodl,c
  5477  001576  50F3               	movf	prodl,w,c
  5478  001578  260D               	addwf	___wmul@product,f,c
  5479  00157A  50F4               	movf	prodh,w,c
  5480  00157C  220E               	addwfc	___wmul@product+1,f,c
  5481  00157E  500A               	movf	___wmul@multiplier+1,w,c
  5482  001580  020B               	mulwf	___wmul@multiplicand,c
  5483  001582  CFF3 FFF4          	movff	prodl,prodh
  5484  001586  6AF3               	clrf	prodl,c
  5485  001588  50F3               	movf	prodl,w,c
  5486  00158A  260D               	addwf	___wmul@product,f,c
  5487  00158C  50F4               	movf	prodh,w,c
  5488  00158E  220E               	addwfc	___wmul@product+1,f,c
  5489  001590  C00D  F009         	movff	___wmul@product,?___wmul
  5490  001594  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  5491  001598  0012               	return	
  5492  00159A                     __end_of___wmul:
  5493                           	opt stack 0
  5494                           tblptru	equ	0xFF8
  5495                           tblptrh	equ	0xFF7
  5496                           tblptrl	equ	0xFF6
  5497                           tablat	equ	0xFF5
  5498                           prodh	equ	0xFF4
  5499                           prodl	equ	0xFF3
  5500                           intcon	equ	0xFF2
  5501                           postinc0	equ	0xFEE
  5502                           wreg	equ	0xFE8
  5503                           postinc1	equ	0xFE6
  5504                           postdec1	equ	0xFE5
  5505                           fsr1l	equ	0xFE1
  5506                           indf2	equ	0xFDF
  5507                           postinc2	equ	0xFDE
  5508                           postdec2	equ	0xFDD
  5509                           fsr2h	equ	0xFDA
  5510                           fsr2l	equ	0xFD9
  5511                           status	equ	0xFD8
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           intcon	equ	0xFF2
  5519                           postinc0	equ	0xFEE
  5520                           wreg	equ	0xFE8
  5521                           postinc1	equ	0xFE6
  5522                           postdec1	equ	0xFE5
  5523                           fsr1l	equ	0xFE1
  5524                           indf2	equ	0xFDF
  5525                           postinc2	equ	0xFDE
  5526                           postdec2	equ	0xFDD
  5527                           fsr2h	equ	0xFDA
  5528                           fsr2l	equ	0xFD9
  5529                           status	equ	0xFD8
  5530                           
  5531                           	psect	rparam
  5532  0000                     tblptru	equ	0xFF8
  5533                           tblptrh	equ	0xFF7
  5534                           tblptrl	equ	0xFF6
  5535                           tablat	equ	0xFF5
  5536                           prodh	equ	0xFF4
  5537                           prodl	equ	0xFF3
  5538                           intcon	equ	0xFF2
  5539                           postinc0	equ	0xFEE
  5540                           wreg	equ	0xFE8
  5541                           postinc1	equ	0xFE6
  5542                           postdec1	equ	0xFE5
  5543                           fsr1l	equ	0xFE1
  5544                           indf2	equ	0xFDF
  5545                           postinc2	equ	0xFDE
  5546                           postdec2	equ	0xFDD
  5547                           fsr2h	equ	0xFDA
  5548                           fsr2l	equ	0xFD9
  5549                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    161
    Data        96
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     57      66
    BANK0           160      0     126
    BANK1           256      0       0
    BANK2           256      0       0

Pointer List with Targets:

    ?_displayText	int  size(2) Largest target is 0

    ?_setScan	unsigned int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_nextChan	unsigned int  size(2) Largest target is 0

    ?_volSet	unsigned int  size(2) Largest target is 0

    ?_manualTune	unsigned int  size(2) Largest target is 0

    displayText@str	PTR unsigned char  size(2) Largest target is 90
		 -> stationName(BANK0[90]), main@welcomeMessage(COMRAM[6]), 

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> setScan@dat(COMRAM[2]), FMfrequenc@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), setScan@chanRgstr(COMRAM[2]), FMready@sts(COMRAM[2]), 

    segWrt@LCReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(DATA[1]), 

    testPinState@butn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 

    butnEvent@butn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_nextChan
    _displayText->___wmul
    _setScan->_FMready
    _showChan->_setscn
    _showVol->_setscn
    _showFreq->___wmul
    _nextChan->_FMfrequenc
    _volSet->_FMwrite
    _FMvers->_FMread
    _FMinit->_FMready
    _manualTune->_FMfrequenc
    _FMfrequenc->_FMready
    _FMready->_FMread
    _FMread->_WriteI2C
    _FMwrite->_WriteI2C
    _Init->_OpenI2C
    _butnEvent->_testPinState
    ___wmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    8030
                                             31 COMRAM    26    26      0
                          _butnEvent
                                _dly
                               _Init
                              _errfm
                         _manualTune
                         _FMfrequenc
                             _FMinit
                             _FMvers
                             _volSet
                           _nextChan
                           _showFreq
                            _showVol
                           _showChan
                            _setScan
                        _displayText
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _displayText                                         15    11      4     540
                                             14 COMRAM    15    11      4
                             _segWrt
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _setScan                                             10     8      2     756
                                             18 COMRAM     8     6      2
                                _dly
                              _errfm
                            _FMwrite
                             _FMread
                            _FMready
 ---------------------------------------------------------------------------------
 (1) _showChan                                             3     1      2     246
                                              3 COMRAM     3     1      2
                             _setscn
                            _charWrt
 ---------------------------------------------------------------------------------
 (1) _showVol                                              4     2      2     269
                                              3 COMRAM     4     2      2
                             _setscn
                            _charWrt
 ---------------------------------------------------------------------------------
 (2) _setscn                                               3     2      1     113
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _showFreq                                             7     5      2     862
                                             14 COMRAM     7     5      2
                             _segWrt
                            _charWrt
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _charWrt                                              2     0      2     111
                                              0 COMRAM     2     0      2
                              _errfm
 ---------------------------------------------------------------------------------
 (2) _segWrt                                               7     5      2     178
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nextChan                                             5     2      3     705
                                             26 COMRAM     5     2      3
                              _errfm
                         _FMfrequenc
 ---------------------------------------------------------------------------------
 (1) _volSet                                               7     4      3     312
                                              6 COMRAM     7     4      3
                              _errfm
                            _FMwrite
 ---------------------------------------------------------------------------------
 (1) _FMvers                                               3     1      2     200
                                             12 COMRAM     3     1      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               5     5      0     661
                                             18 COMRAM     5     5      0
                                _dly
                            _FMwrite
                            _FMready
 ---------------------------------------------------------------------------------
 (1) _manualTune                                           3     0      3     705
                                             26 COMRAM     3     0      3
                              _errfm
                         _FMfrequenc
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                           8     6      2     525
                                             18 COMRAM     8     6      2
                                _dly
                            _FMwrite
                            _FMready
 ---------------------------------------------------------------------------------
 (2) _FMready                                              6     4      2     252
                                             12 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (3) _FMread                                              11     8      3     178
                                              1 COMRAM    11     8      3
                            _IdleI2C
                           _WriteI2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FMwrite                                              8     7      1     134
                                              1 COMRAM     5     4      1
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     0      1      22
                                              0 COMRAM     1     0      1
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _dly                                                  4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _errfm                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 4     4      0      44
                                              2 COMRAM     2     2      0
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     0      2      44
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _butnEvent                                            5     3      2    1183
                                              4 COMRAM     5     3      2
                       _testPinState
 ---------------------------------------------------------------------------------
 (2) _testPinState                                         4     0      4     110
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     159
                                              8 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _butnEvent
     _testPinState
   _dly
   _Init
     _OpenI2C
   _errfm
   _manualTune
     _errfm
     _FMfrequenc
       _dly
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _FMready
         _FMread
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _ReadI2C
   _FMfrequenc
     _dly
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _FMinit
     _dly
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _FMvers
     _FMread
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
   _volSet
     _errfm
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
   _nextChan
     _errfm
     _FMfrequenc
       _dly
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _FMready
         _FMread
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _ReadI2C
   _showFreq
     _segWrt
     _charWrt
       _errfm
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _showVol
     _setscn
     _charWrt
       _errfm
   _showChan
     _setscn
     _charWrt
       _errfm
   _setScan
     _dly
     _errfm
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMread
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _displayText
     _segWrt
     ___wmul (ARG)
       ___lwdiv (ARG)
   ___wmul
     ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2FF      0       0      10        0.0%
BITBANK2           100      0       0       6        0.0%
BANK2              100      0       0       7        0.0%
BITBANK1           100      0       0       9        0.0%
BANK1              100      0       0       5        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      7E       4       78.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     39      42       1       69.5%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       6       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0       8        0.0%
DATA                 0      0      C6      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Mar 27 16:38:52 2014

          showVol@volume 0004          butnEvent@oldPin 0007             ?_displayText 000F  
        butnEvent@newPin 0008              __CFG_CP$OFF 000000              _SSPSTATbits 000FC7  
                     l96 1614      ___wmul@multiplicand 000B              __CFG_BORV$3 000000  
                    l220 0EDE                      l124 14EA                      l118 1322  
                    l126 14F0                      l127 14F6                      l144 10E4  
                    l136 11BA                      l209 0A96                      l129 1518  
                    l162 1022                      l154 0FCC                      l228 168E  
                    l148 1136                      l180 0FC8                      l149 112C  
                    l165 1038                      l158 10A2                      l174 14D0  
                    l262 0DC2                      l159 0FFC                      l191 1248  
                    l336 1646                      l168 1042                      l264 0DF6  
                    l361 1452                      l337 1648                      l249 0BE6  
                    l370 1472                      l358 1484                      l880 1426  
            _stationName 0060                      u914 12F4                      u915 12F0  
                    _dly 159A                      prod 000FF3                      wreg 000FE8  
           __CFG_WDT$OFF 000000                     l2002 13F4                     l2004 13FC  
                   l2014 141C                     l2006 1400                     l2130 14FC  
                   l2214 0FEA                     l2134 1502                     l2302 0D5E  
                   l2144 143C                     l2304 0DA8                     l2162 145E  
                   l2306 0DAC                     l2252 0C12                     l2316 0DEA  
                   l2342 091E                     l2254 0C26                     l2176 1482  
                   l2328 14A4                     l2408 0EF2                     l2280 154E  
                   l2450 0FB2                     l2196 1102                     l2524 1158  
                   l2428 0F5C                     l1910 15FE                     l2534 118E  
                   l2518 113A                     l2542 11AA                     l2446 0F98  
                   l2374 0A80                     l2358 09D0                     l2630 04CA  
                   l2622 0492                     l2528 116E                     l2448 0FA6  
                   l2552 0E32                     l2472 0AF0                     l2712 06CE  
                   l2704 0680                     l2640 0524                     l2624 04A0  
                   l2608 0442                     l2538 11A4                     l2378 0A86  
                   l2562 0E98                     l2546 0DFA                     l2570 0ECE  
                   l2490 0B5E                     l2482 0B36                     l2474 0AF6  
                   l2298 0D32                     l2722 071C                     l2642 052C  
                   l2626 04AE                     l1924 15A4                     l1932 15C2  
                   l2556 0E62                     l1940 15DE                     l2660 057C  
                   l2628 04BC                     l1918 1612                     l1926 15AE  
                   l2566 0EC8                     l2662 0584                     l2654 0564  
                   l2646 0532                     l1928 15B4                     l2648 054E  
                   ?_dly 0001                     l1938 15D6                     l1980 1690  
                   l2692 063A                     l2684 0600                     l2676 05B0  
                   l2668 059A                     l1974 1310                     l1968 12CA  
                   l2688 0616                     l2698 0654                     u1170 147E  
                   u1340 14B8                     u1346 14BA                     u1470 0F94  
                   u1535 0B88                     u1581 03FC              main@counter 0029  
                   _Init 124A          __end_of_FMready 14D2                     _main 03A2  
                   dly@d 0001                     dly@i 0003                     fsr2h 000FDA  
                   fsr1l 000FE1                     indf2 000FDF                     fsr2l 000FD9  
        __end_of_FMwrite 1138                     prodh 000FF4                     prodl 000FF3  
                   start 0000            __CFG_IESO$OFF 000000          __end_of_IdleI2C 169C  
          __CFG_MCLRE$ON 000000          __end_of_ReadI2C 1650          __end_of_OpenI2C 166C  
                  ??_dly 0003             main@dispOfst 0034                    ?_Init 0001  
                  ?_main 0001                    _T0CON 000FD5                    _LCDPS 000F58  
        __end_of___lwdiv 1430                    _TMR0H 000FD7                    _TMR0L 000FD6  
                  _PORTA 000F80                    _PORTB 000F81                    _PORTC 000F82  
                  _PORTG 000F86                    _TRISA 000F92                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISG 000F98          __end_of_charWrt 151A  
          __CFG_PWRT$OFF 000000           __CFG_FCMEN$OFF 000000       displayText@display 0018  
        __end_of_regDflt 0370          __end_of_segData 03A1                    _errfm 1682  
            ?_FMfrequenc 0013             displayText@i 001C          __end_of_setScan 0BE8  
         __CFG_BOREN$OFF 000000                    tablat 000FF5       butnEvent@returnVal 0009  
        __end_of_showVol 1560          __end_of_station 0397                    status 000FD8  
        __initialization 1324             __end_of_Init 12C2             __end_of_main 0750  
                 ??_Init 0003                   ??_main 0020            __activetblptr 000002  
      showFreq@frequency 000F                   _ADCON1 000FC1                ??_FMready 000F  
                 ?_errfm 0001         __end_of_WriteI2C 1486                ??_FMwrite 0003  
                 _LCDCON 000F59                   _LCDSE0 000F5A                   _LCDSE1 000F5B  
                 _LCDSE2 000F5C                   _LCDSE3 000F5D              OpenI2C@slew 0002  
              ??_IdleI2C 0001                   _OSCCON 000FD3                   _FMinit 0EE8  
                 _FMread 0FCA                   _SSPADD 000FC8                   _SSPBUF 000FC9  
                 _FMvers 166C                ??_ReadI2C 0001                ??_OpenI2C 0003  
       setScan@chanRgstr 0019           __CFG_XINST$OFF 000000                   ___wmul 1560  
              ??___lwdiv 0005      __size_of_FMfrequenc 0086                   _regImg 00BA  
              ??_charWrt 0003                   clear_0 132A                   _segWrt 12C2  
        showChan@channel 0004                   _setscn 15CC         __end_of_nextChan 0EE8  
                 _volSet 091C     __size_of_displayText 00F8                   main@ui 002E  
           __pdataCOMRAM 003A         __end_of_showChan 1634         __end_of_showFreq 0D00  
              ??_setScan 0015             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_showVol 0006  
             __accesstop 0060  __end_of__initialization 1376           __pcstackCOMRAM 0001  
           __pidataBANK0 1380            __end_of_errfm 1690              segWrt@LCReg 0005  
     main@welcomeMessage 0022              nextChan@dir 001D          __CFG_OSC$INTIO7 000000  
            segWrt@state 0002                  ??_errfm 0001               __pbssBANK0 00BA  
     __end_of_LCDLetters 038B       __size_of_butnEvent 01CC                  ?_FMinit 0001  
                ?_FMread 0002                  ?_FMvers 000D                  ?___wmul 0009  
                ?_segWrt 0001                ?_WriteI2C 0001                  ?_setscn 0001  
                ?_volSet 0007                FMinit@dat 0015                  _FMready 1486  
                _SSPCON1 000FC6                  _SSPCON2 000FC5             ??_FMfrequenc 0015  
                _SSPSTAT 000FC7                  _FMwrite 10A4                  _IdleI2C 1690  
        __size_of_FMinit 00E2          __size_of_FMread 00DA                FMvers@vsn 000D  
                _ReadI2C 1634          __size_of_FMvers 0016                ?_nextChan 001B  
                _OpenI2C 1650                  __Hparam 0000                  __Lparam 0000  
              ?_showChan 0004                ?_showFreq 000F               _manualTune 1138  
        __size_of___wmul 003A                  ___lwdiv 13DA             __psmallconst 0300  
        __CFG_STVREN$OFF 000000                  _charWrt 14D2                  __pcinit 1324  
             ??_WriteI2C 0002        __end_of_butnEvent 091C       __end_of_FMfrequenc 124A  
                __ramtop 0300          __size_of_segWrt 0062                  __ptext0 03A2  
                __ptext1 0D00                  __ptext2 0AA0                  __ptext3 1616  
                __ptext4 151A                  __ptext5 15CC                  __ptext6 0BE8  
                __ptext7 13DA                  __ptext8 14D2                  __ptext9 12C2  
        __size_of_setscn 0028          __size_of_volSet 0184                _T0CONbits 000FD5  
                _regDflt 034C                  _segData 0397             __size_of_dly 0032  
                _setScan 0AA0                  _showVol 151A                  _station 038B  
                main@btn 0030           manualTune@freq 001B                  main@evt 0028  
                main@vol 0038     end_of_initialization 1376           displayText@pos 0011  
         displayText@str 000F            __Lmediumconst 0000            ?_testPinState 0001  
             ??_nextChan 001E              FMfrequenc@f 0013               ??_showChan 0006  
             ??_showFreq 0011                  postdec1 000FE5                  postdec2 000FDD  
                postinc0 000FEE                  postinc1 000FE6                  postinc2 000FDE  
       charWrt@numToDisp 0001              setscn@state 0001                _TRISCbits 000F94  
          butnEvent@butn 0005           ??_testPinState 0005           __end_of_FMinit 0FCA  
         __end_of_FMread 10A4           __end_of_FMvers 1682               main@toggle 002D  
            ?_manualTune 001B               _volumePair 0300          showFreq@display 0013  
        main@charDispCtr 002B            ??_displayText 0013           __end_of___wmul 159A  
          __pidataCOMRAM 169C           __end_of_segWrt 1324           __end_of_setscn 15F4  
         __end_of_volSet 0AA0      start_initialization 1324              __end_of_dly 15CC  
         charWrt@DigitNo 0002         WriteI2C@data_out 0001                 ??_FMinit 0013  
               ??_FMread 0005                 ??_FMvers 000F             nextChan@chan 001B  
           segWrt@segOrd 0001                 ??___wmul 000D              __pdataBANK0 0060  
               ??_segWrt 0003                 ??_setscn 0002                 ??_volSet 000A  
      __size_of_WriteI2C 0056      __end_of_displayText 0DF8              __pbssCOMRAM 0040  
               ?_FMready 000D      __size_of_manualTune 008C                 ?_FMwrite 0002  
               ?_IdleI2C 0001                 ?_ReadI2C 0001                 ?_OpenI2C 0001  
       ___lwdiv@dividend 0001        __size_of_nextChan 00F0               setScan@dat 0017  
             setScan@dir 0013                 ?___lwdiv 0001        __size_of_showChan 001E  
      __size_of_showFreq 0118                 ?_charWrt 0001                 FMinit@ad 0017  
   __end_of_testPinState 1616         testPinState@butn 0003              __smallconst 0300  
              _butnEvent 0750          FMwrite@firstByt 0005                 ?_setScan 0013  
               ?_showVol 0004         ___lwdiv@quotient 0006                 _LCDDATA0 000F60  
               _LCDDATA1 000F61                 _LCDDATA2 000F62                 _LCDDATA3 000F63  
        FMwrite@secndByt 0006           __size_of_errfm 000E          segWrt@bitSelect 0007  
          manualTune@dir 001D           ___wmul@product 000D           FMread@firstByt 000B  
             FMread@data 0003                 _PIR1bits 000F9E                main@F5991 003A  
         FMread@secndByt 000C               setscn@data 0003               FMready@rdy 000D  
             FMready@sts 0011              _displayText 0D00        ___wmul@multiplier 0009  
       displayText@F5975 0040       testPinState@oldPin 0001       testPinState@newPin 0002  
             ?_butnEvent 0005                copy_data0 134A                copy_data1 136A  
       __size_of_FMready 004C         __size_of_FMwrite 0094         OpenI2C@sync_mode 0001  
       __size_of_IdleI2C 000C         __size_of_ReadI2C 001C                 __Hrparam 0000  
       __size_of_OpenI2C 001C                 __Lrparam 0000             ??_manualTune 001E  
             FMwrite@adr 0002         __size_of___lwdiv 0056                 _WriteI2C 1430  
       __size_of_charWrt 0048          ___lwdiv@divisor 0003         __size_of_setScan 0148  
        ___lwdiv@counter 0008                 __ptext10 0DF8                 __ptext11 091C  
               __ptext20 1430                 __ptext12 166C                 __ptext21 1690  
               __ptext13 0EE8                 __ptext22 159A                 __ptext14 1138  
               __ptext23 1682                 __ptext15 11C4                 __ptext24 124A  
               __ptext16 1486                 __ptext25 1650                 __ptext17 0FCA  
               __ptext26 0750                 __ptext18 1634                 __ptext27 15F4  
               __ptext19 10A4                 __ptext28 1560         __size_of_showVol 0046  
     __end_of_manualTune 11C4            __size_of_Init 0078            __size_of_main 03AE  
               _nextChan 0DF8            FMread@regAddr 0002                 _showChan 1616  
               _showFreq 0BE8            FMfrequenc@dat 0019               _LCDLetters 0370  
  __size_of_testPinState 0022                 main@chan 0036                 main@disp 0031  
               main@freq 0032          displayText@flag 001B                volSet@dir 0009  
              volSet@vol 0007              ??_butnEvent 0007               _INTCONbits 000FF2  
           _testPinState 15F4             FMfrequenc@cn 0017              _SSPCON1bits 000FC6  
            _SSPCON2bits 000FC5               _FMfrequenc 11C4       __end_of_volumePair 034C  
