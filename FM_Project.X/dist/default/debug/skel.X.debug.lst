

Microchip Technology PIC18 LITE Macro Assembler V1.20 build 52243 
                                                                                               Thu Mar 27 16:16:58 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 52243
     1                           	processor	18F6490
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1
    33                           	psect	text19,global,reloc=2,class=CODE,delta=1
    34                           	psect	text20,global,reloc=2,class=CODE,delta=1
    35                           	psect	text21,global,reloc=2,class=CODE,delta=1
    36                           	psect	text22,global,reloc=2,class=CODE,delta=1
    37                           	psect	text23,global,reloc=2,class=CODE,delta=1
    38                           	psect	text24,global,reloc=2,class=CODE,delta=1
    39                           	psect	text25,global,reloc=2,class=CODE,delta=1
    40                           	psect	text26,global,reloc=2,class=CODE,delta=1
    41                           	psect	text27,global,reloc=2,class=CODE,delta=1
    42                           	psect	text28,global,reloc=2,class=CODE,delta=1
    43                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    45  0000                     
    46                           	psect	idataCOMRAM
    47  001702                     __pidataCOMRAM:
    48                           	opt stack 0
    49                           
    50                           ;initializer for main@F5991
    51  001702  48                 	db	72
    52  001703  45                 	db	69
    53  001704  4C                 	db	76
    54  001705  4C                 	db	76
    55  001706  4F                 	db	79
    56  001707  00                 	db	0
    57                           
    58                           	psect	idataBANK0
    59  0013E6                     __pidataBANK0:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _stationName
    63  0013E6  55                 	db	85
    64  0013E7  4E                 	db	78
    65  0013E8  4B                 	db	75
    66  0013E9  4E                 	db	78
    67  0013EA  4F                 	db	79
    68  0013EB  57                 	db	87
    69  0013EC  4E                 	db	78
    70  0013ED  00                 	db	0
    71  0013EE  00                 	db	0
    72  0013EF  00                 	db	0
    73  0013F0  00                 	db	0
    74  0013F1  00                 	db	0
    75  0013F2  00                 	db	0
    76  0013F3  00                 	db	0
    77  0013F4  00                 	db	0
    78  0013F5  42                 	db	66
    79  0013F6  42                 	db	66
    80  0013F7  43                 	db	67
    81  0013F8  5B                 	db	91
    82  0013F9  54                 	db	84
    83  0013FA  57                 	db	87
    84  0013FB  4F                 	db	79
    85  0013FC  00                 	db	0
    86  0013FD  00                 	db	0
    87  0013FE  00                 	db	0
    88  0013FF  00                 	db	0
    89  001400  00                 	db	0
    90  001401  00                 	db	0
    91  001402  00                 	db	0
    92  001403  00                 	db	0
    93  001404  42                 	db	66
    94  001405  42                 	db	66
    95  001406  43                 	db	67
    96  001407  5B                 	db	91
    97  001408  54                 	db	84
    98  001409  48                 	db	72
    99  00140A  52                 	db	82
   100  00140B  45                 	db	69
   101  00140C  45                 	db	69
   102  00140D  00                 	db	0
   103  00140E  00                 	db	0
   104  00140F  00                 	db	0
   105  001410  00                 	db	0
   106  001411  00                 	db	0
   107  001412  00                 	db	0
   108  001413  45                 	db	69
   109  001414  41                 	db	65
   110  001415  47                 	db	71
   111  001416  4C                 	db	76
   112  001417  45                 	db	69
   113  001418  00                 	db	0
   114  001419  00                 	db	0
   115  00141A  00                 	db	0
   116  00141B  00                 	db	0
   117  00141C  00                 	db	0
   118  00141D  00                 	db	0
   119  00141E  00                 	db	0
   120  00141F  00                 	db	0
   121  001420  00                 	db	0
   122  001421  00                 	db	0
   123  001422  42                 	db	66
   124  001423  42                 	db	66
   125  001424  43                 	db	67
   126  001425  5B                 	db	91
   127  001426  4F                 	db	79
   128  001427  4E                 	db	78
   129  001428  45                 	db	69
   130  001429  00                 	db	0
   131  00142A  00                 	db	0
   132  00142B  00                 	db	0
   133  00142C  00                 	db	0
   134  00142D  00                 	db	0
   135  00142E  00                 	db	0
   136  00142F  00                 	db	0
   137  001430  00                 	db	0
   138  001431  55                 	db	85
   139  001432  4E                 	db	78
   140  001433  4B                 	db	75
   141  001434  4E                 	db	78
   142  001435  4F                 	db	79
   143  001436  57                 	db	87
   144  001437  4E                 	db	78
   145  001438  00                 	db	0
   146  001439  00                 	db	0
   147  00143A  00                 	db	0
   148  00143B  00                 	db	0
   149  00143C  00                 	db	0
   150  00143D  00                 	db	0
   151  00143E  00                 	db	0
   152  00143F  00                 	db	0
   153                           
   154                           	psect	smallconst
   155  000300                     __psmallconst:
   156                           	opt stack 0
   157  000300                     _volumePair:
   158                           	opt stack 0
   159  000300  0780               	dw	1920
   160  000302  0780               	dw	1920
   161  000304  0780               	dw	1920
   162  000306  0780               	dw	1920
   163  000308  0580               	dw	1408
   164  00030A  0580               	dw	1408
   165  00030C  0580               	dw	1408
   166  00030E  0500               	dw	1280
   167  000310  0480               	dw	1152
   168  000312  0400               	dw	1024
   169  000314  0380               	dw	896
   170  000316  0300               	dw	768
   171  000318  0300               	dw	768
   172  00031A  0300               	dw	768
   173  00031C  0180               	dw	384
   174  00031E  0180               	dw	384
   175  000320  0100               	dw	256
   176  000322  0080               	dw	128
   177  000324  0000               	dw	0
   178  000326  0000               	dw	0
   179  000328  C000               	dw	49152
   180  00032A  D000               	dw	53248
   181  00032C  F000               	dw	61440
   182  00032E  C000               	dw	49152
   183  000330  D000               	dw	53248
   184  000332  F000               	dw	61440
   185  000334  F000               	dw	61440
   186  000336  F000               	dw	61440
   187  000338  F000               	dw	61440
   188  00033A  F000               	dw	61440
   189  00033C  D000               	dw	53248
   190  00033E  E000               	dw	57344
   191  000340  F000               	dw	61440
   192  000342  E000               	dw	57344
   193  000344  F000               	dw	61440
   194  000346  F000               	dw	61440
   195  000348  F000               	dw	61440
   196  00034A  F000               	dw	61440
   197  00034C                     __end_of_volumePair:
   198                           	opt stack 0
   199  00034C                     _regDflt:
   200                           	opt stack 0
   201  00034C  FFFF               	dw	65535
   202  00034E  5B15               	dw	23317
   203  000350  D0B9               	dw	53433
   204  000352  A010               	dw	40976
   205  000354  0780               	dw	1920
   206  000356  28AB               	dw	10411
   207  000358  6400               	dw	25600
   208  00035A  1EE7               	dw	7911
   209  00035C  7141               	dw	28993
   210  00035E  007D               	dw	125
   211  000360  82C6               	dw	33478
   212  000362  4F55               	dw	20309
   213  000364  970C               	dw	38668
   214  000366  B845               	dw	47173
   215  000368  FC2D               	dw	64557
   216  00036A  8097               	dw	32919
   217  00036C  04A1               	dw	1185
   218  00036E  DF6A               	dw	57194
   219  000370                     __end_of_regDflt:
   220                           	opt stack 0
   221  000370                     _LCDLetters:
   222                           	opt stack 0
   223  000370  77                 	db	119
   224  000371  7C                 	db	124
   225  000372  39                 	db	57
   226  000373  5E                 	db	94
   227  000374  79                 	db	121
   228  000375  71                 	db	113
   229  000376  6F                 	db	111
   230  000377  76                 	db	118
   231  000378  30                 	db	48
   232  000379  1E                 	db	30
   233  00037A  76                 	db	118
   234  00037B  38                 	db	56
   235  00037C  15                 	db	21
   236  00037D  54                 	db	84
   237  00037E  3F                 	db	63
   238  00037F  73                 	db	115
   239  000380  67                 	db	103
   240  000381  50                 	db	80
   241  000382  6D                 	db	109
   242  000383  78                 	db	120
   243  000384  3E                 	db	62
   244  000385  1C                 	db	28
   245  000386  2A                 	db	42
   246  000387  76                 	db	118
   247  000388  5B                 	db	91
   248  000389  6E                 	db	110
   249  00038A  00                 	db	0
   250  00038B                     __end_of_LCDLetters:
   251                           	opt stack 0
   252  00038B                     _station:
   253                           	opt stack 0
   254  00038B  036B               	dw	875
   255  00038D  0371               	dw	881
   256  00038F  0387               	dw	903
   257  000391  03C4               	dw	964
   258  000393  0416               	dw	1046
   259  000395  0469               	dw	1129
   260  000397                     __end_of_station:
   261                           	opt stack 0
   262  000397                     _segData:
   263                           	opt stack 0
   264  000397  3F                 	db	63
   265  000398  06                 	db	6
   266  000399  5B                 	db	91
   267  00039A  4F                 	db	79
   268  00039B  66                 	db	102
   269  00039C  6D                 	db	109
   270  00039D  7D                 	db	125
   271  00039E  07                 	db	7
   272  00039F  7F                 	db	127
   273  0003A0  6F                 	db	111
   274  0003A1                     __end_of_segData:
   275                           	opt stack 0
   276  0000                     _ADCON1	set	4033
   277  0000                     _INTCONbits	set	4082
   278  0000                     _LCDCON	set	3929
   279  0000                     _LCDDATA1	set	3937
   280  0000                     _LCDDATA2	set	3938
   281  0000                     _LCDDATA3	set	3939
   282  0000                     _LCDPS	set	3928
   283  0000                     _LCDSE0	set	3930
   284  0000                     _LCDSE1	set	3931
   285  0000                     _LCDSE2	set	3932
   286  0000                     _LCDSE3	set	3933
   287  0000                     _OSCCON	set	4051
   288  0000                     _PIR1bits	set	3998
   289  0000                     _PORTA	set	3968
   290  0000                     _PORTB	set	3969
   291  0000                     _PORTC	set	3970
   292  0000                     _PORTG	set	3974
   293  0000                     _SSPADD	set	4040
   294  0000                     _SSPBUF	set	4041
   295  0000                     _SSPCON1	set	4038
   296  0000                     _SSPCON1bits	set	4038
   297  0000                     _SSPCON2	set	4037
   298  0000                     _SSPCON2bits	set	4037
   299  0000                     _SSPSTAT	set	4039
   300  0000                     _SSPSTATbits	set	4039
   301  0000                     _T0CON	set	4053
   302  0000                     _T0CONbits	set	4053
   303  0000                     _TMR0H	set	4055
   304  0000                     _TMR0L	set	4054
   305  0000                     _TRISA	set	3986
   306  0000                     _TRISB	set	3987
   307  0000                     _TRISC	set	3988
   308  0000                     _TRISCbits	set	3988
   309  0000                     _TRISG	set	3992
   310  0000                     _LCDDATA0	set	3936
   311                           
   312                           ; #config settings
   313  0003A1  00                 	db	0	; dummy byte at the end
   314  0000                     
   315                           	psect	cinit
   316  00138A                     __pcinit:
   317                           	opt stack 0
   318  00138A                     start_initialization:
   319                           	opt stack 0
   320  00138A                     __initialization:
   321                           	opt stack 0
   322                           
   323                           ; Clear objects allocated to BANK0 (36 bytes)
   324  00138A  EE00  F0BA         	lfsr	0,__pbssBANK0
   325  00138E  0E24               	movlw	36
   326  001390                     clear_0:
   327  001390  6AEE               	clrf	postinc0,c
   328  001392  06E8               	decf	wreg,f,c
   329  001394  E1FD               	bnz	clear_0
   330                           
   331                           ; Clear objects allocated to COMRAM (3 bytes)
   332  001396  6A42               	clrf	(__pbssCOMRAM+2)& (0+255),c
   333  001398  6A41               	clrf	(__pbssCOMRAM+1)& (0+255),c
   334  00139A  6A40               	clrf	__pbssCOMRAM& (0+255),c
   335                           
   336                           ; Initialize objects allocated to BANK0 (90 bytes)
   337                           ; load TBLPTR registers with __pidataBANK0
   338  00139C  0EE6               	movlw	low __pidataBANK0
   339  00139E  6EF6               	movwf	tblptrl,c
   340  0013A0  0E13               	movlw	high __pidataBANK0
   341  0013A2  6EF7               	movwf	tblptrh,c
   342  0013A4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   343  0013A6  6EF8               	movwf	tblptru,c
   344  0013A8  EE00  F060         	lfsr	0,__pdataBANK0
   345  0013AC  EE10 F05A          	lfsr	1,90
   346  0013B0                     copy_data0:
   347  0013B0  0009               	tblrd		*+
   348  0013B2  CFF5 FFEE          	movff	tablat,postinc0
   349  0013B6  50E5               	movf	postdec1,w,c
   350  0013B8  50E1               	movf	fsr1l,w,c
   351  0013BA  E1FA               	bnz	copy_data0
   352                           
   353                           ; Initialize objects allocated to COMRAM (6 bytes)
   354                           ; load TBLPTR registers with __pidataCOMRAM
   355  0013BC  0E02               	movlw	low __pidataCOMRAM
   356  0013BE  6EF6               	movwf	tblptrl,c
   357  0013C0  0E17               	movlw	high __pidataCOMRAM
   358  0013C2  6EF7               	movwf	tblptrh,c
   359  0013C4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   360  0013C6  6EF8               	movwf	tblptru,c
   361  0013C8  EE00  F03A         	lfsr	0,__pdataCOMRAM
   362  0013CC  EE10 F006          	lfsr	1,6
   363  0013D0                     copy_data1:
   364  0013D0  0009               	tblrd		*+
   365  0013D2  CFF5 FFEE          	movff	tablat,postinc0
   366  0013D6  50E5               	movf	postdec1,w,c
   367  0013D8  50E1               	movf	fsr1l,w,c
   368  0013DA  E1FA               	bnz	copy_data1
   369  0013DC                     end_of_initialization:
   370                           	opt stack 0
   371  0013DC                     __end_of__initialization:
   372                           	opt stack 0
   373  0013DC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   374  0013DE  6EF8               	movwf	tblptru,c
   375  0013E0  0100               	movlb	0
   376  0013E2  EFD1  F001         	goto	_main	;jump to C main() function
   377                           tblptru	equ	0xFF8
   378                           tblptrh	equ	0xFF7
   379                           tblptrl	equ	0xFF6
   380                           tablat	equ	0xFF5
   381                           postinc0	equ	0xFEE
   382                           wreg	equ	0xFE8
   383                           postdec1	equ	0xFE5
   384                           fsr1l	equ	0xFE1
   385                           
   386                           	psect	bssCOMRAM
   387  000040                     __pbssCOMRAM:
   388                           	opt stack 0
   389  000040                     displayText@F5975:
   390                           	opt stack 0
   391  000040                     	ds	3
   392                           tblptru	equ	0xFF8
   393                           tblptrh	equ	0xFF7
   394                           tblptrl	equ	0xFF6
   395                           tablat	equ	0xFF5
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           postdec1	equ	0xFE5
   399                           fsr1l	equ	0xFE1
   400                           
   401                           	psect	dataCOMRAM
   402  00003A                     __pdataCOMRAM:
   403                           	opt stack 0
   404  00003A                     main@F5991:
   405                           	opt stack 0
   406  00003A                     	ds	6
   407                           tblptru	equ	0xFF8
   408                           tblptrh	equ	0xFF7
   409                           tblptrl	equ	0xFF6
   410                           tablat	equ	0xFF5
   411                           postinc0	equ	0xFEE
   412                           wreg	equ	0xFE8
   413                           postdec1	equ	0xFE5
   414                           fsr1l	equ	0xFE1
   415                           
   416                           	psect	bssBANK0
   417  0000BA                     __pbssBANK0:
   418                           	opt stack 0
   419  0000BA                     _regImg:
   420                           	opt stack 0
   421  0000BA                     	ds	36
   422                           tblptru	equ	0xFF8
   423                           tblptrh	equ	0xFF7
   424                           tblptrl	equ	0xFF6
   425                           tablat	equ	0xFF5
   426                           postinc0	equ	0xFEE
   427                           wreg	equ	0xFE8
   428                           postdec1	equ	0xFE5
   429                           fsr1l	equ	0xFE1
   430                           
   431                           	psect	dataBANK0
   432  000060                     __pdataBANK0:
   433                           	opt stack 0
   434  000060                     _stationName:
   435                           	opt stack 0
   436  000060                     	ds	90
   437                           tblptru	equ	0xFF8
   438                           tblptrh	equ	0xFF7
   439                           tblptrl	equ	0xFF6
   440                           tablat	equ	0xFF5
   441                           postinc0	equ	0xFEE
   442                           wreg	equ	0xFE8
   443                           postdec1	equ	0xFE5
   444                           fsr1l	equ	0xFE1
   445                           
   446                           	psect	cstackCOMRAM
   447  000001                     __pcstackCOMRAM:
   448                           	opt stack 0
   449  000001                     ?_OpenI2C:
   450                           	opt stack 0
   451  000001                     ?_dly:
   452                           	opt stack 0
   453  000001                     ?_setscn:
   454                           	opt stack 0
   455  000001                     ?_segWrt:
   456                           	opt stack 0
   457  000001                     ?_charWrt:
   458                           	opt stack 0
   459  000001                     ?_testPinState:
   460                           	opt stack 0
   461  000001                     ?_WriteI2C:
   462                           	opt stack 0
   463  000001                     ?___lwdiv:
   464                           	opt stack 0
   465  000001                     testPinState@oldPin:
   466                           	opt stack 0
   467  000001                     setscn@state:
   468                           	opt stack 0
   469  000001                     segWrt@segOrd:
   470                           	opt stack 0
   471  000001                     charWrt@numToDisp:
   472                           	opt stack 0
   473  000001                     OpenI2C@sync_mode:
   474                           	opt stack 0
   475  000001                     WriteI2C@data_out:
   476                           	opt stack 0
   477  000001                     dly@d:
   478                           	opt stack 0
   479  000001                     ___lwdiv@dividend:
   480                           	opt stack 0
   481                           
   482                           ; 2 bytes @ 0x0
   483  000001                     	ds	1
   484  000002                     ??_setscn:
   485  000002                     ?_FMwrite:
   486                           	opt stack 0
   487  000002                     ?_FMread:
   488                           	opt stack 0
   489  000002                     testPinState@newPin:
   490                           	opt stack 0
   491  000002                     segWrt@state:
   492                           	opt stack 0
   493  000002                     charWrt@DigitNo:
   494                           	opt stack 0
   495  000002                     FMwrite@adr:
   496                           	opt stack 0
   497  000002                     FMread@regAddr:
   498                           	opt stack 0
   499  000002                     OpenI2C@slew:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x1
   503  000002                     	ds	1
   504  000003                     ??_Init:
   505  000003                     ??_segWrt:
   506  000003                     ??_FMwrite:
   507  000003                     setscn@data:
   508                           	opt stack 0
   509  000003                     testPinState@butn:
   510                           	opt stack 0
   511  000003                     dly@i:
   512                           	opt stack 0
   513  000003                     FMread@data:
   514                           	opt stack 0
   515  000003                     ___lwdiv@divisor:
   516                           	opt stack 0
   517                           
   518                           ; 2 bytes @ 0x2
   519  000003                     	ds	1
   520  000004                     ?_showVol:
   521                           	opt stack 0
   522  000004                     ?_showChan:
   523                           	opt stack 0
   524  000004                     showVol@volume:
   525                           	opt stack 0
   526  000004                     showChan@channel:
   527                           	opt stack 0
   528                           
   529                           ; 2 bytes @ 0x3
   530  000004                     	ds	1
   531  000005                     ??_FMread:
   532  000005                     ??___lwdiv:
   533  000005                     ?_butnEvent:
   534                           	opt stack 0
   535  000005                     FMwrite@firstByt:
   536                           	opt stack 0
   537  000005                     butnEvent@butn:
   538                           	opt stack 0
   539  000005                     segWrt@LCReg:
   540                           	opt stack 0
   541                           
   542                           ; 2 bytes @ 0x4
   543  000005                     	ds	1
   544  000006                     ??_showVol:
   545  000006                     ??_showChan:
   546  000006                     FMwrite@secndByt:
   547                           	opt stack 0
   548  000006                     ___lwdiv@quotient:
   549                           	opt stack 0
   550                           
   551                           ; 2 bytes @ 0x5
   552  000006                     	ds	1
   553  000007                     ?_volSet:
   554                           	opt stack 0
   555  000007                     butnEvent@oldPin:
   556                           	opt stack 0
   557  000007                     segWrt@bitSelect:
   558                           	opt stack 0
   559  000007                     volSet@vol:
   560                           	opt stack 0
   561                           
   562                           ; 2 bytes @ 0x6
   563  000007                     	ds	1
   564  000008                     butnEvent@newPin:
   565                           	opt stack 0
   566  000008                     ___lwdiv@counter:
   567                           	opt stack 0
   568                           
   569                           ; 1 bytes @ 0x7
   570  000008                     	ds	1
   571  000009                     ?___wmul:
   572                           	opt stack 0
   573  000009                     butnEvent@returnVal:
   574                           	opt stack 0
   575  000009                     volSet@dir:
   576                           	opt stack 0
   577  000009                     ___wmul@multiplier:
   578                           	opt stack 0
   579                           
   580                           ; 2 bytes @ 0x8
   581  000009                     	ds	1
   582  00000A                     ??_volSet:
   583                           
   584                           ; 0 bytes @ 0x9
   585  00000A                     	ds	1
   586  00000B                     FMread@firstByt:
   587                           	opt stack 0
   588  00000B                     ___wmul@multiplicand:
   589                           	opt stack 0
   590                           
   591                           ; 2 bytes @ 0xA
   592  00000B                     	ds	1
   593  00000C                     FMread@secndByt:
   594                           	opt stack 0
   595                           
   596                           ; 1 bytes @ 0xB
   597  00000C                     	ds	1
   598  00000D                     ?_FMready:
   599                           	opt stack 0
   600  00000D                     ?_FMvers:
   601                           	opt stack 0
   602  00000D                     FMready@rdy:
   603                           	opt stack 0
   604  00000D                     FMvers@vsn:
   605                           	opt stack 0
   606  00000D                     ___wmul@product:
   607                           	opt stack 0
   608                           
   609                           ; 2 bytes @ 0xC
   610  00000D                     	ds	2
   611  00000F                     ??_FMready:
   612  00000F                     ??_FMvers:
   613  00000F                     ?_showFreq:
   614                           	opt stack 0
   615  00000F                     ?_displayText:
   616                           	opt stack 0
   617  00000F                     showFreq@frequency:
   618                           	opt stack 0
   619  00000F                     displayText@str:
   620                           	opt stack 0
   621                           
   622                           ; 2 bytes @ 0xE
   623  00000F                     	ds	2
   624  000011                     ??_showFreq:
   625  000011                     FMready@sts:
   626                           	opt stack 0
   627  000011                     displayText@pos:
   628                           	opt stack 0
   629                           
   630                           ; 2 bytes @ 0x10
   631  000011                     	ds	2
   632  000013                     ??_FMinit:
   633  000013                     ??_displayText:
   634  000013                     ?_FMfrequenc:
   635                           	opt stack 0
   636  000013                     ?_setScan:
   637                           	opt stack 0
   638  000013                     setScan@dir:
   639                           	opt stack 0
   640  000013                     FMfrequenc@f:
   641                           	opt stack 0
   642  000013                     showFreq@display:
   643                           	opt stack 0
   644                           
   645                           ; 3 bytes @ 0x12
   646  000013                     	ds	2
   647  000015                     ??_FMfrequenc:
   648  000015                     ??_setScan:
   649  000015                     FMinit@dat:
   650                           	opt stack 0
   651                           
   652                           ; 2 bytes @ 0x14
   653  000015                     	ds	2
   654  000017                     FMinit@ad:
   655                           	opt stack 0
   656  000017                     FMfrequenc@cn:
   657                           	opt stack 0
   658  000017                     setScan@dat:
   659                           	opt stack 0
   660                           
   661                           ; 2 bytes @ 0x16
   662  000017                     	ds	1
   663  000018                     displayText@display:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x17
   667  000018                     	ds	1
   668  000019                     FMfrequenc@dat:
   669                           	opt stack 0
   670  000019                     setScan@chanRgstr:
   671                           	opt stack 0
   672                           
   673                           ; 2 bytes @ 0x18
   674  000019                     	ds	2
   675  00001B                     ?_manualTune:
   676                           	opt stack 0
   677  00001B                     ?_nextChan:
   678                           	opt stack 0
   679  00001B                     displayText@flag:
   680                           	opt stack 0
   681  00001B                     manualTune@freq:
   682                           	opt stack 0
   683  00001B                     nextChan@chan:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x1A
   687  00001B                     	ds	1
   688  00001C                     displayText@i:
   689                           	opt stack 0
   690                           
   691                           ; 2 bytes @ 0x1B
   692  00001C                     	ds	1
   693  00001D                     manualTune@dir:
   694                           	opt stack 0
   695  00001D                     nextChan@dir:
   696                           	opt stack 0
   697                           
   698                           ; 1 bytes @ 0x1C
   699  00001D                     	ds	1
   700  00001E                     ??_nextChan:
   701                           
   702                           ; 0 bytes @ 0x1D
   703  00001E                     	ds	2
   704  000020                     ??_main:
   705                           
   706                           ; 0 bytes @ 0x1F
   707  000020                     	ds	2
   708  000022                     main@welcomeMessage:
   709                           	opt stack 0
   710                           
   711                           ; 6 bytes @ 0x21
   712  000022                     	ds	6
   713  000028                     main@evt:
   714                           	opt stack 0
   715                           
   716                           ; 1 bytes @ 0x27
   717  000028                     	ds	1
   718  000029                     main@charDispCtr:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x28
   722  000029                     	ds	2
   723  00002B                     main@counter:
   724                           	opt stack 0
   725                           
   726                           ; 2 bytes @ 0x2A
   727  00002B                     	ds	2
   728  00002D                     main@toggle:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x2C
   732  00002D                     	ds	1
   733  00002E                     main@ui:
   734                           	opt stack 0
   735                           
   736                           ; 2 bytes @ 0x2D
   737  00002E                     	ds	2
   738  000030                     main@btn:
   739                           	opt stack 0
   740                           
   741                           ; 1 bytes @ 0x2F
   742  000030                     	ds	1
   743  000031                     main@disp:
   744                           	opt stack 0
   745                           
   746                           ; 1 bytes @ 0x30
   747  000031                     	ds	1
   748  000032                     main@freq:
   749                           	opt stack 0
   750                           
   751                           ; 2 bytes @ 0x31
   752  000032                     	ds	2
   753  000034                     main@dispOfst:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x33
   757  000034                     	ds	2
   758  000036                     main@chan:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x35
   762  000036                     	ds	2
   763  000038                     main@vol:
   764                           	opt stack 0
   765                           
   766                           ; 2 bytes @ 0x37
   767  000038                     	ds	2
   768                           tblptru	equ	0xFF8
   769                           tblptrh	equ	0xFF7
   770                           tblptrl	equ	0xFF6
   771                           tablat	equ	0xFF5
   772                           postinc0	equ	0xFEE
   773                           wreg	equ	0xFE8
   774                           postdec1	equ	0xFE5
   775                           fsr1l	equ	0xFE1
   776                           
   777 ;;
   778 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   779 ;;
   780 ;; *************** function _main *****************
   781 ;; Defined at:
   782 ;;		line 929 in file "main.c"
   783 ;; Parameters:    Size  Location     Type
   784 ;;		None
   785 ;; Auto vars:     Size  Location     Type
   786 ;;  welcomeMessa    6   33[COMRAM] unsigned char [6]
   787 ;;  vol             2   55[COMRAM] unsigned int 
   788 ;;  chan            2   53[COMRAM] unsigned int 
   789 ;;  dispOfst        2   51[COMRAM] int 
   790 ;;  freq            2   49[COMRAM] unsigned int 
   791 ;;  ui              2   45[COMRAM] unsigned int 
   792 ;;  counter         2   42[COMRAM] unsigned int 
   793 ;;  charDispCtr     2   40[COMRAM] unsigned int 
   794 ;;  disp            1   48[COMRAM] unsigned char 
   795 ;;  btn             1   47[COMRAM] unsigned char 
   796 ;;  toggle          1   44[COMRAM] unsigned char 
   797 ;;  evt             1   39[COMRAM] unsigned char 
   798 ;; Return value:  Size  Location     Type
   799 ;;		None               void
   800 ;; Registers used:
   801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   802 ;; Tracked objects:
   803 ;;		On entry : 0/0
   804 ;;		On exit  : 0/0
   805 ;;		Unchanged: 0/0
   806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
   807 ;;      Params:         0       0       0       0
   808 ;;      Locals:        24       0       0       0
   809 ;;      Temps:          2       0       0       0
   810 ;;      Totals:        26       0       0       0
   811 ;;Total ram usage:       26 bytes
   812 ;; Hardware stack levels required when called:    6
   813 ;; This function calls:
   814 ;;		_butnEvent
   815 ;;		_dly
   816 ;;		_Init
   817 ;;		_errfm
   818 ;;		_manualTune
   819 ;;		_FMfrequenc
   820 ;;		_FMinit
   821 ;;		_FMvers
   822 ;;		_volSet
   823 ;;		_nextChan
   824 ;;		_showFreq
   825 ;;		_showVol
   826 ;;		_showChan
   827 ;;		_setScan
   828 ;;		_displayText
   829 ;;		___wmul
   830 ;; This function is called by:
   831 ;;		Startup code after reset
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           	psect	text0
   836  0003A2                     __ptext0:
   837                           	opt stack 0
   838  0003A2                     _main:
   839                           	opt stack 24
   840                           
   841                           ;main.c: 931: unsigned char btn = 0b00000000;
   842                           
   843                           ;incstack = 0
   844                           ;incstack = 0
   845  0003A2  6E20               	movwf	??_main& (0+255),c
   846  0003A4  0E00               	movlw	0
   847  0003A6  6E30               	movwf	main@btn,c
   848  0003A8  5020               	movf	??_main& (0+255),w,c
   849                           
   850                           ;main.c: 932: unsigned char evt;
   851                           ;main.c: 933: unsigned int ui;
   852                           ;main.c: 934: unsigned int freq = 875;
   853  0003AA  0E03               	movlw	3
   854  0003AC  6E33               	movwf	main@freq+1,c
   855  0003AE  0E6B               	movlw	107
   856  0003B0  6E32               	movwf	main@freq,c
   857                           
   858                           ;main.c: 935: unsigned int vol = 11;
   859  0003B2  0E00               	movlw	0
   860  0003B4  6E39               	movwf	main@vol+1,c
   861  0003B6  0E0B               	movlw	11
   862  0003B8  6E38               	movwf	main@vol,c
   863                           
   864                           ;main.c: 936: unsigned int chan = 0;
   865  0003BA  0E00               	movlw	0
   866  0003BC  6E37               	movwf	main@chan+1,c
   867  0003BE  0E00               	movlw	0
   868  0003C0  6E36               	movwf	main@chan,c
   869                           
   870                           ;main.c: 937: unsigned int counter = 0;
   871  0003C2  0E00               	movlw	0
   872  0003C4  6E2C               	movwf	main@counter+1,c
   873  0003C6  0E00               	movlw	0
   874  0003C8  6E2B               	movwf	main@counter,c
   875                           
   876                           ;main.c: 938: unsigned int charDispCtr = 60;
   877  0003CA  0E00               	movlw	0
   878  0003CC  6E2A               	movwf	main@charDispCtr+1,c
   879  0003CE  0E3C               	movlw	60
   880  0003D0  6E29               	movwf	main@charDispCtr,c
   881                           
   882                           ;main.c: 939: unsigned char toggle = 0;
   883  0003D2  6E20               	movwf	??_main& (0+255),c
   884  0003D4  0E00               	movlw	0
   885  0003D6  6E2D               	movwf	main@toggle,c
   886  0003D8  5020               	movf	??_main& (0+255),w,c
   887                           
   888                           ;main.c: 941: unsigned char disp = 'F';
   889  0003DA  6E20               	movwf	??_main& (0+255),c
   890  0003DC  0E46               	movlw	70
   891  0003DE  6E31               	movwf	main@disp,c
   892  0003E0  5020               	movf	??_main& (0+255),w,c
   893                           
   894                           ;main.c: 943: dly(20);
   895  0003E2  0E00               	movlw	0
   896  0003E4  6E02               	movwf	?_dly+1,c
   897  0003E6  0E14               	movlw	20
   898  0003E8  6E01               	movwf	?_dly,c
   899  0003EA  EC00  F00B         	call	_dly	;wreg free
   900                           
   901                           ;main.c: 944: Init();
   902  0003EE  EC58  F009         	call	_Init	;wreg free
   903                           
   904                           ;main.c: 957: char welcomeMessage[] = "HELLO";
   905  0003F2  EE20  F03A         	lfsr	2,main@F5991
   906  0003F6  EE10  F022         	lfsr	1,main@welcomeMessage
   907  0003FA  0E06               	movlw	6
   908  0003FC                     u1611:
   909  0003FC  CFDE FFE6          	movff	postinc2,postinc1
   910  000400  2EE8               	decfsz	wreg,f,c
   911  000402  D7FC               	goto	u1611
   912                           
   913                           ;main.c: 959: int dispOfst;
   914                           ;main.c: 960: for(dispOfst=0; dispOfst<6; dispOfst++)
   915  000404  0E00               	movlw	0
   916  000406  6E35               	movwf	main@dispOfst+1,c
   917  000408  0E00               	movlw	0
   918  00040A  6E34               	movwf	main@dispOfst,c
   919  00040C  5035               	movf	main@dispOfst+1,w,c
   920  00040E  0A80               	xorlw	128
   921  000410  0F80               	addlw	-128
   922  000412  0E06               	movlw	6
   923  000414  B4D8               	btfsc	status,2,c
   924  000416  5C34               	subwf	main@dispOfst,w,c
   925  000418  B0D8               	btfsc	status,0,c
   926  00041A  D013               	goto	l2643
   927                           
   928                           ;main.c: 961: {
   929                           ;main.c: 962: displayText(welcomeMessage, dispOfst);
   930  00041C  0E00               	movlw	high main@welcomeMessage
   931  00041E  6E10               	movwf	?_displayText+1,c
   932  000420  0E22               	movlw	low main@welcomeMessage
   933  000422  6E0F               	movwf	?_displayText,c
   934  000424  C034  F011         	movff	main@dispOfst,?_displayText+2
   935  000428  C035  F012         	movff	main@dispOfst+1,?_displayText+3
   936  00042C  ECB3  F006         	call	_displayText	;wreg free
   937                           
   938                           ;main.c: 963: dly(1000);
   939  000430  0E03               	movlw	3
   940  000432  6E02               	movwf	?_dly+1,c
   941  000434  0EE8               	movlw	232
   942  000436  6E01               	movwf	?_dly,c
   943  000438  EC00  F00B         	call	_dly	;wreg free
   944  00043C  4A34               	infsnz	main@dispOfst,f,c
   945  00043E  2A35               	incf	main@dispOfst+1,f,c
   946  000440  D7E5               	goto	L1
   947  000442                     l2643:
   948                           
   949                           ;main.c: 964: }
   950                           ;main.c: 967: FMvers(&ui);
   951  000442  0E00               	movlw	high main@ui
   952  000444  6E0E               	movwf	?_FMvers+1,c
   953  000446  0E2E               	movlw	low main@ui
   954  000448  6E0D               	movwf	?_FMvers,c
   955  00044A  EC69  F00B         	call	_FMvers	;wreg free
   956                           
   957                           ;main.c: 968: if (ui != 0x1010)
   958  00044E  502F               	movf	main@ui+1,w,c
   959  000450  0A10               	xorlw	16
   960  000452  0E10               	movlw	16
   961  000454  B4D8               	btfsc	status,2,c
   962  000456  182E               	xorwf	main@ui,w,c
   963  000458  A4D8               	btfss	status,2,c
   964                           
   965                           ;main.c: 969: errfm();
   966  00045A  EC74  F00B         	call	_errfm	;wreg free
   967                           
   968                           ;main.c: 970: if (FMinit() != 0)
   969  00045E  ECA7  F007         	call	_FMinit	;wreg free
   970  000462  0900               	iorlw	0
   971  000464  A4D8               	btfss	status,2,c
   972                           
   973                           ;main.c: 971: errfm();
   974  000466  EC74  F00B         	call	_errfm	;wreg free
   975                           
   976                           ;main.c: 973: FMfrequenc(freq);
   977  00046A  C032  F013         	movff	main@freq,?_FMfrequenc
   978  00046E  C033  F014         	movff	main@freq+1,?_FMfrequenc+1
   979  000472  EC15  F009         	call	_FMfrequenc	;wreg free
   980                           
   981                           ;main.c: 976: vol=volSet(vol,0);
   982  000476  C038  F007         	movff	main@vol,?_volSet
   983  00047A  C039  F008         	movff	main@vol+1,?_volSet+1
   984  00047E  6E20               	movwf	??_main& (0+255),c
   985  000480  0E00               	movlw	0
   986  000482  6E09               	movwf	?_volSet+2,c
   987  000484  5020               	movf	??_main& (0+255),w,c
   988  000486  EC65  F005         	call	_volSet	;wreg free
   989  00048A                     L8:
   990  00048A  C007  F038         	movff	?_volSet,main@vol
   991  00048E  C008  F039         	movff	?_volSet+1,main@vol+1
   992  000492                     l2657:
   993                           
   994                           ;main.c: 979: dly(20);
   995  000492  0E00               	movlw	0
   996  000494  6E02               	movwf	?_dly+1,c
   997  000496  0E14               	movlw	20
   998  000498  6E01               	movwf	?_dly,c
   999  00049A  EC00  F00B         	call	_dly	;wreg free
  1000                           
  1001                           ;main.c: 981: switch(disp)
  1002  00049E  D049               	goto	l2681
  1003  0004A0                     l2659:
  1004                           
  1005                           ;main.c: 984: showFreq(freq);
  1006  0004A0  C032  F00F         	movff	main@freq,?_showFreq
  1007  0004A4  C033  F010         	movff	main@freq+1,?_showFreq+1
  1008  0004A8  EC27  F006         	call	_showFreq	;wreg free
  1009                           
  1010                           ;main.c: 985: break;
  1011  0004AC  D050               	goto	l2683
  1012  0004AE                     l2661:
  1013                           
  1014                           ;main.c: 988: showChan(chan);
  1015  0004AE  C036  F004         	movff	main@chan,?_showChan
  1016  0004B2  C037  F005         	movff	main@chan+1,?_showChan+1
  1017  0004B6  EC3E  F00B         	call	_showChan	;wreg free
  1018                           
  1019                           ;main.c: 989: break;
  1020  0004BA  D049               	goto	l2683
  1021  0004BC                     l2663:
  1022                           
  1023                           ;main.c: 992: showVol(vol);
  1024  0004BC  C038  F004         	movff	main@vol,?_showVol
  1025  0004C0  C039  F005         	movff	main@vol+1,?_showVol+1
  1026  0004C4  ECC0  F00A         	call	_showVol	;wreg free
  1027                           
  1028                           ;main.c: 993: break;
  1029  0004C8  D042               	goto	l2683
  1030  0004CA                     l2665:
  1031                           
  1032                           ;main.c: 996: if(charDispCtr == 0)
  1033  0004CA  502A               	movf	main@charDispCtr+1,w,c
  1034  0004CC  1029               	iorwf	main@charDispCtr,w,c
  1035  0004CE  A4D8               	btfss	status,2,c
  1036  0004D0  D029               	goto	l2675
  1037                           
  1038                           ;main.c: 997: {
  1039                           ;main.c: 998: dispOfst = displayText(stationName[chan],dispOfst);
  1040  0004D2  C036  F009         	movff	main@chan,?___wmul
  1041  0004D6  C037  F00A         	movff	main@chan+1,?___wmul+1
  1042  0004DA  0E00               	movlw	0
  1043  0004DC  6E0C               	movwf	?___wmul+3,c
  1044  0004DE  0E0F               	movlw	15
  1045  0004E0  6E0B               	movwf	?___wmul+2,c
  1046  0004E2  ECE3  F00A         	call	___wmul	;wreg free
  1047  0004E6  0100               	movlb	0	; () banked
  1048  0004E8  0E60               	movlw	low _stationName
  1049  0004EA  2409               	addwf	?___wmul,w,c
  1050  0004EC  6E0F               	movwf	?_displayText,c
  1051  0004EE  0100               	movlb	0	; () banked
  1052  0004F0  0E00               	movlw	high _stationName
  1053  0004F2  200A               	addwfc	?___wmul+1,w,c
  1054  0004F4  6E10               	movwf	?_displayText+1,c
  1055  0004F6  C034  F011         	movff	main@dispOfst,?_displayText+2
  1056  0004FA  C035  F012         	movff	main@dispOfst+1,?_displayText+3
  1057  0004FE  ECB3  F006         	call	_displayText	;wreg free
  1058  000502  C00F  F034         	movff	?_displayText,main@dispOfst
  1059  000506  C010  F035         	movff	?_displayText+1,main@dispOfst+1
  1060                           
  1061                           ;main.c: 999: charDispCtr = 60;
  1062  00050A  0E00               	movlw	0
  1063  00050C  6E2A               	movwf	main@charDispCtr+1,c
  1064  00050E  0E3C               	movlw	60
  1065  000510  6E29               	movwf	main@charDispCtr,c
  1066                           
  1067                           ;main.c: 1001: if(dispOfst == 0)
  1068  000512  5035               	movf	main@dispOfst+1,w,c
  1069  000514  1034               	iorwf	main@dispOfst,w,c
  1070  000516  A4D8               	btfss	status,2,c
  1071  000518  D01A               	goto	l2683
  1072                           
  1073                           ;main.c: 1002: disp = 'F';
  1074  00051A  6E20               	movwf	??_main& (0+255),c
  1075  00051C  0E46               	movlw	70
  1076  00051E  6E31               	movwf	main@disp,c
  1077  000520  5020               	movf	??_main& (0+255),w,c
  1078  000522  D015               	goto	l2683
  1079  000524                     l2675:
  1080                           
  1081                           ;main.c: 1004: else
  1082                           ;main.c: 1005: charDispCtr--;
  1083  000524  0629               	decf	main@charDispCtr,f,c
  1084  000526  A0D8               	btfss	status,0,c
  1085  000528  062A               	decf	main@charDispCtr+1,f,c
  1086  00052A  D011               	goto	l2683
  1087  00052C                     l2677:
  1088                           
  1089                           ;main.c: 1009: errfm();
  1090  00052C  EC74  F00B         	call	_errfm	;wreg free
  1091                           
  1092                           ;main.c: 1010: break;
  1093  000530  D00E               	goto	l2683
  1094  000532                     l2681:
  1095  000532  5031               	movf	main@disp,w,c
  1096                           
  1097                           ; Switch size 1, requested type "space"
  1098                           ; Number of cases is 4, Range of values is 67 to 86
  1099                           ; switch strategies available:
  1100                           ; Name         Instructions Cycles
  1101                           ; simple_byte           13     7 (average)
  1102                           ;	Chosen strategy is simple_byte
  1103  000534  0A43               	xorlw	67	; case 67
  1104  000536  B4D8               	btfsc	status,2,c
  1105  000538  D7BA               	goto	l2661
  1106  00053A  0A05               	xorlw	5	; case 70
  1107  00053C  B4D8               	btfsc	status,2,c
  1108  00053E  D7B0               	goto	l2659
  1109  000540  0A15               	xorlw	21	; case 83
  1110  000542  B4D8               	btfsc	status,2,c
  1111  000544  D7C2               	goto	l2665
  1112  000546  0A05               	xorlw	5	; case 86
  1113  000548  B4D8               	btfsc	status,2,c
  1114  00054A  D7B8               	goto	l2663
  1115  00054C  D7EF               	goto	l2677
  1116  00054E                     l2683:
  1117                           
  1118                           ;main.c: 1013: if (toggle == 1)
  1119  00054E  042D               	decf	main@toggle,w,c
  1120  000550  B4D8               	btfsc	status,2,c
  1121  000552  D00D               	goto	l2693
  1122  000554  D01B               	goto	l2697
  1123  000556                     l2687:
  1124                           
  1125                           ;main.c: 1018: counter = 2000;
  1126  000556  0E07               	movlw	7
  1127  000558  6E2C               	movwf	main@counter+1,c
  1128  00055A  0ED0               	movlw	208
  1129  00055C  D003               	goto	L2
  1130  00055E                     l2689:
  1131                           
  1132                           ;main.c: 1022: counter = 100;
  1133  00055E  0E00               	movlw	0
  1134  000560  6E2C               	movwf	main@counter+1,c
  1135  000562  0E64               	movlw	100
  1136  000564                     L2:
  1137  000564  6E2B               	movwf	main@counter,c
  1138                           
  1139                           ;main.c: 1023: break;
  1140  000566  D00E               	goto	l2695
  1141  000568                     l2691:
  1142                           
  1143                           ;main.c: 1026: errfm();
  1144  000568  EC74  F00B         	call	_errfm	;wreg free
  1145                           
  1146                           ;main.c: 1027: }
  1147  00056C  D00B               	goto	l2695
  1148  00056E                     l2693:
  1149  00056E  5031               	movf	main@disp,w,c
  1150                           
  1151                           ; Switch size 1, requested type "space"
  1152                           ; Number of cases is 3, Range of values is 67 to 86
  1153                           ; switch strategies available:
  1154                           ; Name         Instructions Cycles
  1155                           ; simple_byte           10     6 (average)
  1156                           ;	Chosen strategy is simple_byte
  1157  000570  0A43               	xorlw	67	; case 67
  1158  000572  B4D8               	btfsc	status,2,c
  1159  000574  D7F4               	goto	l2689
  1160  000576  0A10               	xorlw	16	; case 83
  1161  000578  B4D8               	btfsc	status,2,c
  1162  00057A  D7ED               	goto	l2687
  1163  00057C  0A05               	xorlw	5	; case 86
  1164  00057E  B4D8               	btfsc	status,2,c
  1165  000580  D7EE               	goto	l2689
  1166  000582  D7F2               	goto	l2691
  1167  000584                     l2695:
  1168                           
  1169                           ;main.c: 1028: toggle = 0;
  1170  000584  6E20               	movwf	??_main& (0+255),c
  1171  000586  0E00               	movlw	0
  1172  000588  6E2D               	movwf	main@toggle,c
  1173  00058A  D00B               	goto	L3
  1174  00058C                     l2697:
  1175                           
  1176                           ;main.c: 1030: else if (counter != 0)
  1177  00058C  502C               	movf	main@counter+1,w,c
  1178  00058E  102B               	iorwf	main@counter,w,c
  1179  000590  B4D8               	btfsc	status,2,c
  1180  000592  D004               	goto	l2701
  1181                           
  1182                           ;main.c: 1031: counter--;
  1183  000594  062B               	decf	main@counter,f,c
  1184  000596  A0D8               	btfss	status,0,c
  1185  000598  062C               	decf	main@counter+1,f,c
  1186  00059A  D004               	goto	l2703
  1187  00059C                     l2701:
  1188                           
  1189                           ;main.c: 1032: else
  1190                           ;main.c: 1033: disp = 'F';
  1191  00059C  6E20               	movwf	??_main& (0+255),c
  1192  00059E  0E46               	movlw	70
  1193  0005A0  6E31               	movwf	main@disp,c
  1194  0005A2                     L3:
  1195  0005A2  5020               	movf	??_main& (0+255),w,c
  1196  0005A4                     l2703:
  1197                           
  1198                           ;main.c: 1036: evt = butnEvent(&btn);
  1199  0005A4  0E00               	movlw	high main@btn
  1200  0005A6  6E06               	movwf	?_butnEvent+1,c
  1201  0005A8  0E30               	movlw	low main@btn
  1202  0005AA  6E05               	movwf	?_butnEvent,c
  1203  0005AC  ECB8  F003         	call	_butnEvent	;wreg free
  1204  0005B0  6E28               	movwf	main@evt,c
  1205                           
  1206                           ;main.c: 1037: if (evt == 1) switch (btn) {
  1207  0005B2  0428               	decf	main@evt,w,c
  1208  0005B4  B4D8               	btfsc	status,2,c
  1209  0005B6  D0C2               	goto	l2763
  1210  0005B8  D76C               	goto	l2657
  1211  0005BA                     l2709:
  1212                           
  1213                           ;main.c: 1039: chan=nextChan(chan, 1);
  1214  0005BA  C036  F01B         	movff	main@chan,?_nextChan
  1215  0005BE  C037  F01C         	movff	main@chan+1,?_nextChan+1
  1216  0005C2  6E20               	movwf	??_main& (0+255),c
  1217  0005C4  0E01               	movlw	1
  1218  0005C6  6E1D               	movwf	?_nextChan+2,c
  1219  0005C8  5020               	movf	??_main& (0+255),w,c
  1220  0005CA  EC2F  F007         	call	_nextChan	;wreg free
  1221  0005CE  D00A               	goto	L4
  1222  0005D0                     l2717:
  1223                           
  1224                           ;main.c: 1047: chan=nextChan(chan, 0);
  1225  0005D0  C036  F01B         	movff	main@chan,?_nextChan
  1226  0005D4  C037  F01C         	movff	main@chan+1,?_nextChan+1
  1227  0005D8  6E20               	movwf	??_main& (0+255),c
  1228  0005DA  0E00               	movlw	0
  1229  0005DC  6E1D               	movwf	?_nextChan+2,c
  1230  0005DE  5020               	movf	??_main& (0+255),w,c
  1231  0005E0  EC2F  F007         	call	_nextChan	;wreg free
  1232  0005E4                     L4:
  1233  0005E4  C01B  F036         	movff	?_nextChan,main@chan
  1234  0005E8  C01C  F037         	movff	?_nextChan+1,main@chan+1
  1235                           
  1236                           ;main.c: 1048: freq = station[chan];
  1237  0005EC  90D8               	bcf	status,0,c
  1238  0005EE  3436               	rlcf	main@chan,w,c
  1239  0005F0  6E20               	movwf	??_main& (0+255),c
  1240  0005F2  3437               	rlcf	main@chan+1,w,c
  1241  0005F4  6E21               	movwf	(??_main+1)& (0+255),c
  1242  0005F6  0E8B               	movlw	low _station
  1243  0005F8  2420               	addwf	??_main,w,c
  1244  0005FA  6EF6               	movwf	tblptrl,c
  1245  0005FC  0E03               	movlw	high _station
  1246  0005FE  2021               	addwfc	??_main+1,w,c
  1247  000600  6EF7               	movwf	tblptrh,c
  1248  000602  0009               	tblrd		*+
  1249  000604  CFF5 F032          	movff	tablat,main@freq
  1250  000608  000A               	tblrd		*-
  1251  00060A  CFF5 F033          	movff	tablat,main@freq+1
  1252                           
  1253                           ;main.c: 1049: disp = 'S';
  1254  00060E  6E20               	movwf	??_main& (0+255),c
  1255  000610  0E53               	movlw	83
  1256  000612  6E31               	movwf	main@disp,c
  1257  000614  5020               	movf	??_main& (0+255),w,c
  1258                           
  1259                           ;main.c: 1051: dispOfst = 0;
  1260  000616  0E00               	movlw	0
  1261  000618  6E35               	movwf	main@dispOfst+1,c
  1262  00061A  0E00               	movlw	0
  1263  00061C  6E34               	movwf	main@dispOfst,c
  1264                           
  1265                           ;main.c: 1052: break;
  1266  00061E  D739               	goto	l2657
  1267  000620                     l2725:
  1268                           
  1269                           ;main.c: 1055: freq=manualTune(freq,1);
  1270  000620  C032  F01B         	movff	main@freq,?_manualTune
  1271  000624  C033  F01C         	movff	main@freq+1,?_manualTune+1
  1272  000628  6E20               	movwf	??_main& (0+255),c
  1273  00062A  0E01               	movlw	1
  1274  00062C  6E1D               	movwf	?_manualTune+2,c
  1275  00062E  5020               	movf	??_main& (0+255),w,c
  1276  000630  ECCF  F008         	call	_manualTune	;wreg free
  1277  000634  D00A               	goto	L5
  1278  000636                     l2729:
  1279                           
  1280                           ;main.c: 1060: freq=manualTune(freq,0);
  1281  000636  C032  F01B         	movff	main@freq,?_manualTune
  1282  00063A  C033  F01C         	movff	main@freq+1,?_manualTune+1
  1283  00063E  6E20               	movwf	??_main& (0+255),c
  1284  000640  0E00               	movlw	0
  1285  000642  6E1D               	movwf	?_manualTune+2,c
  1286  000644  5020               	movf	??_main& (0+255),w,c
  1287  000646  ECCF  F008         	call	_manualTune	;wreg free
  1288  00064A                     L5:
  1289  00064A  C01B  F032         	movff	?_manualTune,main@freq
  1290  00064E  C01C  F033         	movff	?_manualTune+1,main@freq+1
  1291                           
  1292                           ;main.c: 1061: disp = 'F';
  1293  000652  6E20               	movwf	??_main& (0+255),c
  1294  000654  0E46               	movlw	70
  1295  000656  6E31               	movwf	main@disp,c
  1296  000658  D00B               	goto	L6
  1297  00065A                     l2733:
  1298                           
  1299                           ;main.c: 1065: vol=volSet(vol,1);
  1300  00065A  C038  F007         	movff	main@vol,?_volSet
  1301  00065E  C039  F008         	movff	main@vol+1,?_volSet+1
  1302  000662  6E20               	movwf	??_main& (0+255),c
  1303  000664  0E01               	movlw	1
  1304  000666  6E09               	movwf	?_volSet+2,c
  1305  000668  5020               	movf	??_main& (0+255),w,c
  1306  00066A  EC65  F005         	call	_volSet	;wreg free
  1307  00066E  D00C               	goto	L7
  1308  000670                     L6:
  1309  000670  5020               	movf	??_main& (0+255),w,c
  1310                           
  1311                           ;main.c: 1068: break;
  1312  000672  D70F               	goto	l2657
  1313  000674                     l2739:
  1314                           
  1315                           ;main.c: 1071: vol=volSet(vol,0);
  1316  000674  C038  F007         	movff	main@vol,?_volSet
  1317  000678  C039  F008         	movff	main@vol+1,?_volSet+1
  1318  00067C  6E20               	movwf	??_main& (0+255),c
  1319  00067E  0E00               	movlw	0
  1320  000680  6E09               	movwf	?_volSet+2,c
  1321  000682  5020               	movf	??_main& (0+255),w,c
  1322  000684  EC65  F005         	call	_volSet	;wreg free
  1323  000688                     L7:
  1324  000688  C007  F038         	movff	?_volSet,main@vol
  1325  00068C  C008  F039         	movff	?_volSet+1,main@vol+1
  1326                           
  1327                           ;main.c: 1072: disp = 'V';
  1328  000690  6E20               	movwf	??_main& (0+255),c
  1329  000692  0E56               	movlw	86
  1330  000694  6E31               	movwf	main@disp,c
  1331  000696  5020               	movf	??_main& (0+255),w,c
  1332                           
  1333                           ;main.c: 1073: toggle = 1;
  1334  000698  6E20               	movwf	??_main& (0+255),c
  1335  00069A  0E01               	movlw	1
  1336  00069C  6E2D               	movwf	main@toggle,c
  1337  00069E  D7E8               	goto	L6
  1338  0006A0                     l2745:
  1339                           
  1340                           ;main.c: 1082: freq = setScan(1);
  1341  0006A0  6E20               	movwf	??_main& (0+255),c
  1342  0006A2  0E01               	movlw	1
  1343  0006A4  6E13               	movwf	?_setScan,c
  1344  0006A6  5020               	movf	??_main& (0+255),w,c
  1345  0006A8  EC9E  F004         	call	_setScan	;wreg free
  1346  0006AC  C013  F032         	movff	?_setScan,main@freq
  1347  0006B0  C014  F033         	movff	?_setScan+1,main@freq+1
  1348                           
  1349                           ;main.c: 1083: disp = 'F';
  1350  0006B4  6E20               	movwf	??_main& (0+255),c
  1351  0006B6  0E46               	movlw	70
  1352  0006B8  6E31               	movwf	main@disp,c
  1353  0006BA  5020               	movf	??_main& (0+255),w,c
  1354                           
  1355                           ;main.c: 1085: vol = volSet(vol,1);
  1356  0006BC  C038  F007         	movff	main@vol,?_volSet
  1357  0006C0  C039  F008         	movff	main@vol+1,?_volSet+1
  1358  0006C4  6E20               	movwf	??_main& (0+255),c
  1359  0006C6  0E01               	movlw	1
  1360  0006C8  6E09               	movwf	?_volSet+2,c
  1361  0006CA  5020               	movf	??_main& (0+255),w,c
  1362  0006CC  EC65  F005         	call	_volSet	;wreg free
  1363  0006D0  C007  F038         	movff	?_volSet,main@vol
  1364  0006D4  C008  F039         	movff	?_volSet+1,main@vol+1
  1365                           
  1366                           ;main.c: 1086: vol = volSet(vol,0);
  1367  0006D8  C038  F007         	movff	main@vol,?_volSet
  1368  0006DC  C039  F008         	movff	main@vol+1,?_volSet+1
  1369  0006E0  6E20               	movwf	??_main& (0+255),c
  1370  0006E2  0E00               	movlw	0
  1371  0006E4  6E09               	movwf	?_volSet+2,c
  1372  0006E6  5020               	movf	??_main& (0+255),w,c
  1373  0006E8  EC65  F005         	call	_volSet	;wreg free
  1374  0006EC  D6CE               	goto	L8
  1375  0006EE                     l2753:
  1376                           
  1377                           ;main.c: 1091: freq = setScan(0);
  1378  0006EE  6E20               	movwf	??_main& (0+255),c
  1379  0006F0  0E00               	movlw	0
  1380  0006F2  6E13               	movwf	?_setScan,c
  1381  0006F4  5020               	movf	??_main& (0+255),w,c
  1382  0006F6  EC9E  F004         	call	_setScan	;wreg free
  1383  0006FA  C013  F032         	movff	?_setScan,main@freq
  1384  0006FE  C014  F033         	movff	?_setScan+1,main@freq+1
  1385                           
  1386                           ;main.c: 1092: disp = 'F';
  1387  000702  6E20               	movwf	??_main& (0+255),c
  1388  000704  0E46               	movlw	70
  1389  000706  6E31               	movwf	main@disp,c
  1390  000708  5020               	movf	??_main& (0+255),w,c
  1391                           
  1392                           ;main.c: 1094: vol = volSet(vol,1);
  1393  00070A  C038  F007         	movff	main@vol,?_volSet
  1394  00070E  C039  F008         	movff	main@vol+1,?_volSet+1
  1395  000712  6E20               	movwf	??_main& (0+255),c
  1396  000714  0E01               	movlw	1
  1397  000716  6E09               	movwf	?_volSet+2,c
  1398  000718  5020               	movf	??_main& (0+255),w,c
  1399  00071A  EC65  F005         	call	_volSet	;wreg free
  1400  00071E  C007  F038         	movff	?_volSet,main@vol
  1401  000722  C008  F039         	movff	?_volSet+1,main@vol+1
  1402                           
  1403                           ;main.c: 1095: vol = volSet(vol,0);
  1404  000726  C038  F007         	movff	main@vol,?_volSet
  1405  00072A  C039  F008         	movff	main@vol+1,?_volSet+1
  1406  00072E  6E20               	movwf	??_main& (0+255),c
  1407  000730  0E00               	movlw	0
  1408  000732  6E09               	movwf	?_volSet+2,c
  1409  000734  5020               	movf	??_main& (0+255),w,c
  1410  000736  EC65  F005         	call	_volSet	;wreg free
  1411  00073A  D6A7               	goto	L8
  1412  00073C                     l2763:
  1413  00073C  5030               	movf	main@btn,w,c
  1414                           
  1415                           ; Switch size 1, requested type "space"
  1416                           ; Number of cases is 8, Range of values is 1 to 128
  1417                           ; switch strategies available:
  1418                           ; Name         Instructions Cycles
  1419                           ; simple_byte           25    13 (average)
  1420                           ;	Chosen strategy is simple_byte
  1421  00073E  0A01               	xorlw	1	; case 1
  1422  000740  B4D8               	btfsc	status,2,c
  1423  000742  D7AE               	goto	l2745
  1424  000744  0A03               	xorlw	3	; case 2
  1425  000746  B4D8               	btfsc	status,2,c
  1426  000748  D738               	goto	l2709
  1427  00074A  0A06               	xorlw	6	; case 4
  1428  00074C  B4D8               	btfsc	status,2,c
  1429  00074E  D768               	goto	l2725
  1430  000750  0A0C               	xorlw	12	; case 8
  1431  000752  B4D8               	btfsc	status,2,c
  1432  000754  D782               	goto	l2733
  1433  000756  0A18               	xorlw	24	; case 16
  1434  000758  B4D8               	btfsc	status,2,c
  1435  00075A  D78C               	goto	l2739
  1436  00075C  0A30               	xorlw	48	; case 32
  1437  00075E  B4D8               	btfsc	status,2,c
  1438  000760  D76A               	goto	l2729
  1439  000762  0A60               	xorlw	96	; case 64
  1440  000764  B4D8               	btfsc	status,2,c
  1441  000766  D734               	goto	l2717
  1442  000768  0AC0               	xorlw	192	; case 128
  1443  00076A  B4D8               	btfsc	status,2,c
  1444  00076C  D7C0               	goto	l2753
  1445  00076E  D691               	goto	l2657
  1446  000770                     __end_of_main:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postinc1	equ	0xFE6
  1455                           postdec1	equ	0xFE5
  1456                           fsr1l	equ	0xFE1
  1457                           postinc2	equ	0xFDE
  1458                           status	equ	0xFD8
  1459                           
  1460 ;; *************** function _displayText *****************
  1461 ;; Defined at:
  1462 ;;		line 900 in file "main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  str             2   14[COMRAM] PTR unsigned char 
  1465 ;;		 -> stationName(90), main@welcomeMessage(6), 
  1466 ;;  pos             2   16[COMRAM] int 
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;  display         3   23[COMRAM] unsigned char [3]
  1469 ;;  i               2   27[COMRAM] int 
  1470 ;;  flag            1   26[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  2   14[COMRAM] int 
  1473 ;; Registers used:
  1474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1480 ;;      Params:         4       0       0       0
  1481 ;;      Locals:         6       0       0       0
  1482 ;;      Temps:          5       0       0       0
  1483 ;;      Totals:        15       0       0       0
  1484 ;;Total ram usage:       15 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    1
  1487 ;; This function calls:
  1488 ;;		_segWrt
  1489 ;; This function is called by:
  1490 ;;		_main
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text1
  1495  000D66                     __ptext1:
  1496                           	opt stack 0
  1497  000D66                     _displayText:
  1498                           	opt stack 28
  1499                           
  1500                           ;main.c: 901: unsigned char display[3] = {0x00,0x00,0x00};
  1501                           
  1502                           ;incstack = 0
  1503                           ;incstack = 0
  1504  000D66  C040  F018         	movff	displayText@F5975,displayText@display
  1505  000D6A  C041  F019         	movff	displayText@F5975+1,displayText@display+1
  1506  000D6E  C042  F01A         	movff	displayText@F5975+2,displayText@display+2
  1507                           
  1508                           ;main.c: 903: unsigned char flag = 0;
  1509  000D72  6E13               	movwf	??_displayText& (0+255),c
  1510  000D74  0E00               	movlw	0
  1511  000D76  6E1B               	movwf	displayText@flag,c
  1512  000D78  5013               	movf	??_displayText& (0+255),w,c
  1513                           
  1514                           ;main.c: 905: segWrt(24, 0);
  1515  000D7A  6E13               	movwf	??_displayText& (0+255),c
  1516  000D7C  0E18               	movlw	24
  1517  000D7E  6E01               	movwf	?_segWrt,c
  1518  000D80  5013               	movf	??_displayText& (0+255),w,c
  1519  000D82  6E14               	movwf	(??_displayText+1)& (0+255),c
  1520  000D84  0E00               	movlw	0
  1521  000D86  6E02               	movwf	?_segWrt+1,c
  1522  000D88  5014               	movf	(??_displayText+1)& (0+255),w,c
  1523  000D8A  EC94  F009         	call	_segWrt	;wreg free
  1524                           
  1525                           ;main.c: 907: int i;
  1526                           ;main.c: 908: for(i=0; (flag!= 1)&&(i<3); i++)
  1527  000D8E  0E00               	movlw	0
  1528  000D90  6E1D               	movwf	displayText@i+1,c
  1529  000D92  0E00               	movlw	0
  1530  000D94  6E1C               	movwf	displayText@i,c
  1531  000D96  D03D               	goto	l2329
  1532  000D98                     l2321:
  1533                           
  1534                           ;main.c: 909: {
  1535                           ;main.c: 911: if( str[pos +i] == '\0')
  1536  000D98  C011  F013         	movff	displayText@pos,??_displayText
  1537  000D9C  C012  F014         	movff	displayText@pos+1,??_displayText+1
  1538  000DA0  501C               	movf	displayText@i,w,c
  1539  000DA2  2613               	addwf	??_displayText,f,c
  1540  000DA4  501D               	movf	displayText@i+1,w,c
  1541  000DA6  2214               	addwfc	??_displayText+1,f,c
  1542  000DA8  5013               	movf	??_displayText,w,c
  1543  000DAA  240F               	addwf	displayText@str,w,c
  1544  000DAC  6ED9               	movwf	fsr2l,c
  1545  000DAE  5014               	movf	??_displayText+1,w,c
  1546  000DB0  2010               	addwfc	displayText@str+1,w,c
  1547  000DB2  6EDA               	movwf	fsr2h,c
  1548  000DB4  50DF               	movf	indf2,w,c
  1549  000DB6  A4D8               	btfss	status,2,c
  1550  000DB8  D005               	goto	l2325
  1551                           
  1552                           ;main.c: 912: flag = 1;
  1553  000DBA  6E13               	movwf	??_displayText& (0+255),c
  1554  000DBC  0E01               	movlw	1
  1555  000DBE  6E1B               	movwf	displayText@flag,c
  1556  000DC0  5013               	movf	??_displayText& (0+255),w,c
  1557  000DC2  D025               	goto	l2327
  1558  000DC4                     l2325:
  1559                           
  1560                           ;main.c: 913: else
  1561                           ;main.c: 914: display[i] = LCDLetters[ str[pos +i] - 'A'];
  1562  000DC4  C011  F013         	movff	displayText@pos,??_displayText
  1563  000DC8  C012  F014         	movff	displayText@pos+1,??_displayText+1
  1564  000DCC  501C               	movf	displayText@i,w,c
  1565  000DCE  2613               	addwf	??_displayText,f,c
  1566  000DD0  501D               	movf	displayText@i+1,w,c
  1567  000DD2  2214               	addwfc	??_displayText+1,f,c
  1568  000DD4  5013               	movf	??_displayText,w,c
  1569  000DD6  240F               	addwf	displayText@str,w,c
  1570  000DD8  6ED9               	movwf	fsr2l,c
  1571  000DDA  5014               	movf	??_displayText+1,w,c
  1572  000DDC  2010               	addwfc	displayText@str+1,w,c
  1573  000DDE  6EDA               	movwf	fsr2h,c
  1574  000DE0  50DF               	movf	indf2,w,c
  1575  000DE2  6E15               	movwf	(??_displayText+2)& (0+255),c
  1576  000DE4  0EBF               	movlw	191
  1577  000DE6  2415               	addwf	??_displayText+2,w,c
  1578  000DE8  6E16               	movwf	(??_displayText+3)& (0+255),c
  1579  000DEA  6A17               	clrf	(??_displayText+4)& (0+255),c
  1580  000DEC  0EFF               	movlw	255
  1581  000DEE  2217               	addwfc	(??_displayText+4)& (0+255),f,c
  1582  000DF0  0E70               	movlw	low _LCDLetters
  1583  000DF2  2416               	addwf	??_displayText+3,w,c
  1584  000DF4  6EF6               	movwf	tblptrl,c
  1585  000DF6  0E03               	movlw	high _LCDLetters
  1586  000DF8  2017               	addwfc	??_displayText+4,w,c
  1587  000DFA  6EF7               	movwf	tblptrh,c
  1588  000DFC  0E18               	movlw	low displayText@display
  1589  000DFE  241C               	addwf	displayText@i,w,c
  1590  000E00  6ED9               	movwf	fsr2l,c
  1591  000E02  0E00               	movlw	high displayText@display
  1592  000E04  201D               	addwfc	displayText@i+1,w,c
  1593  000E06  6EDA               	movwf	fsr2h,c
  1594  000E08  0008               	tblrd		*
  1595  000E0A  CFF5 FFDF          	movff	tablat,indf2
  1596  000E0E                     l2327:
  1597  000E0E  4A1C               	infsnz	displayText@i,f,c
  1598  000E10  2A1D               	incf	displayText@i+1,f,c
  1599  000E12                     l2329:
  1600  000E12  041B               	decf	displayText@flag,w,c
  1601  000E14  B4D8               	btfsc	status,2,c
  1602  000E16  D008               	goto	l262
  1603  000E18  501D               	movf	displayText@i+1,w,c
  1604  000E1A  0A80               	xorlw	128
  1605  000E1C  0F80               	addlw	-128
  1606  000E1E  0E03               	movlw	3
  1607  000E20  B4D8               	btfsc	status,2,c
  1608  000E22  5C1C               	subwf	displayText@i,w,c
  1609  000E24  A0D8               	btfss	status,0,c
  1610  000E26  D7B8               	goto	l2321
  1611  000E28                     l262:
  1612                           
  1613                           ;main.c: 915: }
  1614                           ;main.c: 917: LCDDATA2 = display[0];
  1615  000E28  C018  FF62         	movff	displayText@display,3938	;volatile
  1616                           
  1617                           ;main.c: 918: LCDDATA1 = display[1];
  1618  000E2C  C019  FF61         	movff	displayText@display+1,3937	;volatile
  1619                           
  1620                           ;main.c: 919: LCDDATA0 = display[2];
  1621  000E30  C01A  FF60         	movff	displayText@display+2,3936	;volatile
  1622                           
  1623                           ;main.c: 921: if(str[pos] == '\0')
  1624  000E34  5011               	movf	displayText@pos,w,c
  1625  000E36  240F               	addwf	displayText@str,w,c
  1626  000E38  6ED9               	movwf	fsr2l,c
  1627  000E3A  5012               	movf	displayText@pos+1,w,c
  1628  000E3C  2010               	addwfc	displayText@str+1,w,c
  1629  000E3E  6EDA               	movwf	fsr2h,c
  1630  000E40  50DF               	movf	indf2,w,c
  1631  000E42  A4D8               	btfss	status,2,c
  1632  000E44  D005               	goto	l2339
  1633                           
  1634                           ;main.c: 922: return 0;
  1635  000E46  0E00               	movlw	0
  1636  000E48  6E10               	movwf	?_displayText+1,c
  1637  000E4A  0E00               	movlw	0
  1638  000E4C  6E0F               	movwf	?_displayText,c
  1639  000E4E  D006               	goto	l264
  1640  000E50                     l2339:
  1641                           
  1642                           ;main.c: 924: pos++;
  1643  000E50  4A11               	infsnz	displayText@pos,f,c
  1644  000E52  2A12               	incf	displayText@pos+1,f,c
  1645                           
  1646                           ;main.c: 925: return pos;
  1647  000E54  C011  F00F         	movff	displayText@pos,?_displayText
  1648  000E58  C012  F010         	movff	displayText@pos+1,?_displayText+1
  1649  000E5C                     l264:
  1650  000E5C  0012               	return	
  1651  000E5E                     __end_of_displayText:
  1652                           	opt stack 0
  1653                           tblptru	equ	0xFF8
  1654                           tblptrh	equ	0xFF7
  1655                           tblptrl	equ	0xFF6
  1656                           tablat	equ	0xFF5
  1657                           postinc0	equ	0xFEE
  1658                           wreg	equ	0xFE8
  1659                           postinc1	equ	0xFE6
  1660                           postdec1	equ	0xFE5
  1661                           fsr1l	equ	0xFE1
  1662                           indf2	equ	0xFDF
  1663                           postinc2	equ	0xFDE
  1664                           fsr2h	equ	0xFDA
  1665                           fsr2l	equ	0xFD9
  1666                           status	equ	0xFD8
  1667                           
  1668 ;; *************** function _setScan *****************
  1669 ;; Defined at:
  1670 ;;		line 826 in file "main.c"
  1671 ;; Parameters:    Size  Location     Type
  1672 ;;  dir             1   18[COMRAM] unsigned char 
  1673 ;; Auto vars:     Size  Location     Type
  1674 ;;  chanRgstr       2   24[COMRAM] unsigned int 
  1675 ;;  dat             2   22[COMRAM] unsigned int 
  1676 ;;  reg3Wrd         2    0        int 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  2   18[COMRAM] unsigned int 
  1679 ;; Registers used:
  1680 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  1686 ;;      Params:         2       0       0       0
  1687 ;;      Locals:         4       0       0       0
  1688 ;;      Temps:          2       0       0       0
  1689 ;;      Totals:         8       0       0       0
  1690 ;;Total ram usage:        8 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    4
  1693 ;; This function calls:
  1694 ;;		_dly
  1695 ;;		_errfm
  1696 ;;		_FMwrite
  1697 ;;		_FMread
  1698 ;;		_FMready
  1699 ;; This function is called by:
  1700 ;;		_main
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703                           
  1704                           	psect	text2
  1705  00093C                     __ptext2:
  1706                           	opt stack 0
  1707  00093C                     _setScan:
  1708                           	opt stack 25
  1709                           
  1710                           ;main.c: 828: unsigned int dat;
  1711                           ;main.c: 829: unsigned int chanRgstr;
  1712                           ;main.c: 830: int reg3Wrd;
  1713                           ;main.c: 832: regImg[1] |= 0x0002;
  1714                           
  1715                           ;incstack = 0
  1716                           ;incstack = 0
  1717  00093C  0100               	movlb	0	; () banked
  1718  00093E  0100               	movlb	0	; () banked
  1719  000940  83BC               	bsf	(_regImg+2)& (0+255),1,b
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;main.c: 833: FMwrite(1);
  1723  000942  6E15               	movwf	??_setScan& (0+255),c
  1724  000944  0E01               	movlw	1
  1725  000946  6E02               	movwf	?_FMwrite,c
  1726  000948  5015               	movf	??_setScan& (0+255),w,c
  1727  00094A  EC85  F008         	call	_FMwrite	;wreg free
  1728                           
  1729                           ;main.c: 835: regImg[2] &=0xFDFF;
  1730  00094E  0100               	movlb	0	; () banked
  1731  000950  0100               	movlb	0	; () banked
  1732  000952  93BF               	bcf	(_regImg+5)& (0+255),1,b
  1733                           
  1734                           ;main.c: 836: FMwrite(2);
  1735  000954  6E15               	movwf	??_setScan& (0+255),c
  1736  000956  0E02               	movlw	2
  1737  000958  6E02               	movwf	?_FMwrite,c
  1738  00095A  5015               	movf	??_setScan& (0+255),w,c
  1739  00095C  EC85  F008         	call	_FMwrite	;wreg free
  1740                           
  1741                           ;main.c: 839: if ( FMread(0x13, &chanRgstr) == 1)
  1742  000960  6E15               	movwf	??_setScan& (0+255),c
  1743  000962  0E13               	movlw	19
  1744  000964  6E02               	movwf	?_FMread,c
  1745  000966  5015               	movf	??_setScan& (0+255),w,c
  1746  000968  0E00               	movlw	high setScan@chanRgstr
  1747  00096A  6E04               	movwf	?_FMread+2,c
  1748  00096C  0E19               	movlw	low setScan@chanRgstr
  1749  00096E  6E03               	movwf	?_FMread+1,c
  1750  000970  EC18  F008         	call	_FMread	;wreg free
  1751  000974  6E16               	movwf	(??_setScan+1)& (0+255),c
  1752  000976  0416               	decf	??_setScan+1,w,c
  1753  000978  B4D8               	btfsc	status,2,c
  1754                           
  1755                           ;main.c: 840: errfm();
  1756  00097A  EC74  F00B         	call	_errfm	;wreg free
  1757                           
  1758                           ;main.c: 842: chanRgstr >>= 7;
  1759  00097E  0E07               	movlw	7
  1760  000980  6E15               	movwf	??_setScan& (0+255),c
  1761  000982                     u1515:
  1762  000982  90D8               	bcf	status,0,c
  1763  000984  321A               	rrcf	setScan@chanRgstr+1,f,c
  1764  000986  3219               	rrcf	setScan@chanRgstr,f,c
  1765  000988  2E15               	decfsz	??_setScan& (0+255),f,c
  1766  00098A  D7FB               	goto	u1515
  1767                           
  1768                           ;main.c: 843: chanRgstr &= 0x01FF;
  1769  00098C  0EFF               	movlw	255
  1770  00098E  1619               	andwf	setScan@chanRgstr,f,c
  1771  000990  0E01               	movlw	1
  1772  000992  161A               	andwf	setScan@chanRgstr+1,f,c
  1773                           
  1774                           ;main.c: 845: regImg[2] &= 0xFE00;
  1775  000994  0100               	movlb	0	; () banked
  1776  000996  0E00               	movlw	0
  1777  000998  0100               	movlb	0	; () banked
  1778  00099A  17BE               	andwf	(_regImg+4)& (0+255),f,b
  1779  00099C  0EFE               	movlw	254
  1780  00099E  0100               	movlb	0	; () banked
  1781  0009A0  17BF               	andwf	(_regImg+5)& (0+255),f,b
  1782                           
  1783                           ; BSR set to: 0
  1784                           ;main.c: 846: regImg[2] |= chanRgstr;
  1785  0009A2  5019               	movf	setScan@chanRgstr,w,c
  1786  0009A4  0100               	movlb	0	; () banked
  1787  0009A6  0100               	movlb	0	; () banked
  1788  0009A8  13BE               	iorwf	(_regImg+4)& (0+255),f,b
  1789  0009AA  501A               	movf	setScan@chanRgstr+1,w,c
  1790  0009AC  0100               	movlb	0	; () banked
  1791  0009AE  0100               	movlb	0	; () banked
  1792  0009B0  13BF               	iorwf	(_regImg+5)& (0+255),f,b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 847: FMwrite(2);
  1796  0009B2  6E15               	movwf	??_setScan& (0+255),c
  1797  0009B4  0E02               	movlw	2
  1798  0009B6  6E02               	movwf	?_FMwrite,c
  1799  0009B8  5015               	movf	??_setScan& (0+255),w,c
  1800  0009BA  EC85  F008         	call	_FMwrite	;wreg free
  1801                           
  1802                           ;main.c: 850: regImg[3] &=0xBFFF;
  1803  0009BE  0100               	movlb	0	; () banked
  1804  0009C0  0100               	movlb	0	; () banked
  1805  0009C2  9DC1               	bcf	(_regImg+7)& (0+255),6,b
  1806                           
  1807                           ; BSR set to: 0
  1808                           ;main.c: 851: FMwrite(3);
  1809  0009C4  6E15               	movwf	??_setScan& (0+255),c
  1810  0009C6  0E03               	movlw	3
  1811  0009C8  6E02               	movwf	?_FMwrite,c
  1812  0009CA  5015               	movf	??_setScan& (0+255),w,c
  1813  0009CC  EC85  F008         	call	_FMwrite	;wreg free
  1814                           
  1815                           ;main.c: 853: regImg[3] = 0b0011111110011001;
  1816  0009D0  0E3F               	movlw	63
  1817  0009D2  0100               	movlb	0	; () banked
  1818  0009D4  0100               	movlb	0	; () banked
  1819  0009D6  6FC1               	movwf	(_regImg+7)& (0+255),b
  1820  0009D8  0E99               	movlw	153
  1821  0009DA  0100               	movlb	0	; () banked
  1822  0009DC  6FC0               	movwf	(_regImg+6)& (0+255),b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 855: if(dir == 1)
  1826  0009DE  0413               	decf	setScan@dir,w,c
  1827  0009E0  A4D8               	btfss	status,2,c
  1828  0009E2  D003               	goto	l246
  1829                           
  1830                           ; BSR set to: 0
  1831                           ;main.c: 856: regImg[3] |= 0x8000;
  1832  0009E4  0100               	movlb	0	; () banked
  1833  0009E6  0100               	movlb	0	; () banked
  1834  0009E8  8FC1               	bsf	(_regImg+7)& (0+255),7,b
  1835  0009EA                     l246:
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;main.c: 859: regImg[10] |= 0x0008;
  1839  0009EA  0100               	movlb	0	; () banked
  1840  0009EC  0100               	movlb	0	; () banked
  1841  0009EE  87CE               	bsf	(_regImg+20)& (0+255),3,b
  1842                           
  1843                           ; BSR set to: 0
  1844                           ;main.c: 861: FMwrite(10);
  1845  0009F0  6E15               	movwf	??_setScan& (0+255),c
  1846  0009F2  0E0A               	movlw	10
  1847  0009F4  6E02               	movwf	?_FMwrite,c
  1848  0009F6  5015               	movf	??_setScan& (0+255),w,c
  1849  0009F8  EC85  F008         	call	_FMwrite	;wreg free
  1850                           
  1851                           ;main.c: 862: FMwrite(3);
  1852  0009FC  6E15               	movwf	??_setScan& (0+255),c
  1853  0009FE  0E03               	movlw	3
  1854  000A00  6E02               	movwf	?_FMwrite,c
  1855  000A02  5015               	movf	??_setScan& (0+255),w,c
  1856  000A04  EC85  F008         	call	_FMwrite	;wreg free
  1857                           
  1858                           ;main.c: 864: regImg[3] &= 0x4000;
  1859  000A08  0100               	movlb	0	; () banked
  1860  000A0A  0E00               	movlw	0
  1861  000A0C  0100               	movlb	0	; () banked
  1862  000A0E  17C0               	andwf	(_regImg+6)& (0+255),f,b
  1863  000A10  0E40               	movlw	64
  1864  000A12  0100               	movlb	0	; () banked
  1865  000A14  17C1               	andwf	(_regImg+7)& (0+255),f,b
  1866                           
  1867                           ; BSR set to: 0
  1868                           ;main.c: 865: FMwrite(3);
  1869  000A16  6E15               	movwf	??_setScan& (0+255),c
  1870  000A18  0E03               	movlw	3
  1871  000A1A  6E02               	movwf	?_FMwrite,c
  1872  000A1C  5015               	movf	??_setScan& (0+255),w,c
  1873  000A1E  EC85  F008         	call	_FMwrite	;wreg free
  1874  000A22                     l2519:
  1875                           
  1876                           ;main.c: 869: dly(2);
  1877  000A22  0E00               	movlw	0
  1878  000A24  6E02               	movwf	?_dly+1,c
  1879  000A26  0E02               	movlw	2
  1880  000A28  6E01               	movwf	?_dly,c
  1881  000A2A  EC00  F00B         	call	_dly	;wreg free
  1882                           
  1883                           ;main.c: 870: if (FMready(&dat) != 0)
  1884  000A2E  0E00               	movlw	high setScan@dat
  1885  000A30  6E0E               	movwf	?_FMready+1,c
  1886  000A32  0E17               	movlw	low setScan@dat
  1887  000A34  6E0D               	movwf	?_FMready,c
  1888  000A36  EC76  F00A         	call	_FMready	;wreg free
  1889  000A3A  0900               	iorlw	0
  1890  000A3C  A4D8               	btfss	status,2,c
  1891  000A3E  D004               	goto	l2527
  1892                           
  1893                           ;main.c: 872: } while (!dat);
  1894                           
  1895                           ;main.c: 871: break;
  1896  000A40  5018               	movf	setScan@dat+1,w,c
  1897  000A42  1017               	iorwf	setScan@dat,w,c
  1898  000A44  B4D8               	btfsc	status,2,c
  1899  000A46  D7ED               	goto	l2519
  1900  000A48                     l2527:
  1901                           
  1902                           ;main.c: 875: if ( FMread(0x13, &chanRgstr) == 1)
  1903  000A48  6E15               	movwf	??_setScan& (0+255),c
  1904  000A4A  0E13               	movlw	19
  1905  000A4C  6E02               	movwf	?_FMread,c
  1906  000A4E  5015               	movf	??_setScan& (0+255),w,c
  1907  000A50  0E00               	movlw	high setScan@chanRgstr
  1908  000A52  6E04               	movwf	?_FMread+2,c
  1909  000A54  0E19               	movlw	low setScan@chanRgstr
  1910  000A56  6E03               	movwf	?_FMread+1,c
  1911  000A58  EC18  F008         	call	_FMread	;wreg free
  1912  000A5C  6E16               	movwf	(??_setScan+1)& (0+255),c
  1913  000A5E  0416               	decf	??_setScan+1,w,c
  1914  000A60  B4D8               	btfsc	status,2,c
  1915                           
  1916                           ;main.c: 876: errfm();
  1917  000A62  EC74  F00B         	call	_errfm	;wreg free
  1918                           
  1919                           ;main.c: 878: chanRgstr >>= 7;
  1920  000A66  0E07               	movlw	7
  1921  000A68  6E15               	movwf	??_setScan& (0+255),c
  1922  000A6A                     u1565:
  1923  000A6A  90D8               	bcf	status,0,c
  1924  000A6C  321A               	rrcf	setScan@chanRgstr+1,f,c
  1925  000A6E  3219               	rrcf	setScan@chanRgstr,f,c
  1926  000A70  2E15               	decfsz	??_setScan& (0+255),f,c
  1927  000A72  D7FB               	goto	u1565
  1928                           
  1929                           ;main.c: 879: chanRgstr &= 0x01FF;
  1930  000A74  0EFF               	movlw	255
  1931  000A76  1619               	andwf	setScan@chanRgstr,f,c
  1932  000A78  0E01               	movlw	1
  1933  000A7A  161A               	andwf	setScan@chanRgstr+1,f,c
  1934                           
  1935                           ;main.c: 881: regImg[2] &= 0xFE00;
  1936  000A7C  0100               	movlb	0	; () banked
  1937  000A7E  0E00               	movlw	0
  1938  000A80  0100               	movlb	0	; () banked
  1939  000A82  17BE               	andwf	(_regImg+4)& (0+255),f,b
  1940  000A84  0EFE               	movlw	254
  1941  000A86  0100               	movlb	0	; () banked
  1942  000A88  17BF               	andwf	(_regImg+5)& (0+255),f,b
  1943                           
  1944                           ; BSR set to: 0
  1945                           ;main.c: 882: regImg[2] |= chanRgstr;
  1946  000A8A  5019               	movf	setScan@chanRgstr,w,c
  1947  000A8C  0100               	movlb	0	; () banked
  1948  000A8E  0100               	movlb	0	; () banked
  1949  000A90  13BE               	iorwf	(_regImg+4)& (0+255),f,b
  1950  000A92  501A               	movf	setScan@chanRgstr+1,w,c
  1951  000A94  0100               	movlb	0	; () banked
  1952  000A96  0100               	movlb	0	; () banked
  1953  000A98  13BF               	iorwf	(_regImg+5)& (0+255),f,b
  1954                           
  1955                           ; BSR set to: 0
  1956                           ;main.c: 883: FMwrite(2);
  1957  000A9A  6E15               	movwf	??_setScan& (0+255),c
  1958  000A9C  0E02               	movlw	2
  1959  000A9E  6E02               	movwf	?_FMwrite,c
  1960  000AA0  5015               	movf	??_setScan& (0+255),w,c
  1961  000AA2  EC85  F008         	call	_FMwrite	;wreg free
  1962                           
  1963                           ;main.c: 886: chanRgstr += 690;
  1964  000AA6  0EB2               	movlw	178
  1965  000AA8  2619               	addwf	setScan@chanRgstr,f,c
  1966  000AAA  0E02               	movlw	2
  1967  000AAC  221A               	addwfc	setScan@chanRgstr+1,f,c
  1968                           
  1969                           ;main.c: 888: regImg[1] &= 0xFFFD;
  1970  000AAE  0100               	movlb	0	; () banked
  1971  000AB0  0100               	movlb	0	; () banked
  1972  000AB2  93BC               	bcf	(_regImg+2)& (0+255),1,b
  1973                           
  1974                           ; BSR set to: 0
  1975                           ;main.c: 889: FMwrite(1);
  1976  000AB4  6E15               	movwf	??_setScan& (0+255),c
  1977  000AB6  0E01               	movlw	1
  1978  000AB8  6E02               	movwf	?_FMwrite,c
  1979  000ABA  5015               	movf	??_setScan& (0+255),w,c
  1980  000ABC  EC85  F008         	call	_FMwrite	;wreg free
  1981                           
  1982                           ;main.c: 891: return chanRgstr;
  1983  000AC0  C019  F013         	movff	setScan@chanRgstr,?_setScan
  1984  000AC4  C01A  F014         	movff	setScan@chanRgstr+1,?_setScan+1
  1985  000AC8  0012               	return	
  1986  000ACA                     __end_of_setScan:
  1987                           	opt stack 0
  1988                           tblptru	equ	0xFF8
  1989                           tblptrh	equ	0xFF7
  1990                           tblptrl	equ	0xFF6
  1991                           tablat	equ	0xFF5
  1992                           postinc0	equ	0xFEE
  1993                           wreg	equ	0xFE8
  1994                           postinc1	equ	0xFE6
  1995                           postdec1	equ	0xFE5
  1996                           fsr1l	equ	0xFE1
  1997                           indf2	equ	0xFDF
  1998                           postinc2	equ	0xFDE
  1999                           fsr2h	equ	0xFDA
  2000                           fsr2l	equ	0xFD9
  2001                           status	equ	0xFD8
  2002                           
  2003 ;; *************** function _showChan *****************
  2004 ;; Defined at:
  2005 ;;		line 811 in file "main.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;  channel         2    3[COMRAM] unsigned int 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;		None
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  1    wreg      unsigned char 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2019 ;;      Params:         2       0       0       0
  2020 ;;      Locals:         0       0       0       0
  2021 ;;      Temps:          1       0       0       0
  2022 ;;      Totals:         3       0       0       0
  2023 ;;Total ram usage:        3 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    2
  2026 ;; This function calls:
  2027 ;;		_setscn
  2028 ;;		_charWrt
  2029 ;; This function is called by:
  2030 ;;		_main
  2031 ;; This function uses a non-reentrant model
  2032 ;;
  2033                           
  2034                           	psect	text3
  2035  00167C                     __ptext3:
  2036                           	opt stack 0
  2037  00167C                     _showChan:
  2038                           	opt stack 27
  2039                           
  2040                           ;main.c: 812: setscn(0);
  2041                           
  2042                           ;incstack = 0
  2043                           ;incstack = 0
  2044  00167C  6E06               	movwf	??_showChan& (0+255),c
  2045  00167E  0E00               	movlw	0
  2046  001680  6E01               	movwf	?_setscn,c
  2047  001682  5006               	movf	??_showChan& (0+255),w,c
  2048  001684  EC19  F00B         	call	_setscn	;wreg free
  2049                           
  2050                           ;main.c: 813: charWrt(channel, 1);
  2051  001688  C004  F001         	movff	showChan@channel,?_charWrt
  2052  00168C  6E06               	movwf	??_showChan& (0+255),c
  2053  00168E  0E01               	movlw	1
  2054  001690  6E02               	movwf	?_charWrt+1,c
  2055  001692  5006               	movf	??_showChan& (0+255),w,c
  2056  001694  EC9C  F00A         	call	_charWrt	;wreg free
  2057                           
  2058                           ;main.c: 815: return 0;
  2059                           ;	Return value of _showChan is never used
  2060  001698  0012               	return	
  2061  00169A                     __end_of_showChan:
  2062                           	opt stack 0
  2063                           tblptru	equ	0xFF8
  2064                           tblptrh	equ	0xFF7
  2065                           tblptrl	equ	0xFF6
  2066                           tablat	equ	0xFF5
  2067                           postinc0	equ	0xFEE
  2068                           wreg	equ	0xFE8
  2069                           postinc1	equ	0xFE6
  2070                           postdec1	equ	0xFE5
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           postinc2	equ	0xFDE
  2074                           fsr2h	equ	0xFDA
  2075                           fsr2l	equ	0xFD9
  2076                           status	equ	0xFD8
  2077                           
  2078 ;; *************** function _showVol *****************
  2079 ;; Defined at:
  2080 ;;		line 791 in file "main.c"
  2081 ;; Parameters:    Size  Location     Type
  2082 ;;  volume          2    3[COMRAM] unsigned int 
  2083 ;; Auto vars:     Size  Location     Type
  2084 ;;		None
  2085 ;; Return value:  Size  Location     Type
  2086 ;;                  1    wreg      unsigned char 
  2087 ;; Registers used:
  2088 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2089 ;; Tracked objects:
  2090 ;;		On entry : 0/0
  2091 ;;		On exit  : 0/0
  2092 ;;		Unchanged: 0/0
  2093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2094 ;;      Params:         2       0       0       0
  2095 ;;      Locals:         0       0       0       0
  2096 ;;      Temps:          2       0       0       0
  2097 ;;      Totals:         4       0       0       0
  2098 ;;Total ram usage:        4 bytes
  2099 ;; Hardware stack levels used:    1
  2100 ;; Hardware stack levels required when called:    2
  2101 ;; This function calls:
  2102 ;;		_setscn
  2103 ;;		_charWrt
  2104 ;; This function is called by:
  2105 ;;		_main
  2106 ;; This function uses a non-reentrant model
  2107 ;;
  2108                           
  2109                           	psect	text4
  2110  001580                     __ptext4:
  2111                           	opt stack 0
  2112  001580                     _showVol:
  2113                           	opt stack 27
  2114                           
  2115                           ;main.c: 793: setscn(0);
  2116                           
  2117                           ;incstack = 0
  2118                           ;incstack = 0
  2119  001580  6E06               	movwf	??_showVol& (0+255),c
  2120  001582  0E00               	movlw	0
  2121  001584  6E01               	movwf	?_setscn,c
  2122  001586  5006               	movf	??_showVol& (0+255),w,c
  2123  001588  EC19  F00B         	call	_setscn	;wreg free
  2124                           
  2125                           ;main.c: 795: if (volume >= 10)
  2126  00158C  0E0A               	movlw	10
  2127  00158E  5C04               	subwf	showVol@volume,w,c
  2128  001590  0E00               	movlw	0
  2129  001592  5805               	subwfb	showVol@volume+1,w,c
  2130  001594  A0D8               	btfss	status,0,c
  2131  001596  D00E               	goto	l2303
  2132                           
  2133                           ;main.c: 796: {
  2134                           ;main.c: 797: charWrt(1,2);
  2135  001598  6E06               	movwf	??_showVol& (0+255),c
  2136  00159A  0E01               	movlw	1
  2137  00159C  6E01               	movwf	?_charWrt,c
  2138  00159E  5006               	movf	??_showVol& (0+255),w,c
  2139  0015A0  6E07               	movwf	(??_showVol+1)& (0+255),c
  2140  0015A2  0E02               	movlw	2
  2141  0015A4  6E02               	movwf	?_charWrt+1,c
  2142  0015A6  5007               	movf	(??_showVol+1)& (0+255),w,c
  2143  0015A8  EC9C  F00A         	call	_charWrt	;wreg free
  2144                           
  2145                           ;main.c: 798: volume -= 10;
  2146  0015AC  0E0A               	movlw	10
  2147  0015AE  5E04               	subwf	showVol@volume,f,c
  2148  0015B0  0E00               	movlw	0
  2149  0015B2  5A05               	subwfb	showVol@volume+1,f,c
  2150  0015B4                     l2303:
  2151                           
  2152                           ;main.c: 799: }
  2153                           ;main.c: 801: charWrt(volume, 3);
  2154  0015B4  C004  F001         	movff	showVol@volume,?_charWrt
  2155  0015B8  6E06               	movwf	??_showVol& (0+255),c
  2156  0015BA  0E03               	movlw	3
  2157  0015BC  6E02               	movwf	?_charWrt+1,c
  2158  0015BE  5006               	movf	??_showVol& (0+255),w,c
  2159  0015C0  EC9C  F00A         	call	_charWrt	;wreg free
  2160                           
  2161                           ;main.c: 804: return 0;
  2162                           ;	Return value of _showVol is never used
  2163  0015C4  0012               	return	
  2164  0015C6                     __end_of_showVol:
  2165                           	opt stack 0
  2166                           tblptru	equ	0xFF8
  2167                           tblptrh	equ	0xFF7
  2168                           tblptrl	equ	0xFF6
  2169                           tablat	equ	0xFF5
  2170                           postinc0	equ	0xFEE
  2171                           wreg	equ	0xFE8
  2172                           postinc1	equ	0xFE6
  2173                           postdec1	equ	0xFE5
  2174                           fsr1l	equ	0xFE1
  2175                           indf2	equ	0xFDF
  2176                           postinc2	equ	0xFDE
  2177                           fsr2h	equ	0xFDA
  2178                           fsr2l	equ	0xFD9
  2179                           status	equ	0xFD8
  2180                           
  2181 ;; *************** function _setscn *****************
  2182 ;; Defined at:
  2183 ;;		line 204 in file "main.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  state           1    0[COMRAM] unsigned char 
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  data            1    2[COMRAM] unsigned char 
  2188 ;; Return value:  Size  Location     Type
  2189 ;;		None               void
  2190 ;; Registers used:
  2191 ;;		wreg, status,2, status,0
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2197 ;;      Params:         1       0       0       0
  2198 ;;      Locals:         1       0       0       0
  2199 ;;      Temps:          1       0       0       0
  2200 ;;      Totals:         3       0       0       0
  2201 ;;Total ram usage:        3 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; This function calls:
  2204 ;;		Nothing
  2205 ;; This function is called by:
  2206 ;;		_showVol
  2207 ;;		_showChan
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           	psect	text5
  2212  001632                     __ptext5:
  2213                           	opt stack 0
  2214  001632                     _setscn:
  2215                           	opt stack 28
  2216                           
  2217                           ;main.c: 205: unsigned char data;
  2218                           ;main.c: 207: if(state == 1)
  2219                           
  2220                           ;incstack = 0
  2221                           ;incstack = 0
  2222  001632  0401               	decf	setscn@state,w,c
  2223  001634  A4D8               	btfss	status,2,c
  2224  001636  D002               	goto	l1961
  2225                           
  2226                           ;main.c: 208: data = 0xFF;
  2227  001638  6803               	setf	setscn@data,c
  2228  00163A  D004               	goto	l1963
  2229  00163C                     l1961:
  2230                           
  2231                           ;main.c: 209: else
  2232                           ;main.c: 210: data = 0x00;
  2233  00163C  6E02               	movwf	??_setscn& (0+255),c
  2234  00163E  0E00               	movlw	0
  2235  001640  6E03               	movwf	setscn@data,c
  2236  001642  5002               	movf	??_setscn& (0+255),w,c
  2237  001644                     l1963:
  2238                           
  2239                           ;main.c: 212: LCDDATA0 = data;
  2240  001644  C003  FF60         	movff	setscn@data,3936	;volatile
  2241                           
  2242                           ;main.c: 213: LCDDATA1 = data;
  2243  001648  C003  FF61         	movff	setscn@data,3937	;volatile
  2244                           
  2245                           ;main.c: 214: LCDDATA2 = data;
  2246  00164C  C003  FF62         	movff	setscn@data,3938	;volatile
  2247                           
  2248                           ;main.c: 215: data &= 0b00000111;
  2249  001650  0E07               	movlw	7
  2250  001652  1603               	andwf	setscn@data,f,c
  2251                           
  2252                           ;main.c: 216: LCDDATA3 = data;
  2253  001654  C003  FF63         	movff	setscn@data,3939	;volatile
  2254                           
  2255                           ;main.c: 218: return;
  2256  001658  0012               	return	
  2257  00165A                     __end_of_setscn:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           postinc0	equ	0xFEE
  2264                           wreg	equ	0xFE8
  2265                           postinc1	equ	0xFE6
  2266                           postdec1	equ	0xFE5
  2267                           fsr1l	equ	0xFE1
  2268                           indf2	equ	0xFDF
  2269                           postinc2	equ	0xFDE
  2270                           fsr2h	equ	0xFDA
  2271                           fsr2l	equ	0xFD9
  2272                           status	equ	0xFD8
  2273                           
  2274 ;; *************** function _showFreq *****************
  2275 ;; Defined at:
  2276 ;;		line 752 in file "main.c"
  2277 ;; Parameters:    Size  Location     Type
  2278 ;;  frequency       2   14[COMRAM] unsigned int 
  2279 ;; Auto vars:     Size  Location     Type
  2280 ;;  display         3   18[COMRAM] unsigned char [3]
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      unsigned char 
  2283 ;; Registers used:
  2284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2290 ;;      Params:         2       0       0       0
  2291 ;;      Locals:         3       0       0       0
  2292 ;;      Temps:          2       0       0       0
  2293 ;;      Totals:         7       0       0       0
  2294 ;;Total ram usage:        7 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    2
  2297 ;; This function calls:
  2298 ;;		_segWrt
  2299 ;;		_charWrt
  2300 ;;		___lwdiv
  2301 ;;		___wmul
  2302 ;; This function is called by:
  2303 ;;		_main
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text6
  2308  000C4E                     __ptext6:
  2309                           	opt stack 0
  2310  000C4E                     _showFreq:
  2311                           	opt stack 27
  2312                           
  2313                           ;main.c: 754: unsigned char display[3];
  2314                           ;main.c: 756: if (frequency >= 1000)
  2315                           
  2316                           ;incstack = 0
  2317                           ;incstack = 0
  2318  000C4E  0EE8               	movlw	232
  2319  000C50  5C0F               	subwf	showFreq@frequency,w,c
  2320  000C52  0E03               	movlw	3
  2321  000C54  5810               	subwfb	showFreq@frequency+1,w,c
  2322  000C56  A0D8               	btfss	status,0,c
  2323  000C58  D00F               	goto	l2275
  2324                           
  2325                           ;main.c: 757: {
  2326                           ;main.c: 758: segWrt(24, 1);
  2327  000C5A  6E11               	movwf	??_showFreq& (0+255),c
  2328  000C5C  0E18               	movlw	24
  2329  000C5E  6E01               	movwf	?_segWrt,c
  2330  000C60  5011               	movf	??_showFreq& (0+255),w,c
  2331  000C62  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2332  000C64  0E01               	movlw	1
  2333  000C66  6E02               	movwf	?_segWrt+1,c
  2334  000C68  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2335  000C6A  EC94  F009         	call	_segWrt	;wreg free
  2336                           
  2337                           ;main.c: 759: frequency -= 1000;
  2338  000C6E  0EE8               	movlw	232
  2339  000C70  5E0F               	subwf	showFreq@frequency,f,c
  2340  000C72  0E03               	movlw	3
  2341  000C74  5A10               	subwfb	showFreq@frequency+1,f,c
  2342                           
  2343                           ;main.c: 760: }
  2344  000C76  D00A               	goto	l2277
  2345  000C78                     l2275:
  2346                           
  2347                           ;main.c: 761: else
  2348                           ;main.c: 762: segWrt(24, 0);
  2349  000C78  6E11               	movwf	??_showFreq& (0+255),c
  2350  000C7A  0E18               	movlw	24
  2351  000C7C  6E01               	movwf	?_segWrt,c
  2352  000C7E  5011               	movf	??_showFreq& (0+255),w,c
  2353  000C80  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2354  000C82  0E00               	movlw	0
  2355  000C84  6E02               	movwf	?_segWrt+1,c
  2356  000C86  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2357  000C88  EC94  F009         	call	_segWrt	;wreg free
  2358  000C8C                     l2277:
  2359                           
  2360                           ;main.c: 764: display[0] = (frequency/100);
  2361  000C8C  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2362  000C90  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2363  000C94  0E00               	movlw	0
  2364  000C96  6E04               	movwf	?___lwdiv+3,c
  2365  000C98  0E64               	movlw	100
  2366  000C9A  6E03               	movwf	?___lwdiv+2,c
  2367  000C9C  EC20  F00A         	call	___lwdiv	;wreg free
  2368  000CA0  5001               	movf	?___lwdiv,w,c
  2369  000CA2  6E13               	movwf	showFreq@display,c
  2370                           
  2371                           ;main.c: 766: frequency -= (frequency/100)*100;
  2372  000CA4  0E00               	movlw	0
  2373  000CA6  6E04               	movwf	?___lwdiv+3,c
  2374  000CA8  0E64               	movlw	100
  2375  000CAA  6E03               	movwf	?___lwdiv+2,c
  2376  000CAC  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2377  000CB0  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2378  000CB4  EC20  F00A         	call	___lwdiv	;wreg free
  2379  000CB8  C001  F009         	movff	?___lwdiv,?___wmul
  2380  000CBC  C002  F00A         	movff	?___lwdiv+1,?___wmul+1
  2381  000CC0  0E00               	movlw	0
  2382  000CC2  6E0C               	movwf	?___wmul+3,c
  2383  000CC4  0E64               	movlw	100
  2384  000CC6  6E0B               	movwf	?___wmul+2,c
  2385  000CC8  ECE3  F00A         	call	___wmul	;wreg free
  2386  000CCC  5009               	movf	?___wmul,w,c
  2387  000CCE  5E0F               	subwf	showFreq@frequency,f,c
  2388  000CD0  500A               	movf	?___wmul+1,w,c
  2389  000CD2  5A10               	subwfb	showFreq@frequency+1,f,c
  2390                           
  2391                           ;main.c: 768: display[1] = (frequency/10);
  2392  000CD4  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2393  000CD8  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2394  000CDC  0E00               	movlw	0
  2395  000CDE  6E04               	movwf	?___lwdiv+3,c
  2396  000CE0  0E0A               	movlw	10
  2397  000CE2  6E03               	movwf	?___lwdiv+2,c
  2398  000CE4  EC20  F00A         	call	___lwdiv	;wreg free
  2399  000CE8  5001               	movf	?___lwdiv,w,c
  2400  000CEA  6E14               	movwf	showFreq@display+1,c
  2401                           
  2402                           ;main.c: 770: frequency -= (frequency/10)*10;
  2403  000CEC  0E00               	movlw	0
  2404  000CEE  6E04               	movwf	?___lwdiv+3,c
  2405  000CF0  0E0A               	movlw	10
  2406  000CF2  6E03               	movwf	?___lwdiv+2,c
  2407  000CF4  C00F  F001         	movff	showFreq@frequency,?___lwdiv
  2408  000CF8  C010  F002         	movff	showFreq@frequency+1,?___lwdiv+1
  2409  000CFC  EC20  F00A         	call	___lwdiv	;wreg free
  2410  000D00  C001  F009         	movff	?___lwdiv,?___wmul
  2411  000D04  C002  F00A         	movff	?___lwdiv+1,?___wmul+1
  2412  000D08  0E00               	movlw	0
  2413  000D0A  6E0C               	movwf	?___wmul+3,c
  2414  000D0C  0E0A               	movlw	10
  2415  000D0E  6E0B               	movwf	?___wmul+2,c
  2416  000D10  ECE3  F00A         	call	___wmul	;wreg free
  2417  000D14  5009               	movf	?___wmul,w,c
  2418  000D16  5E0F               	subwf	showFreq@frequency,f,c
  2419  000D18  500A               	movf	?___wmul+1,w,c
  2420  000D1A  5A10               	subwfb	showFreq@frequency+1,f,c
  2421                           
  2422                           ;main.c: 772: display[2] = frequency;
  2423  000D1C  C00F  F015         	movff	showFreq@frequency,showFreq@display+2
  2424                           
  2425                           ;main.c: 774: charWrt(display[0], 1);
  2426  000D20  C013  F001         	movff	showFreq@display,?_charWrt
  2427  000D24  6E11               	movwf	??_showFreq& (0+255),c
  2428  000D26  0E01               	movlw	1
  2429  000D28  6E02               	movwf	?_charWrt+1,c
  2430  000D2A  5011               	movf	??_showFreq& (0+255),w,c
  2431  000D2C  EC9C  F00A         	call	_charWrt	;wreg free
  2432                           
  2433                           ;main.c: 775: charWrt(display[1], 2);
  2434  000D30  C014  F001         	movff	showFreq@display+1,?_charWrt
  2435  000D34  6E11               	movwf	??_showFreq& (0+255),c
  2436  000D36  0E02               	movlw	2
  2437  000D38  6E02               	movwf	?_charWrt+1,c
  2438  000D3A  5011               	movf	??_showFreq& (0+255),w,c
  2439  000D3C  EC9C  F00A         	call	_charWrt	;wreg free
  2440                           
  2441                           ;main.c: 776: segWrt(23, 1);
  2442  000D40  6E11               	movwf	??_showFreq& (0+255),c
  2443  000D42  0E17               	movlw	23
  2444  000D44  6E01               	movwf	?_segWrt,c
  2445  000D46  5011               	movf	??_showFreq& (0+255),w,c
  2446  000D48  6E12               	movwf	(??_showFreq+1)& (0+255),c
  2447  000D4A  0E01               	movlw	1
  2448  000D4C  6E02               	movwf	?_segWrt+1,c
  2449  000D4E  5012               	movf	(??_showFreq+1)& (0+255),w,c
  2450  000D50  EC94  F009         	call	_segWrt	;wreg free
  2451                           
  2452                           ;main.c: 777: charWrt(display[2], 3);
  2453  000D54  C015  F001         	movff	showFreq@display+2,?_charWrt
  2454  000D58  6E11               	movwf	??_showFreq& (0+255),c
  2455  000D5A  0E03               	movlw	3
  2456  000D5C  6E02               	movwf	?_charWrt+1,c
  2457  000D5E  5011               	movf	??_showFreq& (0+255),w,c
  2458  000D60  EC9C  F00A         	call	_charWrt	;wreg free
  2459                           
  2460                           ;main.c: 779: return 0;
  2461                           ;	Return value of _showFreq is never used
  2462  000D64  0012               	return	
  2463  000D66                     __end_of_showFreq:
  2464                           	opt stack 0
  2465                           tblptru	equ	0xFF8
  2466                           tblptrh	equ	0xFF7
  2467                           tblptrl	equ	0xFF6
  2468                           tablat	equ	0xFF5
  2469                           postinc0	equ	0xFEE
  2470                           wreg	equ	0xFE8
  2471                           postinc1	equ	0xFE6
  2472                           postdec1	equ	0xFE5
  2473                           fsr1l	equ	0xFE1
  2474                           indf2	equ	0xFDF
  2475                           postinc2	equ	0xFDE
  2476                           fsr2h	equ	0xFDA
  2477                           fsr2l	equ	0xFD9
  2478                           status	equ	0xFD8
  2479                           
  2480 ;; *************** function ___lwdiv *****************
  2481 ;; Defined at:
  2482 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\lwdiv.c"
  2483 ;; Parameters:    Size  Location     Type
  2484 ;;  dividend        2    0[COMRAM] unsigned int 
  2485 ;;  divisor         2    2[COMRAM] unsigned int 
  2486 ;; Auto vars:     Size  Location     Type
  2487 ;;  quotient        2    5[COMRAM] unsigned int 
  2488 ;;  counter         1    7[COMRAM] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  2    0[COMRAM] unsigned int 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2498 ;;      Params:         4       0       0       0
  2499 ;;      Locals:         3       0       0       0
  2500 ;;      Temps:          1       0       0       0
  2501 ;;      Totals:         8       0       0       0
  2502 ;;Total ram usage:        8 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; This function calls:
  2505 ;;		Nothing
  2506 ;; This function is called by:
  2507 ;;		_showFreq
  2508 ;; This function uses a non-reentrant model
  2509 ;;
  2510                           
  2511                           	psect	text7
  2512  001440                     __ptext7:
  2513                           	opt stack 0
  2514  001440                     ___lwdiv:
  2515                           	opt stack 28
  2516                           
  2517                           ;incstack = 0
  2518                           ;incstack = 0
  2519  001440  0E00               	movlw	0
  2520  001442  6E07               	movwf	___lwdiv@quotient+1,c
  2521  001444  0E00               	movlw	0
  2522  001446  6E06               	movwf	___lwdiv@quotient,c
  2523  001448  5004               	movf	___lwdiv@divisor+1,w,c
  2524  00144A  1003               	iorwf	___lwdiv@divisor,w,c
  2525  00144C  B4D8               	btfsc	status,2,c
  2526  00144E  D01E               	goto	l885
  2527  001450  6E05               	movwf	??___lwdiv& (0+255),c
  2528  001452  0E01               	movlw	1
  2529  001454  6E08               	movwf	___lwdiv@counter,c
  2530  001456  5005               	movf	??___lwdiv& (0+255),w,c
  2531  001458  D004               	goto	l2027
  2532  00145A                     l2025:
  2533  00145A  90D8               	bcf	status,0,c
  2534  00145C  3603               	rlcf	___lwdiv@divisor,f,c
  2535  00145E  3604               	rlcf	___lwdiv@divisor+1,f,c
  2536  001460  2A08               	incf	___lwdiv@counter,f,c
  2537  001462                     l2027:
  2538  001462  AE04               	btfss	___lwdiv@divisor+1,7,c
  2539  001464  D7FA               	goto	l2025
  2540  001466                     l2029:
  2541  001466  90D8               	bcf	status,0,c
  2542  001468  3606               	rlcf	___lwdiv@quotient,f,c
  2543  00146A  3607               	rlcf	___lwdiv@quotient+1,f,c
  2544  00146C  5003               	movf	___lwdiv@divisor,w,c
  2545  00146E  5C01               	subwf	___lwdiv@dividend,w,c
  2546  001470  5004               	movf	___lwdiv@divisor+1,w,c
  2547  001472  5802               	subwfb	___lwdiv@dividend+1,w,c
  2548  001474  A0D8               	btfss	status,0,c
  2549  001476  D005               	goto	l2037
  2550  001478  5003               	movf	___lwdiv@divisor,w,c
  2551  00147A  5E01               	subwf	___lwdiv@dividend,f,c
  2552  00147C  5004               	movf	___lwdiv@divisor+1,w,c
  2553  00147E  5A02               	subwfb	___lwdiv@dividend+1,f,c
  2554  001480  8006               	bsf	___lwdiv@quotient,0,c
  2555  001482                     l2037:
  2556  001482  90D8               	bcf	status,0,c
  2557  001484  3204               	rrcf	___lwdiv@divisor+1,f,c
  2558  001486  3203               	rrcf	___lwdiv@divisor,f,c
  2559  001488  2E08               	decfsz	___lwdiv@counter,f,c
  2560  00148A  D7ED               	goto	l2029
  2561  00148C                     l885:
  2562  00148C  C006  F001         	movff	___lwdiv@quotient,?___lwdiv
  2563  001490  C007  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2564  001494  0012               	return	
  2565  001496                     __end_of___lwdiv:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           postinc0	equ	0xFEE
  2572                           wreg	equ	0xFE8
  2573                           postinc1	equ	0xFE6
  2574                           postdec1	equ	0xFE5
  2575                           fsr1l	equ	0xFE1
  2576                           indf2	equ	0xFDF
  2577                           postinc2	equ	0xFDE
  2578                           fsr2h	equ	0xFDA
  2579                           fsr2l	equ	0xFD9
  2580                           status	equ	0xFD8
  2581                           
  2582 ;; *************** function _charWrt *****************
  2583 ;; Defined at:
  2584 ;;		line 310 in file "main.c"
  2585 ;; Parameters:    Size  Location     Type
  2586 ;;  numToDisp       1    0[COMRAM] unsigned char 
  2587 ;;  DigitNo         1    1[COMRAM] unsigned char 
  2588 ;; Auto vars:     Size  Location     Type
  2589 ;;		None
  2590 ;; Return value:  Size  Location     Type
  2591 ;;		None               void
  2592 ;; Registers used:
  2593 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2594 ;; Tracked objects:
  2595 ;;		On entry : 0/0
  2596 ;;		On exit  : 0/0
  2597 ;;		Unchanged: 0/0
  2598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2599 ;;      Params:         2       0       0       0
  2600 ;;      Locals:         0       0       0       0
  2601 ;;      Temps:          0       0       0       0
  2602 ;;      Totals:         2       0       0       0
  2603 ;;Total ram usage:        2 bytes
  2604 ;; Hardware stack levels used:    1
  2605 ;; Hardware stack levels required when called:    1
  2606 ;; This function calls:
  2607 ;;		_errfm
  2608 ;; This function is called by:
  2609 ;;		_showFreq
  2610 ;;		_showVol
  2611 ;;		_showChan
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           	psect	text8
  2616  001538                     __ptext8:
  2617                           	opt stack 0
  2618  001538                     _charWrt:
  2619                           	opt stack 27
  2620                           
  2621                           ;main.c: 312: numToDisp = segData[numToDisp];
  2622                           
  2623                           ;incstack = 0
  2624                           ;incstack = 0
  2625  001538  5001               	movf	charWrt@numToDisp,w,c
  2626  00153A  0D01               	mullw	1
  2627  00153C  0E97               	movlw	low _segData
  2628  00153E  24F3               	addwf	prodl,w,c
  2629  001540  6EF6               	movwf	tblptrl,c
  2630  001542  0E03               	movlw	high _segData
  2631  001544  20F4               	addwfc	prodh,w,c
  2632  001546  6EF7               	movwf	tblptrh,c
  2633  001548  0008               	tblrd		*
  2634  00154A  CFF5 F001          	movff	tablat,charWrt@numToDisp
  2635                           
  2636                           ;main.c: 314: switch(DigitNo)
  2637  00154E  D00C               	goto	l2157
  2638  001550                     l124:
  2639                           
  2640                           ;main.c: 317: LCDDATA2 = numToDisp;
  2641  001550  C001  FF62         	movff	charWrt@numToDisp,3938	;volatile
  2642                           
  2643                           ;main.c: 318: break;
  2644  001554  D014               	goto	l129
  2645  001556                     l126:
  2646                           
  2647                           ;main.c: 320: LCDDATA1 = numToDisp;
  2648  001556  C001  FF61         	movff	charWrt@numToDisp,3937	;volatile
  2649                           
  2650                           ;main.c: 321: break;
  2651  00155A  D011               	goto	l129
  2652  00155C                     l127:
  2653                           
  2654                           ;main.c: 323: LCDDATA0 = numToDisp;
  2655  00155C  C001  FF60         	movff	charWrt@numToDisp,3936	;volatile
  2656                           
  2657                           ;main.c: 324: break;
  2658  001560  D00E               	goto	l129
  2659  001562                     l2153:
  2660                           
  2661                           ;main.c: 326: errfm();
  2662  001562  EC74  F00B         	call	_errfm	;wreg free
  2663                           
  2664                           ;main.c: 327: break;
  2665  001566  D00B               	goto	l129
  2666  001568                     l2157:
  2667  001568  5002               	movf	charWrt@DigitNo,w,c
  2668                           
  2669                           ; Switch size 1, requested type "space"
  2670                           ; Number of cases is 3, Range of values is 1 to 3
  2671                           ; switch strategies available:
  2672                           ; Name         Instructions Cycles
  2673                           ; simple_byte           10     6 (average)
  2674                           ;	Chosen strategy is simple_byte
  2675  00156A  0A01               	xorlw	1	; case 1
  2676  00156C  B4D8               	btfsc	status,2,c
  2677  00156E  D7F0               	goto	l124
  2678  001570  0A03               	xorlw	3	; case 2
  2679  001572  B4D8               	btfsc	status,2,c
  2680  001574  D7F0               	goto	l126
  2681  001576  0A01               	xorlw	1	; case 3
  2682  001578  B4D8               	btfsc	status,2,c
  2683  00157A  D7F0               	goto	l127
  2684  00157C  D7F2               	goto	l2153
  2685  00157E                     l129:
  2686  00157E  0012               	return	
  2687  001580                     __end_of_charWrt:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           postinc1	equ	0xFE6
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           postinc2	equ	0xFDE
  2702                           fsr2h	equ	0xFDA
  2703                           fsr2l	equ	0xFD9
  2704                           status	equ	0xFD8
  2705                           
  2706 ;; *************** function _segWrt *****************
  2707 ;; Defined at:
  2708 ;;		line 286 in file "main.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;  segOrd          1    0[COMRAM] unsigned char 
  2711 ;;  state           1    1[COMRAM] unsigned char 
  2712 ;; Auto vars:     Size  Location     Type
  2713 ;;  LCReg           2    4[COMRAM] PTR unsigned char 
  2714 ;;		 -> LCDDATA0(1), 
  2715 ;;  bitSelect       1    6[COMRAM] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;		None               void
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2725 ;;      Params:         2       0       0       0
  2726 ;;      Locals:         3       0       0       0
  2727 ;;      Temps:          2       0       0       0
  2728 ;;      Totals:         7       0       0       0
  2729 ;;Total ram usage:        7 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_showFreq
  2735 ;;		_displayText
  2736 ;; This function uses a non-reentrant model
  2737 ;;
  2738                           
  2739                           	psect	text9
  2740  001328                     __ptext9:
  2741                           	opt stack 0
  2742  001328                     _segWrt:
  2743                           	opt stack 28
  2744                           
  2745                           ;main.c: 288: unsigned char bitSelect;
  2746                           ;main.c: 289: unsigned char *LCReg;
  2747                           ;main.c: 291: if (segOrd > 26)
  2748                           
  2749                           ;incstack = 0
  2750                           ;incstack = 0
  2751  001328  0E1A               	movlw	26
  2752  00132A  6401               	cpfsgt	segWrt@segOrd,c
  2753  00132C  D001               	goto	l1991
  2754  00132E  D02C               	goto	l118
  2755  001330                     l1991:
  2756                           
  2757                           ;main.c: 294: LCReg = (unsigned char *)&LCDDATA0 + (segOrd >> 3);
  2758  001330  3801               	swapf	segWrt@segOrd,w,c
  2759  001332  46E8               	rlncf	wreg,f,c
  2760  001334  0B1F               	andlw	31
  2761  001336  6E03               	movwf	??_segWrt& (0+255),c
  2762  001338  6A04               	clrf	(??_segWrt+1)& (0+255),c
  2763  00133A  0E60               	movlw	96	;volatile
  2764  00133C  2403               	addwf	??_segWrt,w,c
  2765  00133E  6E05               	movwf	segWrt@LCReg,c
  2766  001340  0E0F               	movlw	15	;volatile
  2767  001342  2004               	addwfc	??_segWrt+1,w,c
  2768  001344  6E06               	movwf	segWrt@LCReg+1,c
  2769                           
  2770                           ;main.c: 295: bitSelect = 1 << (segOrd & 0x07);
  2771  001346  C001  F003         	movff	segWrt@segOrd,??_segWrt
  2772  00134A  0E07               	movlw	7
  2773  00134C  1603               	andwf	??_segWrt,f,c
  2774  00134E  0E01               	movlw	1
  2775  001350  6E04               	movwf	(??_segWrt+1)& (0+255),c
  2776  001352  2A03               	incf	??_segWrt,f,c
  2777  001354  D002               	goto	u924
  2778  001356                     u925:
  2779  001356  90D8               	bcf	status,0,c
  2780  001358  3604               	rlcf	??_segWrt+1,f,c
  2781  00135A                     u924:
  2782  00135A  2E03               	decfsz	??_segWrt,f,c
  2783  00135C  D7FC               	goto	u925
  2784  00135E  5004               	movf	??_segWrt+1,w,c
  2785  001360  6E07               	movwf	segWrt@bitSelect,c
  2786                           
  2787                           ;main.c: 297: if (state)
  2788  001362  5002               	movf	segWrt@state,w,c
  2789  001364  B4D8               	btfsc	status,2,c
  2790  001366  D007               	goto	l1997
  2791                           
  2792                           ;main.c: 298: *LCReg |= bitSelect;
  2793  001368  C005  FFD9         	movff	segWrt@LCReg,fsr2l
  2794  00136C  C006  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2795  001370  5007               	movf	segWrt@bitSelect,w,c
  2796  001372  12DF               	iorwf	indf2,f,c
  2797  001374  D009               	goto	l118
  2798  001376                     l1997:
  2799                           
  2800                           ;main.c: 299: else
  2801                           ;main.c: 300: *LCReg &= ~bitSelect;
  2802  001376  5007               	movf	segWrt@bitSelect,w,c
  2803  001378  0AFF               	xorlw	255
  2804  00137A  6E03               	movwf	??_segWrt& (0+255),c
  2805  00137C  C005  FFD9         	movff	segWrt@LCReg,fsr2l
  2806  001380  C006  FFDA         	movff	segWrt@LCReg+1,fsr2h
  2807  001384  5003               	movf	??_segWrt,w,c
  2808  001386  16DF               	andwf	indf2,f,c
  2809  001388                     l118:
  2810  001388  0012               	return	
  2811  00138A                     __end_of_segWrt:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           prodh	equ	0xFF4
  2818                           prodl	equ	0xFF3
  2819                           postinc0	equ	0xFEE
  2820                           wreg	equ	0xFE8
  2821                           postinc1	equ	0xFE6
  2822                           postdec1	equ	0xFE5
  2823                           fsr1l	equ	0xFE1
  2824                           indf2	equ	0xFDF
  2825                           postinc2	equ	0xFDE
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _nextChan *****************
  2831 ;; Defined at:
  2832 ;;		line 685 in file "main.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  chan            2   26[COMRAM] unsigned int 
  2835 ;;  dir             1   28[COMRAM] unsigned char 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  2   26[COMRAM] unsigned int 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  2847 ;;      Params:         3       0       0       0
  2848 ;;      Locals:         0       0       0       0
  2849 ;;      Temps:          2       0       0       0
  2850 ;;      Totals:         5       0       0       0
  2851 ;;Total ram usage:        5 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    5
  2854 ;; This function calls:
  2855 ;;		_errfm
  2856 ;;		_FMfrequenc
  2857 ;; This function is called by:
  2858 ;;		_main
  2859 ;; This function uses a non-reentrant model
  2860 ;;
  2861                           
  2862                           	psect	text10
  2863  000E5E                     __ptext10:
  2864                           	opt stack 0
  2865  000E5E                     _nextChan:
  2866                           	opt stack 24
  2867                           
  2868                           ;main.c: 687: switch (dir)
  2869                           
  2870                           ;incstack = 0
  2871                           ;incstack = 0
  2872  000E5E  D06A               	goto	l2605
  2873  000E60                     l2581:
  2874                           
  2875                           ;main.c: 690: if(chan < 5)
  2876  000E60  0E05               	movlw	5
  2877  000E62  5C1B               	subwf	nextChan@chan,w,c
  2878  000E64  0E00               	movlw	0
  2879  000E66  581C               	subwfb	nextChan@chan+1,w,c
  2880  000E68  B0D8               	btfsc	status,0,c
  2881  000E6A  D016               	goto	l2587
  2882                           
  2883                           ;main.c: 691: {
  2884                           ;main.c: 692: chan++;
  2885  000E6C  4A1B               	infsnz	nextChan@chan,f,c
  2886  000E6E  2A1C               	incf	nextChan@chan+1,f,c
  2887                           
  2888                           ;main.c: 693: FMfrequenc(station[chan]);
  2889  000E70  90D8               	bcf	status,0,c
  2890  000E72  341B               	rlcf	nextChan@chan,w,c
  2891  000E74  6E1E               	movwf	??_nextChan& (0+255),c
  2892  000E76  341C               	rlcf	nextChan@chan+1,w,c
  2893  000E78  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2894  000E7A  0E8B               	movlw	low _station
  2895  000E7C  241E               	addwf	??_nextChan,w,c
  2896  000E7E  6EF6               	movwf	tblptrl,c
  2897  000E80  0E03               	movlw	high _station
  2898  000E82  201F               	addwfc	??_nextChan+1,w,c
  2899  000E84  6EF7               	movwf	tblptrh,c
  2900  000E86  0009               	tblrd		*+
  2901  000E88  CFF5 F013          	movff	tablat,?_FMfrequenc
  2902  000E8C  000A               	tblrd		*-
  2903  000E8E  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2904  000E92  EC15  F009         	call	_FMfrequenc	;wreg free
  2905                           
  2906                           ;main.c: 694: } else {
  2907  000E96  D056               	goto	l220
  2908  000E98                     l2587:
  2909                           
  2910                           ;main.c: 695: chan = 0;
  2911  000E98  0E00               	movlw	0
  2912  000E9A  6E1C               	movwf	nextChan@chan+1,c
  2913  000E9C  0E00               	movlw	0
  2914  000E9E  6E1B               	movwf	nextChan@chan,c
  2915                           
  2916                           ;main.c: 696: FMfrequenc(station[chan]);
  2917  000EA0  90D8               	bcf	status,0,c
  2918  000EA2  341B               	rlcf	nextChan@chan,w,c
  2919  000EA4  6E1E               	movwf	??_nextChan& (0+255),c
  2920  000EA6  341C               	rlcf	nextChan@chan+1,w,c
  2921  000EA8  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2922  000EAA  0E8B               	movlw	low _station
  2923  000EAC  241E               	addwf	??_nextChan,w,c
  2924  000EAE  6EF6               	movwf	tblptrl,c
  2925  000EB0  0E03               	movlw	high _station
  2926  000EB2  201F               	addwfc	??_nextChan+1,w,c
  2927  000EB4  6EF7               	movwf	tblptrh,c
  2928  000EB6  0009               	tblrd		*+
  2929  000EB8  CFF5 F013          	movff	tablat,?_FMfrequenc
  2930  000EBC  000A               	tblrd		*-
  2931  000EBE  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2932  000EC2  EC15  F009         	call	_FMfrequenc	;wreg free
  2933  000EC6  D03E               	goto	l220
  2934  000EC8                     l2591:
  2935                           
  2936                           ;main.c: 702: if(chan > 0)
  2937  000EC8  501C               	movf	nextChan@chan+1,w,c
  2938  000ECA  101B               	iorwf	nextChan@chan,w,c
  2939  000ECC  B4D8               	btfsc	status,2,c
  2940  000ECE  D017               	goto	l2597
  2941                           
  2942                           ;main.c: 703: {
  2943                           ;main.c: 704: chan--;
  2944  000ED0  061B               	decf	nextChan@chan,f,c
  2945  000ED2  A0D8               	btfss	status,0,c
  2946  000ED4  061C               	decf	nextChan@chan+1,f,c
  2947                           
  2948                           ;main.c: 705: FMfrequenc(station[chan]);
  2949  000ED6  90D8               	bcf	status,0,c
  2950  000ED8  341B               	rlcf	nextChan@chan,w,c
  2951  000EDA  6E1E               	movwf	??_nextChan& (0+255),c
  2952  000EDC  341C               	rlcf	nextChan@chan+1,w,c
  2953  000EDE  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2954  000EE0  0E8B               	movlw	low _station
  2955  000EE2  241E               	addwf	??_nextChan,w,c
  2956  000EE4  6EF6               	movwf	tblptrl,c
  2957  000EE6  0E03               	movlw	high _station
  2958  000EE8  201F               	addwfc	??_nextChan+1,w,c
  2959  000EEA  6EF7               	movwf	tblptrh,c
  2960  000EEC  0009               	tblrd		*+
  2961  000EEE  CFF5 F013          	movff	tablat,?_FMfrequenc
  2962  000EF2  000A               	tblrd		*-
  2963  000EF4  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2964  000EF8  EC15  F009         	call	_FMfrequenc	;wreg free
  2965                           
  2966                           ;main.c: 706: } else {
  2967  000EFC  D023               	goto	l220
  2968  000EFE                     l2597:
  2969                           
  2970                           ;main.c: 707: chan = 5;
  2971  000EFE  0E00               	movlw	0
  2972  000F00  6E1C               	movwf	nextChan@chan+1,c
  2973  000F02  0E05               	movlw	5
  2974  000F04  6E1B               	movwf	nextChan@chan,c
  2975                           
  2976                           ;main.c: 708: FMfrequenc(station[chan]);
  2977  000F06  90D8               	bcf	status,0,c
  2978  000F08  341B               	rlcf	nextChan@chan,w,c
  2979  000F0A  6E1E               	movwf	??_nextChan& (0+255),c
  2980  000F0C  341C               	rlcf	nextChan@chan+1,w,c
  2981  000F0E  6E1F               	movwf	(??_nextChan+1)& (0+255),c
  2982  000F10  0E8B               	movlw	low _station
  2983  000F12  241E               	addwf	??_nextChan,w,c
  2984  000F14  6EF6               	movwf	tblptrl,c
  2985  000F16  0E03               	movlw	high _station
  2986  000F18  201F               	addwfc	??_nextChan+1,w,c
  2987  000F1A  6EF7               	movwf	tblptrh,c
  2988  000F1C  0009               	tblrd		*+
  2989  000F1E  CFF5 F013          	movff	tablat,?_FMfrequenc
  2990  000F22  000A               	tblrd		*-
  2991  000F24  CFF5 F014          	movff	tablat,?_FMfrequenc+1
  2992  000F28  EC15  F009         	call	_FMfrequenc	;wreg free
  2993  000F2C  D00B               	goto	l220
  2994  000F2E                     l2601:
  2995                           
  2996                           ;main.c: 713: errfm();
  2997  000F2E  EC74  F00B         	call	_errfm	;wreg free
  2998                           
  2999                           ;main.c: 714: break;
  3000  000F32  D008               	goto	l220
  3001  000F34                     l2605:
  3002  000F34  501D               	movf	nextChan@dir,w,c
  3003                           
  3004                           ; Switch size 1, requested type "space"
  3005                           ; Number of cases is 2, Range of values is 0 to 1
  3006                           ; switch strategies available:
  3007                           ; Name         Instructions Cycles
  3008                           ; simple_byte            7     4 (average)
  3009                           ;	Chosen strategy is simple_byte
  3010  000F36  0A00               	xorlw	0	; case 0
  3011  000F38  B4D8               	btfsc	status,2,c
  3012  000F3A  D7C6               	goto	l2591
  3013  000F3C  0A01               	xorlw	1	; case 1
  3014  000F3E  B4D8               	btfsc	status,2,c
  3015  000F40  D78F               	goto	l2581
  3016  000F42  D7F5               	goto	l2601
  3017  000F44                     l220:
  3018                           
  3019                           ;main.c: 717: return chan;
  3020  000F44  C01B  F01B         	movff	nextChan@chan,?_nextChan
  3021  000F48  C01C  F01C         	movff	nextChan@chan+1,?_nextChan+1
  3022  000F4C  0012               	return	
  3023  000F4E                     __end_of_nextChan:
  3024                           	opt stack 0
  3025                           tblptru	equ	0xFF8
  3026                           tblptrh	equ	0xFF7
  3027                           tblptrl	equ	0xFF6
  3028                           tablat	equ	0xFF5
  3029                           prodh	equ	0xFF4
  3030                           prodl	equ	0xFF3
  3031                           postinc0	equ	0xFEE
  3032                           wreg	equ	0xFE8
  3033                           postinc1	equ	0xFE6
  3034                           postdec1	equ	0xFE5
  3035                           fsr1l	equ	0xFE1
  3036                           indf2	equ	0xFDF
  3037                           postinc2	equ	0xFDE
  3038                           fsr2h	equ	0xFDA
  3039                           fsr2l	equ	0xFD9
  3040                           status	equ	0xFD8
  3041                           
  3042 ;; *************** function _volSet *****************
  3043 ;; Defined at:
  3044 ;;		line 622 in file "main.c"
  3045 ;; Parameters:    Size  Location     Type
  3046 ;;  vol             2    6[COMRAM] unsigned int 
  3047 ;;  dir             1    8[COMRAM] unsigned char 
  3048 ;; Auto vars:     Size  Location     Type
  3049 ;;		None
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  2    6[COMRAM] unsigned int 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3059 ;;      Params:         3       0       0       0
  3060 ;;      Locals:         0       0       0       0
  3061 ;;      Temps:          4       0       0       0
  3062 ;;      Totals:         7       0       0       0
  3063 ;;Total ram usage:        7 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    3
  3066 ;; This function calls:
  3067 ;;		_errfm
  3068 ;;		_FMwrite
  3069 ;; This function is called by:
  3070 ;;		_main
  3071 ;; This function uses a non-reentrant model
  3072 ;;
  3073                           
  3074                           	psect	text11
  3075  000ACA                     __ptext11:
  3076                           	opt stack 0
  3077  000ACA                     _volSet:
  3078                           	opt stack 26
  3079                           
  3080                           ;main.c: 626: switch (dir)
  3081                           
  3082                           ;incstack = 0
  3083                           ;incstack = 0
  3084  000ACA  D0B4               	goto	l2401
  3085  000ACC                     l2365:
  3086                           
  3087                           ;main.c: 629: if(vol < 18)
  3088  000ACC  0E12               	movlw	18
  3089  000ACE  5C07               	subwf	volSet@vol,w,c
  3090  000AD0  0E00               	movlw	0
  3091  000AD2  5808               	subwfb	volSet@vol+1,w,c
  3092  000AD4  B0D8               	btfsc	status,0,c
  3093  000AD6  D0B6               	goto	l209
  3094                           
  3095                           ;main.c: 630: {
  3096                           ;main.c: 631: vol++;
  3097  000AD8  4A07               	infsnz	volSet@vol,f,c
  3098  000ADA  2A08               	incf	volSet@vol+1,f,c
  3099                           
  3100                           ;main.c: 634: regImg[3] &= 0xF87F;
  3101  000ADC  0100               	movlb	0	; () banked
  3102  000ADE  0E7F               	movlw	127
  3103  000AE0  0100               	movlb	0	; () banked
  3104  000AE2  17C0               	andwf	(_regImg+6)& (0+255),f,b
  3105  000AE4  0EF8               	movlw	248
  3106  000AE6  0100               	movlb	0	; () banked
  3107  000AE8  17C1               	andwf	(_regImg+7)& (0+255),f,b
  3108                           
  3109                           ; BSR set to: 0
  3110                           ;main.c: 635: regImg[14] &= 0x0FFF;
  3111  000AEA  0100               	movlb	0	; () banked
  3112  000AEC  0EFF               	movlw	255
  3113  000AEE  0100               	movlb	0	; () banked
  3114  000AF0  17D6               	andwf	(_regImg+28)& (0+255),f,b
  3115  000AF2  0E0F               	movlw	15
  3116  000AF4  0100               	movlb	0	; () banked
  3117  000AF6  17D7               	andwf	(_regImg+29)& (0+255),f,b
  3118                           
  3119                           ; BSR set to: 0
  3120                           ;main.c: 638: regImg[3] |= volumePair[0][vol];
  3121  000AF8  90D8               	bcf	status,0,c
  3122  000AFA  3407               	rlcf	volSet@vol,w,c
  3123  000AFC  6E0A               	movwf	??_volSet& (0+255),c
  3124  000AFE  3408               	rlcf	volSet@vol+1,w,c
  3125  000B00  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3126  000B02  0E00               	movlw	low _volumePair
  3127  000B04  240A               	addwf	??_volSet,w,c
  3128  000B06  6EF6               	movwf	tblptrl,c
  3129  000B08  0E03               	movlw	high _volumePair
  3130  000B0A  200B               	addwfc	??_volSet+1,w,c
  3131  000B0C  6EF7               	movwf	tblptrh,c
  3132  000B0E  0009               	tblrd		*+
  3133  000B10  CFF5 F00C          	movff	tablat,??_volSet+2
  3134  000B14  0009               	tblrd		*+
  3135  000B16  CFF5 F00D          	movff	tablat,??_volSet+3
  3136  000B1A  500C               	movf	??_volSet+2,w,c
  3137  000B1C  0100               	movlb	0	; () banked
  3138  000B1E  0100               	movlb	0	; () banked
  3139  000B20  13C0               	iorwf	(_regImg+6)& (0+255),f,b
  3140  000B22  500D               	movf	??_volSet+3,w,c
  3141  000B24  0100               	movlb	0	; () banked
  3142  000B26  0100               	movlb	0	; () banked
  3143  000B28  13C1               	iorwf	(_regImg+7)& (0+255),f,b
  3144                           
  3145                           ; BSR set to: 0
  3146                           ;main.c: 639: regImg[14] |= volumePair[1][vol];
  3147  000B2A  90D8               	bcf	status,0,c
  3148  000B2C  3407               	rlcf	volSet@vol,w,c
  3149  000B2E  6E0A               	movwf	??_volSet& (0+255),c
  3150  000B30  3408               	rlcf	volSet@vol+1,w,c
  3151  000B32  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3152  000B34  0E26               	movlw	38
  3153  000B36  260A               	addwf	??_volSet,f,c
  3154  000B38  0E00               	movlw	0
  3155  000B3A  220B               	addwfc	??_volSet+1,f,c
  3156  000B3C  0E00               	movlw	low _volumePair
  3157  000B3E  240A               	addwf	??_volSet,w,c
  3158  000B40  6EF6               	movwf	tblptrl,c
  3159  000B42  0E03               	movlw	high _volumePair
  3160  000B44  200B               	addwfc	??_volSet+1,w,c
  3161  000B46  6EF7               	movwf	tblptrh,c
  3162  000B48  0009               	tblrd		*+
  3163  000B4A  CFF5 F00C          	movff	tablat,??_volSet+2
  3164  000B4E  0009               	tblrd		*+
  3165  000B50  CFF5 F00D          	movff	tablat,??_volSet+3
  3166  000B54  500C               	movf	??_volSet+2,w,c
  3167  000B56  0100               	movlb	0	; () banked
  3168  000B58  0100               	movlb	0	; () banked
  3169  000B5A  13D6               	iorwf	(_regImg+28)& (0+255),f,b
  3170  000B5C  500D               	movf	??_volSet+3,w,c
  3171  000B5E  0100               	movlb	0	; () banked
  3172  000B60  0100               	movlb	0	; () banked
  3173  000B62  13D7               	iorwf	(_regImg+29)& (0+255),f,b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;main.c: 641: FMwrite(3);
  3177  000B64  6E0A               	movwf	??_volSet& (0+255),c
  3178  000B66  0E03               	movlw	3
  3179  000B68  6E02               	movwf	?_FMwrite,c
  3180  000B6A  500A               	movf	??_volSet& (0+255),w,c
  3181  000B6C  EC85  F008         	call	_FMwrite	;wreg free
  3182                           
  3183                           ;main.c: 642: FMwrite(14);
  3184  000B70  6E0A               	movwf	??_volSet& (0+255),c
  3185  000B72  0E0E               	movlw	14
  3186  000B74  6E02               	movwf	?_FMwrite,c
  3187  000B76  500A               	movf	??_volSet& (0+255),w,c
  3188  000B78  EC85  F008         	call	_FMwrite	;wreg free
  3189  000B7C  D063               	goto	l209
  3190  000B7E                     l2381:
  3191                           
  3192                           ;main.c: 647: if(vol > 0)
  3193  000B7E  5008               	movf	volSet@vol+1,w,c
  3194  000B80  1007               	iorwf	volSet@vol,w,c
  3195  000B82  B4D8               	btfsc	status,2,c
  3196  000B84  D05F               	goto	l209
  3197                           
  3198                           ;main.c: 648: {
  3199                           ;main.c: 649: vol--;
  3200  000B86  0607               	decf	volSet@vol,f,c
  3201  000B88  A0D8               	btfss	status,0,c
  3202  000B8A  0608               	decf	volSet@vol+1,f,c
  3203                           
  3204                           ;main.c: 652: regImg[3] &= 0xF87F;
  3205  000B8C  0100               	movlb	0	; () banked
  3206  000B8E  0E7F               	movlw	127
  3207  000B90  0100               	movlb	0	; () banked
  3208  000B92  17C0               	andwf	(_regImg+6)& (0+255),f,b
  3209  000B94  0EF8               	movlw	248
  3210  000B96  0100               	movlb	0	; () banked
  3211  000B98  17C1               	andwf	(_regImg+7)& (0+255),f,b
  3212                           
  3213                           ; BSR set to: 0
  3214                           ;main.c: 653: regImg[14] &= 0x0FFF;
  3215  000B9A  0100               	movlb	0	; () banked
  3216  000B9C  0EFF               	movlw	255
  3217  000B9E  0100               	movlb	0	; () banked
  3218  000BA0  17D6               	andwf	(_regImg+28)& (0+255),f,b
  3219  000BA2  0E0F               	movlw	15
  3220  000BA4  0100               	movlb	0	; () banked
  3221  000BA6  17D7               	andwf	(_regImg+29)& (0+255),f,b
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;main.c: 655: regImg[3] |= volumePair[0][vol];
  3225  000BA8  90D8               	bcf	status,0,c
  3226  000BAA  3407               	rlcf	volSet@vol,w,c
  3227  000BAC  6E0A               	movwf	??_volSet& (0+255),c
  3228  000BAE  3408               	rlcf	volSet@vol+1,w,c
  3229  000BB0  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3230  000BB2  0E00               	movlw	low _volumePair
  3231  000BB4  240A               	addwf	??_volSet,w,c
  3232  000BB6  6EF6               	movwf	tblptrl,c
  3233  000BB8  0E03               	movlw	high _volumePair
  3234  000BBA  200B               	addwfc	??_volSet+1,w,c
  3235  000BBC  6EF7               	movwf	tblptrh,c
  3236  000BBE  0009               	tblrd		*+
  3237  000BC0  CFF5 F00C          	movff	tablat,??_volSet+2
  3238  000BC4  0009               	tblrd		*+
  3239  000BC6  CFF5 F00D          	movff	tablat,??_volSet+3
  3240  000BCA  500C               	movf	??_volSet+2,w,c
  3241  000BCC  0100               	movlb	0	; () banked
  3242  000BCE  0100               	movlb	0	; () banked
  3243  000BD0  13C0               	iorwf	(_regImg+6)& (0+255),f,b
  3244  000BD2  500D               	movf	??_volSet+3,w,c
  3245  000BD4  0100               	movlb	0	; () banked
  3246  000BD6  0100               	movlb	0	; () banked
  3247  000BD8  13C1               	iorwf	(_regImg+7)& (0+255),f,b
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;main.c: 656: regImg[14] |= volumePair[1][vol];
  3251  000BDA  90D8               	bcf	status,0,c
  3252  000BDC  3407               	rlcf	volSet@vol,w,c
  3253  000BDE  6E0A               	movwf	??_volSet& (0+255),c
  3254  000BE0  3408               	rlcf	volSet@vol+1,w,c
  3255  000BE2  6E0B               	movwf	(??_volSet+1)& (0+255),c
  3256  000BE4  0E26               	movlw	38
  3257  000BE6  260A               	addwf	??_volSet,f,c
  3258  000BE8  0E00               	movlw	0
  3259  000BEA  220B               	addwfc	??_volSet+1,f,c
  3260  000BEC  0E00               	movlw	low _volumePair
  3261  000BEE  240A               	addwf	??_volSet,w,c
  3262  000BF0  6EF6               	movwf	tblptrl,c
  3263  000BF2  0E03               	movlw	high _volumePair
  3264  000BF4  200B               	addwfc	??_volSet+1,w,c
  3265  000BF6  6EF7               	movwf	tblptrh,c
  3266  000BF8  0009               	tblrd		*+
  3267  000BFA  CFF5 F00C          	movff	tablat,??_volSet+2
  3268  000BFE  0009               	tblrd		*+
  3269  000C00  CFF5 F00D          	movff	tablat,??_volSet+3
  3270  000C04  500C               	movf	??_volSet+2,w,c
  3271  000C06  0100               	movlb	0	; () banked
  3272  000C08  0100               	movlb	0	; () banked
  3273  000C0A  13D6               	iorwf	(_regImg+28)& (0+255),f,b
  3274  000C0C  500D               	movf	??_volSet+3,w,c
  3275  000C0E  0100               	movlb	0	; () banked
  3276  000C10  0100               	movlb	0	; () banked
  3277  000C12  13D7               	iorwf	(_regImg+29)& (0+255),f,b
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;main.c: 657: FMwrite(3);
  3281  000C14  6E0A               	movwf	??_volSet& (0+255),c
  3282  000C16  0E03               	movlw	3
  3283  000C18  6E02               	movwf	?_FMwrite,c
  3284  000C1A  500A               	movf	??_volSet& (0+255),w,c
  3285  000C1C  EC85  F008         	call	_FMwrite	;wreg free
  3286                           
  3287                           ;main.c: 658: FMwrite(14);
  3288  000C20  6E0A               	movwf	??_volSet& (0+255),c
  3289  000C22  0E0E               	movlw	14
  3290  000C24  6E02               	movwf	?_FMwrite,c
  3291  000C26  500A               	movf	??_volSet& (0+255),w,c
  3292  000C28  EC85  F008         	call	_FMwrite	;wreg free
  3293  000C2C  D00B               	goto	l209
  3294  000C2E                     l2397:
  3295                           
  3296                           ;main.c: 664: errfm();
  3297  000C2E  EC74  F00B         	call	_errfm	;wreg free
  3298                           
  3299                           ;main.c: 665: break;
  3300  000C32  D008               	goto	l209
  3301  000C34                     l2401:
  3302  000C34  5009               	movf	volSet@dir,w,c
  3303                           
  3304                           ; Switch size 1, requested type "space"
  3305                           ; Number of cases is 2, Range of values is 0 to 1
  3306                           ; switch strategies available:
  3307                           ; Name         Instructions Cycles
  3308                           ; simple_byte            7     4 (average)
  3309                           ;	Chosen strategy is simple_byte
  3310  000C36  0A00               	xorlw	0	; case 0
  3311  000C38  B4D8               	btfsc	status,2,c
  3312  000C3A  D7A1               	goto	l2381
  3313  000C3C  0A01               	xorlw	1	; case 1
  3314  000C3E  B4D8               	btfsc	status,2,c
  3315  000C40  D745               	goto	l2365
  3316  000C42  D7F5               	goto	l2397
  3317  000C44                     l209:
  3318                           
  3319                           ;main.c: 668: return vol;
  3320  000C44  C007  F007         	movff	volSet@vol,?_volSet
  3321  000C48  C008  F008         	movff	volSet@vol+1,?_volSet+1
  3322  000C4C  0012               	return	
  3323  000C4E                     __end_of_volSet:
  3324                           	opt stack 0
  3325                           tblptru	equ	0xFF8
  3326                           tblptrh	equ	0xFF7
  3327                           tblptrl	equ	0xFF6
  3328                           tablat	equ	0xFF5
  3329                           prodh	equ	0xFF4
  3330                           prodl	equ	0xFF3
  3331                           postinc0	equ	0xFEE
  3332                           wreg	equ	0xFE8
  3333                           postinc1	equ	0xFE6
  3334                           postdec1	equ	0xFE5
  3335                           fsr1l	equ	0xFE1
  3336                           indf2	equ	0xFDF
  3337                           postinc2	equ	0xFDE
  3338                           fsr2h	equ	0xFDA
  3339                           fsr2l	equ	0xFD9
  3340                           status	equ	0xFD8
  3341                           
  3342 ;; *************** function _FMvers *****************
  3343 ;; Defined at:
  3344 ;;		line 585 in file "main.c"
  3345 ;; Parameters:    Size  Location     Type
  3346 ;;  vsn             2   12[COMRAM] PTR unsigned int 
  3347 ;;		 -> main@ui(2), 
  3348 ;; Auto vars:     Size  Location     Type
  3349 ;;		None
  3350 ;; Return value:  Size  Location     Type
  3351 ;;                  1    wreg      unsigned char 
  3352 ;; Registers used:
  3353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3354 ;; Tracked objects:
  3355 ;;		On entry : 0/0
  3356 ;;		On exit  : 0/0
  3357 ;;		Unchanged: 0/0
  3358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3359 ;;      Params:         2       0       0       0
  3360 ;;      Locals:         0       0       0       0
  3361 ;;      Temps:          1       0       0       0
  3362 ;;      Totals:         3       0       0       0
  3363 ;;Total ram usage:        3 bytes
  3364 ;; Hardware stack levels used:    1
  3365 ;; Hardware stack levels required when called:    3
  3366 ;; This function calls:
  3367 ;;		_FMread
  3368 ;; This function is called by:
  3369 ;;		_main
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text12
  3374  0016D2                     __ptext12:
  3375                           	opt stack 0
  3376  0016D2                     _FMvers:
  3377                           	opt stack 26
  3378                           
  3379                           ;main.c: 586: if (FMread(0x1C, vsn) != 0) return 1;
  3380                           
  3381                           ;incstack = 0
  3382                           ;incstack = 0
  3383  0016D2  6E0F               	movwf	??_FMvers& (0+255),c
  3384  0016D4  0E1C               	movlw	28
  3385  0016D6  6E02               	movwf	?_FMread,c
  3386  0016D8  500F               	movf	??_FMvers& (0+255),w,c
  3387  0016DA  C00D  F003         	movff	FMvers@vsn,?_FMread+1
  3388  0016DE  C00E  F004         	movff	FMvers@vsn+1,?_FMread+2
  3389  0016E2  EC18  F008         	call	_FMread	;wreg free
  3390                           
  3391                           ;main.c: 587: return 0;
  3392                           ;	Return value of _FMvers is never used
  3393                           
  3394                           ;	Return value of _FMvers is never used
  3395  0016E6  0012               	return	
  3396  0016E8                     __end_of_FMvers:
  3397                           	opt stack 0
  3398                           tblptru	equ	0xFF8
  3399                           tblptrh	equ	0xFF7
  3400                           tblptrl	equ	0xFF6
  3401                           tablat	equ	0xFF5
  3402                           prodh	equ	0xFF4
  3403                           prodl	equ	0xFF3
  3404                           postinc0	equ	0xFEE
  3405                           wreg	equ	0xFE8
  3406                           postinc1	equ	0xFE6
  3407                           postdec1	equ	0xFE5
  3408                           fsr1l	equ	0xFE1
  3409                           indf2	equ	0xFDF
  3410                           postinc2	equ	0xFDE
  3411                           fsr2h	equ	0xFDA
  3412                           fsr2l	equ	0xFD9
  3413                           status	equ	0xFD8
  3414                           
  3415 ;; *************** function _FMinit *****************
  3416 ;; Defined at:
  3417 ;;		line 510 in file "main.c"
  3418 ;; Parameters:    Size  Location     Type
  3419 ;;		None
  3420 ;; Auto vars:     Size  Location     Type
  3421 ;;  dat             2   20[COMRAM] unsigned int 
  3422 ;;  ad              1   22[COMRAM] unsigned char 
  3423 ;; Return value:  Size  Location     Type
  3424 ;;                  1    wreg      unsigned char 
  3425 ;; Registers used:
  3426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3427 ;; Tracked objects:
  3428 ;;		On entry : 0/0
  3429 ;;		On exit  : 0/0
  3430 ;;		Unchanged: 0/0
  3431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3432 ;;      Params:         0       0       0       0
  3433 ;;      Locals:         3       0       0       0
  3434 ;;      Temps:          2       0       0       0
  3435 ;;      Totals:         5       0       0       0
  3436 ;;Total ram usage:        5 bytes
  3437 ;; Hardware stack levels used:    1
  3438 ;; Hardware stack levels required when called:    4
  3439 ;; This function calls:
  3440 ;;		_dly
  3441 ;;		_FMwrite
  3442 ;;		_FMready
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448                           	psect	text13
  3449  000F4E                     __ptext13:
  3450                           	opt stack 0
  3451  000F4E                     _FMinit:
  3452                           	opt stack 25
  3453                           
  3454                           ;main.c: 512: unsigned char ad;
  3455                           ;main.c: 513: unsigned int dat;
  3456                           ;main.c: 516: for(ad = 0; ad < 18; ad++) regImg[ad] = regDflt[ad];
  3457                           
  3458                           ;incstack = 0
  3459                           ;incstack = 0
  3460  000F4E  6E13               	movwf	??_FMinit& (0+255),c
  3461  000F50  0E00               	movlw	0
  3462  000F52  6E17               	movwf	FMinit@ad,c
  3463  000F54  5013               	movf	??_FMinit& (0+255),w,c
  3464  000F56  D01D               	goto	L10
  3465  000F58                     l2431:
  3466  000F58  5017               	movf	FMinit@ad,w,c
  3467  000F5A  0D02               	mullw	2
  3468  000F5C  0E4C               	movlw	low _regDflt
  3469  000F5E  24F3               	addwf	prodl,w,c
  3470  000F60  6EF6               	movwf	tblptrl,c
  3471  000F62  0E03               	movlw	high _regDflt
  3472  000F64  20F4               	addwfc	prodh,w,c
  3473  000F66  6EF7               	movwf	tblptrh,c
  3474  000F68  0009               	tblrd		*+
  3475  000F6A  CFF5 F013          	movff	tablat,??_FMinit
  3476  000F6E  0009               	tblrd		*+
  3477  000F70  CFF5 F014          	movff	tablat,??_FMinit+1
  3478  000F74  5017               	movf	FMinit@ad,w,c
  3479  000F76  0D02               	mullw	2
  3480  000F78  0100               	movlb	0	; () banked
  3481  000F7A  0EBA               	movlw	low _regImg
  3482  000F7C  24F3               	addwf	prodl,w,c
  3483  000F7E  6ED9               	movwf	fsr2l,c
  3484  000F80  0100               	movlb	0	; () banked
  3485  000F82  0E00               	movlw	high _regImg
  3486  000F84  20F4               	addwfc	prodh,w,c
  3487  000F86  6EDA               	movwf	fsr2h,c
  3488  000F88  C013  FFDE         	movff	??_FMinit,postinc2
  3489  000F8C  C014  FFDD         	movff	??_FMinit+1,postdec2
  3490                           
  3491                           ; BSR set to: 0
  3492  000F90  2A17               	incf	FMinit@ad,f,c
  3493  000F92                     L10:
  3494                           
  3495                           ; BSR set to: 0
  3496  000F92  0E11               	movlw	17
  3497  000F94  6417               	cpfsgt	FMinit@ad,c
  3498  000F96  D7E0               	goto	l2431
  3499                           
  3500                           ;main.c: 518: dat = regImg[0];
  3501  000F98  C0BA  F015         	movff	_regImg,FMinit@dat
  3502  000F9C  C0BB  F016         	movff	_regImg+1,FMinit@dat+1
  3503                           
  3504                           ;main.c: 519: regImg[0] &= ~1;
  3505  000FA0  0100               	movlb	0	; () banked
  3506  000FA2  0100               	movlb	0	; () banked
  3507  000FA4  91BA               	bcf	_regImg& (0+255),0,b
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;main.c: 520: if (FMwrite(0) != 0) return 1;
  3511  000FA6  6E13               	movwf	??_FMinit& (0+255),c
  3512  000FA8  0E00               	movlw	0
  3513  000FAA  6E02               	movwf	?_FMwrite,c
  3514  000FAC  5013               	movf	??_FMinit& (0+255),w,c
  3515  000FAE  EC85  F008         	call	_FMwrite	;wreg free
  3516  000FB2  0900               	iorlw	0
  3517  000FB4  A4D8               	btfss	status,2,c
  3518  000FB6  D021               	goto	u1480
  3519                           
  3520                           ;main.c: 521: for(ad = 1; ad < 18; ad++) {
  3521  000FB8  6E13               	movwf	??_FMinit& (0+255),c
  3522  000FBA  0E01               	movlw	1
  3523  000FBC  6E17               	movwf	FMinit@ad,c
  3524  000FBE  5013               	movf	??_FMinit& (0+255),w,c
  3525  000FC0  D008               	goto	L11
  3526  000FC2                     l2451:
  3527                           
  3528                           ;main.c: 522: if (FMwrite(ad) != 0)return 1;
  3529  000FC2  C017  F002         	movff	FMinit@ad,?_FMwrite
  3530  000FC6  EC85  F008         	call	_FMwrite	;wreg free
  3531  000FCA  0900               	iorlw	0
  3532  000FCC  A4D8               	btfss	status,2,c
  3533  000FCE  D015               	goto	u1480
  3534  000FD0  2A17               	incf	FMinit@ad,f,c
  3535  000FD2                     L11:
  3536  000FD2  0E11               	movlw	17
  3537  000FD4  6417               	cpfsgt	FMinit@ad,c
  3538  000FD6  D7F5               	goto	l2451
  3539                           
  3540                           ;main.c: 523: }
  3541                           ;main.c: 525: regImg[0] = dat | 1;
  3542  000FD8  0E01               	movlw	1
  3543  000FDA  1015               	iorwf	FMinit@dat,w,c
  3544  000FDC  0100               	movlb	0	; () banked
  3545  000FDE  0100               	movlb	0	; () banked
  3546  000FE0  6FBA               	movwf	_regImg& (0+255),b
  3547  000FE2  5016               	movf	FMinit@dat+1,w,c
  3548  000FE4  0100               	movlb	0	; () banked
  3549  000FE6  6FBB               	movwf	(_regImg+1)& (0+255),b
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;main.c: 526: if (FMwrite(0) != 0) return 1;
  3553  000FE8  6E13               	movwf	??_FMinit& (0+255),c
  3554  000FEA  0E00               	movlw	0
  3555  000FEC  6E02               	movwf	?_FMwrite,c
  3556  000FEE  5013               	movf	??_FMinit& (0+255),w,c
  3557  000FF0  EC85  F008         	call	_FMwrite	;wreg free
  3558  000FF4  0900               	iorlw	0
  3559  000FF6  B4D8               	btfsc	status,2,c
  3560  000FF8  D002               	goto	l2469
  3561  000FFA                     u1480:
  3562  000FFA  0E01               	movlw	1
  3563  000FFC  D018               	goto	l180
  3564  000FFE                     l2469:
  3565                           
  3566                           ;main.c: 527: dly(20);
  3567  000FFE  0E00               	movlw	0
  3568  001000  6E02               	movwf	?_dly+1,c
  3569  001002  0E14               	movlw	20
  3570  001004  6E01               	movwf	?_dly,c
  3571  001006  EC00  F00B         	call	_dly	;wreg free
  3572                           
  3573                           ;main.c: 528: while (FMready(&dat), !dat) dly(2);
  3574  00100A  D006               	goto	l2473
  3575  00100C                     l2471:
  3576  00100C  0E00               	movlw	0
  3577  00100E  6E02               	movwf	?_dly+1,c
  3578  001010  0E02               	movlw	2
  3579  001012  6E01               	movwf	?_dly,c
  3580  001014  EC00  F00B         	call	_dly	;wreg free
  3581  001018                     l2473:
  3582  001018  0E00               	movlw	high FMinit@dat
  3583  00101A  6E0E               	movwf	?_FMready+1,c
  3584  00101C  0E15               	movlw	low FMinit@dat
  3585  00101E  6E0D               	movwf	?_FMready,c
  3586  001020  EC76  F00A         	call	_FMready	;wreg free
  3587  001024  5016               	movf	FMinit@dat+1,w,c
  3588  001026  1015               	iorwf	FMinit@dat,w,c
  3589  001028  B4D8               	btfsc	status,2,c
  3590  00102A  D7F0               	goto	l2471
  3591                           
  3592                           ;main.c: 529: return 0;
  3593  00102C  0E00               	movlw	0
  3594  00102E                     l180:
  3595  00102E  0012               	return	
  3596  001030                     __end_of_FMinit:
  3597                           	opt stack 0
  3598                           tblptru	equ	0xFF8
  3599                           tblptrh	equ	0xFF7
  3600                           tblptrl	equ	0xFF6
  3601                           tablat	equ	0xFF5
  3602                           prodh	equ	0xFF4
  3603                           prodl	equ	0xFF3
  3604                           postinc0	equ	0xFEE
  3605                           wreg	equ	0xFE8
  3606                           postinc1	equ	0xFE6
  3607                           postdec1	equ	0xFE5
  3608                           fsr1l	equ	0xFE1
  3609                           indf2	equ	0xFDF
  3610                           postinc2	equ	0xFDE
  3611                           postdec2	equ	0xFDD
  3612                           fsr2h	equ	0xFDA
  3613                           fsr2l	equ	0xFD9
  3614                           status	equ	0xFD8
  3615                           
  3616 ;; *************** function _manualTune *****************
  3617 ;; Defined at:
  3618 ;;		line 343 in file "main.c"
  3619 ;; Parameters:    Size  Location     Type
  3620 ;;  freq            2   26[COMRAM] unsigned int 
  3621 ;;  dir             1   28[COMRAM] unsigned char 
  3622 ;; Auto vars:     Size  Location     Type
  3623 ;;		None
  3624 ;; Return value:  Size  Location     Type
  3625 ;;                  2   26[COMRAM] unsigned int 
  3626 ;; Registers used:
  3627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3628 ;; Tracked objects:
  3629 ;;		On entry : 0/0
  3630 ;;		On exit  : 0/0
  3631 ;;		Unchanged: 0/0
  3632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3633 ;;      Params:         3       0       0       0
  3634 ;;      Locals:         0       0       0       0
  3635 ;;      Temps:          0       0       0       0
  3636 ;;      Totals:         3       0       0       0
  3637 ;;Total ram usage:        3 bytes
  3638 ;; Hardware stack levels used:    1
  3639 ;; Hardware stack levels required when called:    5
  3640 ;; This function calls:
  3641 ;;		_errfm
  3642 ;;		_FMfrequenc
  3643 ;; This function is called by:
  3644 ;;		_main
  3645 ;; This function uses a non-reentrant model
  3646 ;;
  3647                           
  3648                           	psect	text14
  3649  00119E                     __ptext14:
  3650                           	opt stack 0
  3651  00119E                     _manualTune:
  3652                           	opt stack 24
  3653                           
  3654                           ;main.c: 346: switch (dir)
  3655                           
  3656                           ;incstack = 0
  3657                           ;incstack = 0
  3658  00119E  D038               	goto	l2577
  3659  0011A0                     l2553:
  3660                           
  3661                           ;main.c: 349: if(freq < 1080)
  3662  0011A0  0E38               	movlw	56
  3663  0011A2  5C1B               	subwf	manualTune@freq,w,c
  3664  0011A4  0E04               	movlw	4
  3665  0011A6  581C               	subwfb	manualTune@freq+1,w,c
  3666  0011A8  B0D8               	btfsc	status,0,c
  3667  0011AA  D009               	goto	l2559
  3668                           
  3669                           ;main.c: 350: {
  3670                           ;main.c: 351: freq++;
  3671  0011AC  4A1B               	infsnz	manualTune@freq,f,c
  3672  0011AE  2A1C               	incf	manualTune@freq+1,f,c
  3673                           
  3674                           ;main.c: 352: FMfrequenc(freq);
  3675  0011B0  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3676  0011B4  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3677  0011B8  EC15  F009         	call	_FMfrequenc	;wreg free
  3678                           
  3679                           ;main.c: 353: } else {
  3680  0011BC  D031               	goto	l136
  3681  0011BE                     l2559:
  3682                           
  3683                           ;main.c: 354: freq = 875;
  3684  0011BE  0E03               	movlw	3
  3685  0011C0  6E1C               	movwf	manualTune@freq+1,c
  3686  0011C2  0E6B               	movlw	107
  3687  0011C4  6E1B               	movwf	manualTune@freq,c
  3688                           
  3689                           ;main.c: 355: FMfrequenc(freq);
  3690  0011C6  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3691  0011CA  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3692  0011CE  EC15  F009         	call	_FMfrequenc	;wreg free
  3693  0011D2  D026               	goto	l136
  3694  0011D4                     l2563:
  3695                           
  3696                           ;main.c: 361: if(freq > 875)
  3697  0011D4  0E6C               	movlw	108
  3698  0011D6  5C1B               	subwf	manualTune@freq,w,c
  3699  0011D8  0E03               	movlw	3
  3700  0011DA  581C               	subwfb	manualTune@freq+1,w,c
  3701  0011DC  A0D8               	btfss	status,0,c
  3702  0011DE  D00A               	goto	l2569
  3703                           
  3704                           ;main.c: 362: {
  3705                           ;main.c: 363: freq--;
  3706  0011E0  061B               	decf	manualTune@freq,f,c
  3707  0011E2  A0D8               	btfss	status,0,c
  3708  0011E4  061C               	decf	manualTune@freq+1,f,c
  3709                           
  3710                           ;main.c: 364: FMfrequenc(freq);
  3711  0011E6  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3712  0011EA  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3713  0011EE  EC15  F009         	call	_FMfrequenc	;wreg free
  3714                           
  3715                           ;main.c: 365: } else {
  3716  0011F2  D016               	goto	l136
  3717  0011F4                     l2569:
  3718                           
  3719                           ;main.c: 366: freq = 1080;
  3720  0011F4  0E04               	movlw	4
  3721  0011F6  6E1C               	movwf	manualTune@freq+1,c
  3722  0011F8  0E38               	movlw	56
  3723  0011FA  6E1B               	movwf	manualTune@freq,c
  3724                           
  3725                           ;main.c: 367: FMfrequenc(freq);
  3726  0011FC  C01B  F013         	movff	manualTune@freq,?_FMfrequenc
  3727  001200  C01C  F014         	movff	manualTune@freq+1,?_FMfrequenc+1
  3728  001204  EC15  F009         	call	_FMfrequenc	;wreg free
  3729  001208  D00B               	goto	l136
  3730  00120A                     l2573:
  3731                           
  3732                           ;main.c: 372: errfm();
  3733  00120A  EC74  F00B         	call	_errfm	;wreg free
  3734                           
  3735                           ;main.c: 373: break;
  3736  00120E  D008               	goto	l136
  3737  001210                     l2577:
  3738  001210  501D               	movf	manualTune@dir,w,c
  3739                           
  3740                           ; Switch size 1, requested type "space"
  3741                           ; Number of cases is 2, Range of values is 0 to 1
  3742                           ; switch strategies available:
  3743                           ; Name         Instructions Cycles
  3744                           ; simple_byte            7     4 (average)
  3745                           ;	Chosen strategy is simple_byte
  3746  001212  0A00               	xorlw	0	; case 0
  3747  001214  B4D8               	btfsc	status,2,c
  3748  001216  D7DE               	goto	l2563
  3749  001218  0A01               	xorlw	1	; case 1
  3750  00121A  B4D8               	btfsc	status,2,c
  3751  00121C  D7C1               	goto	l2553
  3752  00121E  D7F5               	goto	l2573
  3753  001220                     l136:
  3754                           
  3755                           ;main.c: 376: return freq;
  3756  001220  C01B  F01B         	movff	manualTune@freq,?_manualTune
  3757  001224  C01C  F01C         	movff	manualTune@freq+1,?_manualTune+1
  3758  001228  0012               	return	
  3759  00122A                     __end_of_manualTune:
  3760                           	opt stack 0
  3761                           tblptru	equ	0xFF8
  3762                           tblptrh	equ	0xFF7
  3763                           tblptrl	equ	0xFF6
  3764                           tablat	equ	0xFF5
  3765                           prodh	equ	0xFF4
  3766                           prodl	equ	0xFF3
  3767                           postinc0	equ	0xFEE
  3768                           wreg	equ	0xFE8
  3769                           postinc1	equ	0xFE6
  3770                           postdec1	equ	0xFE5
  3771                           fsr1l	equ	0xFE1
  3772                           indf2	equ	0xFDF
  3773                           postinc2	equ	0xFDE
  3774                           postdec2	equ	0xFDD
  3775                           fsr2h	equ	0xFDA
  3776                           fsr2l	equ	0xFD9
  3777                           status	equ	0xFD8
  3778                           
  3779 ;; *************** function _FMfrequenc *****************
  3780 ;; Defined at:
  3781 ;;		line 548 in file "main.c"
  3782 ;; Parameters:    Size  Location     Type
  3783 ;;  f               2   18[COMRAM] unsigned int 
  3784 ;; Auto vars:     Size  Location     Type
  3785 ;;  dat             2   24[COMRAM] unsigned int 
  3786 ;;  cn              2   22[COMRAM] unsigned int 
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      unsigned char 
  3789 ;; Registers used:
  3790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3796 ;;      Params:         2       0       0       0
  3797 ;;      Locals:         4       0       0       0
  3798 ;;      Temps:          2       0       0       0
  3799 ;;      Totals:         8       0       0       0
  3800 ;;Total ram usage:        8 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    4
  3803 ;; This function calls:
  3804 ;;		_dly
  3805 ;;		_FMwrite
  3806 ;;		_FMready
  3807 ;; This function is called by:
  3808 ;;		_manualTune
  3809 ;;		_nextChan
  3810 ;;		_main
  3811 ;; This function uses a non-reentrant model
  3812 ;;
  3813                           
  3814                           	psect	text15
  3815  00122A                     __ptext15:
  3816                           	opt stack 0
  3817  00122A                     _FMfrequenc:
  3818                           	opt stack 24
  3819                           
  3820                           ;main.c: 550: unsigned int dat;
  3821                           ;main.c: 551: unsigned int cn;
  3822                           ;main.c: 553: cn = f - 690;
  3823                           
  3824                           ;incstack = 0
  3825                           ;incstack = 0
  3826  00122A  0E4E               	movlw	78
  3827  00122C  2413               	addwf	FMfrequenc@f,w,c
  3828  00122E  6E17               	movwf	FMfrequenc@cn,c
  3829  001230  0EFD               	movlw	253
  3830  001232  2014               	addwfc	FMfrequenc@f+1,w,c
  3831  001234  6E18               	movwf	FMfrequenc@cn+1,c
  3832                           
  3833                           ;main.c: 556: regImg[2] &= ~0x0200;
  3834  001236  0100               	movlb	0	; () banked
  3835  001238  0100               	movlb	0	; () banked
  3836  00123A  93BF               	bcf	(_regImg+5)& (0+255),1,b
  3837                           
  3838                           ; BSR set to: 0
  3839                           ;main.c: 557: if (FMwrite(2) != 0)
  3840  00123C  6E15               	movwf	??_FMfrequenc& (0+255),c
  3841  00123E  0E02               	movlw	2
  3842  001240  6E02               	movwf	?_FMwrite,c
  3843  001242  5015               	movf	??_FMfrequenc& (0+255),w,c
  3844  001244  EC85  F008         	call	_FMwrite	;wreg free
  3845  001248  0900               	iorlw	0
  3846  00124A  A4D8               	btfss	status,2,c
  3847  00124C  D030               	goto	l191
  3848                           
  3849                           ;main.c: 559: regImg[2] &= 0xfe00;
  3850                           
  3851                           ;main.c: 558: return 1;
  3852                           ;	Return value of _FMfrequenc is never used
  3853  00124E  0100               	movlb	0	; () banked
  3854  001250  0E00               	movlw	0
  3855  001252  0100               	movlb	0	; () banked
  3856  001254  17BE               	andwf	(_regImg+4)& (0+255),f,b
  3857  001256  0EFE               	movlw	254
  3858  001258  0100               	movlb	0	; () banked
  3859  00125A  17BF               	andwf	(_regImg+5)& (0+255),f,b
  3860                           
  3861                           ;main.c: 560: regImg[2] |= (cn | 0x0200);
  3862  00125C  0E00               	movlw	0
  3863  00125E  1017               	iorwf	FMfrequenc@cn,w,c
  3864  001260  6E15               	movwf	??_FMfrequenc& (0+255),c
  3865  001262  0E02               	movlw	2
  3866  001264  1018               	iorwf	FMfrequenc@cn+1,w,c
  3867  001266  6E16               	movwf	(??_FMfrequenc+1)& (0+255),c
  3868  001268  5015               	movf	??_FMfrequenc,w,c
  3869  00126A  0100               	movlb	0	; () banked
  3870  00126C  0100               	movlb	0	; () banked
  3871  00126E  13BE               	iorwf	(_regImg+4)& (0+255),f,b
  3872  001270  5016               	movf	??_FMfrequenc+1,w,c
  3873  001272  0100               	movlb	0	; () banked
  3874  001274  0100               	movlb	0	; () banked
  3875  001276  13BF               	iorwf	(_regImg+5)& (0+255),f,b
  3876                           
  3877                           ; BSR set to: 0
  3878                           ;main.c: 561: if (FMwrite(2) != 0)
  3879  001278  6E15               	movwf	??_FMfrequenc& (0+255),c
  3880  00127A  0E02               	movlw	2
  3881  00127C  6E02               	movwf	?_FMwrite,c
  3882  00127E  5015               	movf	??_FMfrequenc& (0+255),w,c
  3883  001280  EC85  F008         	call	_FMwrite	;wreg free
  3884  001284  0900               	iorlw	0
  3885  001286  A4D8               	btfss	status,2,c
  3886  001288  D012               	goto	l191
  3887                           
  3888                           ;main.c: 564: dly(2);
  3889                           
  3890                           ;main.c: 563: do {
  3891                           
  3892                           ;main.c: 562: return 1;
  3893                           ;	Return value of _FMfrequenc is never used
  3894  00128A  0E00               	movlw	0
  3895  00128C  6E02               	movwf	?_dly+1,c
  3896  00128E  0E02               	movlw	2
  3897  001290  6E01               	movwf	?_dly,c
  3898  001292  EC00  F00B         	call	_dly	;wreg free
  3899                           
  3900                           ;main.c: 565: if (FMready(&dat) != 0)
  3901  001296  0E00               	movlw	high FMfrequenc@dat
  3902  001298  6E0E               	movwf	?_FMready+1,c
  3903  00129A  0E19               	movlw	low FMfrequenc@dat
  3904  00129C  6E0D               	movwf	?_FMready,c
  3905  00129E  EC76  F00A         	call	_FMready	;wreg free
  3906  0012A2  0900               	iorlw	0
  3907  0012A4  A4D8               	btfss	status,2,c
  3908  0012A6  D003               	goto	l191
  3909                           
  3910                           ;main.c: 567: } while (!dat);
  3911                           
  3912                           ;main.c: 566: return 1;
  3913                           ;	Return value of _FMfrequenc is never used
  3914  0012A8  501A               	movf	FMfrequenc@dat+1,w,c
  3915  0012AA  1019               	iorwf	FMfrequenc@dat,w,c
  3916  0012AC  D7EC               	goto	L12
  3917  0012AE                     l191:
  3918  0012AE  0012               	return	
  3919  0012B0                     __end_of_FMfrequenc:
  3920                           	opt stack 0
  3921                           tblptru	equ	0xFF8
  3922                           tblptrh	equ	0xFF7
  3923                           tblptrl	equ	0xFF6
  3924                           tablat	equ	0xFF5
  3925                           prodh	equ	0xFF4
  3926                           prodl	equ	0xFF3
  3927                           postinc0	equ	0xFEE
  3928                           wreg	equ	0xFE8
  3929                           postinc1	equ	0xFE6
  3930                           postdec1	equ	0xFE5
  3931                           fsr1l	equ	0xFE1
  3932                           indf2	equ	0xFDF
  3933                           postinc2	equ	0xFDE
  3934                           postdec2	equ	0xFDD
  3935                           fsr2h	equ	0xFDA
  3936                           fsr2l	equ	0xFD9
  3937                           status	equ	0xFD8
  3938                           
  3939 ;; *************** function _FMready *****************
  3940 ;; Defined at:
  3941 ;;		line 489 in file "main.c"
  3942 ;; Parameters:    Size  Location     Type
  3943 ;;  rdy             2   12[COMRAM] PTR unsigned int 
  3944 ;;		 -> setScan@dat(2), FMfrequenc@dat(2), FMinit@dat(2), 
  3945 ;; Auto vars:     Size  Location     Type
  3946 ;;  sts             2   16[COMRAM] unsigned int 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  1    wreg      unsigned char 
  3949 ;; Registers used:
  3950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  3956 ;;      Params:         2       0       0       0
  3957 ;;      Locals:         2       0       0       0
  3958 ;;      Temps:          2       0       0       0
  3959 ;;      Totals:         6       0       0       0
  3960 ;;Total ram usage:        6 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; Hardware stack levels required when called:    3
  3963 ;; This function calls:
  3964 ;;		_FMread
  3965 ;; This function is called by:
  3966 ;;		_FMinit
  3967 ;;		_FMfrequenc
  3968 ;;		_setScan
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	text16
  3973  0014EC                     __ptext16:
  3974                           	opt stack 0
  3975  0014EC                     _FMready:
  3976                           	opt stack 25
  3977                           
  3978                           ;main.c: 491: unsigned int sts;
  3979                           ;main.c: 493: if (FMread(0x13, &sts) != 0) return 1;
  3980                           
  3981                           ;incstack = 0
  3982                           ;incstack = 0
  3983  0014EC  6E0F               	movwf	??_FMready& (0+255),c
  3984  0014EE  0E13               	movlw	19
  3985  0014F0  6E02               	movwf	?_FMread,c
  3986  0014F2  500F               	movf	??_FMready& (0+255),w,c
  3987  0014F4  0E00               	movlw	high FMready@sts
  3988  0014F6  6E04               	movwf	?_FMread+2,c
  3989  0014F8  0E11               	movlw	low FMready@sts
  3990  0014FA  6E03               	movwf	?_FMread+1,c
  3991  0014FC  EC18  F008         	call	_FMread	;wreg free
  3992  001500  0900               	iorlw	0
  3993  001502  B4D8               	btfsc	status,2,c
  3994  001504  D002               	goto	l2351
  3995  001506  0E01               	movlw	1
  3996  001508  D016               	goto	l174
  3997  00150A                     l2351:
  3998                           
  3999                           ;main.c: 494: sts &= 0x0020;
  4000  00150A  0E20               	movlw	32
  4001  00150C  1611               	andwf	FMready@sts,f,c
  4002  00150E  0E00               	movlw	0
  4003  001510  1612               	andwf	FMready@sts+1,f,c
  4004                           
  4005                           ;main.c: 495: *rdy = sts ? 1 : 0;
  4006  001512  5012               	movf	FMready@sts+1,w,c
  4007  001514  1011               	iorwf	FMready@sts,w,c
  4008  001516  B4D8               	btfsc	status,2,c
  4009  001518  D002               	goto	u1350
  4010  00151A  0E01               	movlw	1
  4011  00151C  D001               	goto	u1356
  4012  00151E                     u1350:
  4013  00151E  0E00               	movlw	0
  4014  001520                     u1356:
  4015  001520  6E0F               	movwf	??_FMready& (0+255),c
  4016  001522  6A10               	clrf	(??_FMready+1)& (0+255),c
  4017  001524  C00D  FFD9         	movff	FMready@rdy,fsr2l
  4018  001528  C00E  FFDA         	movff	FMready@rdy+1,fsr2h
  4019  00152C  C00F  FFDE         	movff	??_FMready,postinc2
  4020  001530  C010  FFDD         	movff	??_FMready+1,postdec2
  4021                           
  4022                           ;main.c: 496: return 0;
  4023  001534  0E00               	movlw	0
  4024  001536                     l174:
  4025  001536  0012               	return	
  4026  001538                     __end_of_FMready:
  4027                           	opt stack 0
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           prodh	equ	0xFF4
  4033                           prodl	equ	0xFF3
  4034                           postinc0	equ	0xFEE
  4035                           wreg	equ	0xFE8
  4036                           postinc1	equ	0xFE6
  4037                           postdec1	equ	0xFE5
  4038                           fsr1l	equ	0xFE1
  4039                           indf2	equ	0xFDF
  4040                           postinc2	equ	0xFDE
  4041                           postdec2	equ	0xFDD
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _FMread *****************
  4047 ;; Defined at:
  4048 ;;		line 439 in file "main.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;  regAddr         1    1[COMRAM] unsigned char 
  4051 ;;  data            2    2[COMRAM] PTR unsigned int 
  4052 ;;		 -> main@ui(2), setScan@chanRgstr(2), FMready@sts(2), 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  secndByt        1   11[COMRAM] unsigned char 
  4055 ;;  firstByt        1   10[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  1    wreg      unsigned char 
  4058 ;; Registers used:
  4059 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4065 ;;      Params:         3       0       0       0
  4066 ;;      Locals:         2       0       0       0
  4067 ;;      Temps:          6       0       0       0
  4068 ;;      Totals:        11       0       0       0
  4069 ;;Total ram usage:       11 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    2
  4072 ;; This function calls:
  4073 ;;		_IdleI2C
  4074 ;;		_WriteI2C
  4075 ;;		_ReadI2C
  4076 ;; This function is called by:
  4077 ;;		_FMready
  4078 ;;		_FMvers
  4079 ;;		_setScan
  4080 ;;		_FMid
  4081 ;; This function uses a non-reentrant model
  4082 ;;
  4083                           
  4084                           	psect	text17
  4085  001030                     __ptext17:
  4086                           	opt stack 0
  4087  001030                     _FMread:
  4088                           	opt stack 25
  4089                           
  4090                           ;main.c: 441: unsigned char firstByt;
  4091                           ;main.c: 442: unsigned char secndByt;
  4092                           ;main.c: 444: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4093                           
  4094                           ;incstack = 0
  4095                           ;incstack = 0
  4096  001030  80C5               	bsf	4037,0,c	;volatile
  4097  001032                     l154:
  4098  001032  B0C5               	btfsc	4037,0,c	;volatile
  4099  001034  D7FE               	goto	l154
  4100                           
  4101                           ;main.c: 445: IdleI2C();
  4102  001036  EC7B  F00B         	call	_IdleI2C	;wreg free
  4103                           
  4104                           ;main.c: 448: if (WriteI2C(0x20)) return 1;
  4105  00103A  6E05               	movwf	??_FMread& (0+255),c
  4106  00103C  0E20               	movlw	32
  4107  00103E  6E01               	movwf	?_WriteI2C,c
  4108  001040  5005               	movf	??_FMread& (0+255),w,c
  4109  001042  EC4B  F00A         	call	_WriteI2C	;wreg free
  4110  001046  0900               	iorlw	0
  4111  001048  B4D8               	btfsc	status,2,c
  4112  00104A  D002               	goto	l2237
  4113  00104C  0E01               	movlw	1
  4114  00104E  D05C               	goto	l158
  4115  001050                     l2237:
  4116                           
  4117                           ;main.c: 449: IdleI2C();
  4118  001050  EC7B  F00B         	call	_IdleI2C	;wreg free
  4119                           
  4120                           ;main.c: 450: WriteI2C(regAddr);
  4121  001054  C002  F001         	movff	FMread@regAddr,?_WriteI2C
  4122  001058  EC4B  F00A         	call	_WriteI2C	;wreg free
  4123                           
  4124                           ;main.c: 451: IdleI2C();
  4125  00105C  EC7B  F00B         	call	_IdleI2C	;wreg free
  4126                           
  4127                           ;main.c: 452: SSPCON2bits.RSEN=1;while(SSPCON2bits.RSEN);
  4128  001060  82C5               	bsf	4037,1,c	;volatile
  4129  001062                     l159:
  4130  001062  B2C5               	btfsc	4037,1,c	;volatile
  4131  001064  D7FE               	goto	l159
  4132                           
  4133                           ;main.c: 453: IdleI2C();
  4134  001066  EC7B  F00B         	call	_IdleI2C	;wreg free
  4135                           
  4136                           ;main.c: 454: WriteI2C(0x20 + 0x01);
  4137  00106A  6E05               	movwf	??_FMread& (0+255),c
  4138  00106C  0E21               	movlw	33
  4139  00106E  6E01               	movwf	?_WriteI2C,c
  4140  001070  5005               	movf	??_FMread& (0+255),w,c
  4141  001072  EC4B  F00A         	call	_WriteI2C	;wreg free
  4142                           
  4143                           ;main.c: 455: IdleI2C();
  4144  001076  EC7B  F00B         	call	_IdleI2C	;wreg free
  4145                           
  4146                           ;main.c: 456: firstByt = ReadI2C();
  4147  00107A  EC4D  F00B         	call	_ReadI2C	;wreg free
  4148  00107E  6E0B               	movwf	FMread@firstByt,c
  4149                           
  4150                           ;main.c: 457: IdleI2C();
  4151  001080  EC7B  F00B         	call	_IdleI2C	;wreg free
  4152                           
  4153                           ;main.c: 458: SSPCON2bits.ACKDT=0;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4154  001084  9AC5               	bcf	4037,5,c	;volatile
  4155  001086  88C5               	bsf	4037,4,c	;volatile
  4156  001088                     l162:
  4157  001088  B8C5               	btfsc	4037,4,c	;volatile
  4158  00108A  D7FE               	goto	l162
  4159                           
  4160                           ;main.c: 459: IdleI2C();
  4161  00108C  EC7B  F00B         	call	_IdleI2C	;wreg free
  4162                           
  4163                           ;main.c: 460: secndByt = ReadI2C();
  4164  001090  EC4D  F00B         	call	_ReadI2C	;wreg free
  4165  001094  6E0C               	movwf	FMread@secndByt,c
  4166                           
  4167                           ;main.c: 461: IdleI2C();
  4168  001096  EC7B  F00B         	call	_IdleI2C	;wreg free
  4169                           
  4170                           ;main.c: 462: SSPCON2bits.ACKDT=1;SSPCON2bits.ACKEN=1;while(SSPCON2bits.ACKEN);
  4171  00109A  8AC5               	bsf	4037,5,c	;volatile
  4172  00109C  88C5               	bsf	4037,4,c	;volatile
  4173  00109E                     l165:
  4174  00109E  B8C5               	btfsc	4037,4,c	;volatile
  4175  0010A0  D7FE               	goto	l165
  4176                           
  4177                           ;main.c: 463: IdleI2C();
  4178  0010A2  EC7B  F00B         	call	_IdleI2C	;wreg free
  4179                           
  4180                           ;main.c: 464: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4181  0010A6  84C5               	bsf	4037,2,c	;volatile
  4182  0010A8                     l168:
  4183  0010A8  B4C5               	btfsc	4037,2,c	;volatile
  4184  0010AA  D7FE               	goto	l168
  4185                           
  4186                           ;main.c: 465: IdleI2C();
  4187  0010AC  EC7B  F00B         	call	_IdleI2C	;wreg free
  4188                           
  4189                           ;main.c: 466: *data = firstByt;
  4190  0010B0  500B               	movf	FMread@firstByt,w,c
  4191  0010B2  6E05               	movwf	??_FMread& (0+255),c
  4192  0010B4  6A06               	clrf	(??_FMread+1)& (0+255),c
  4193  0010B6  C003  FFD9         	movff	FMread@data,fsr2l
  4194  0010BA  C004  FFDA         	movff	FMread@data+1,fsr2h
  4195  0010BE  C005  FFDE         	movff	??_FMread,postinc2
  4196  0010C2  C006  FFDD         	movff	??_FMread+1,postdec2
  4197                           
  4198                           ;main.c: 467: *data <<= 8;
  4199  0010C6  C003  FFD9         	movff	FMread@data,fsr2l
  4200  0010CA  C004  FFDA         	movff	FMread@data+1,fsr2h
  4201  0010CE  50DE               	movf	postinc2,w,c
  4202  0010D0  6EDD               	movwf	postdec2,c
  4203  0010D2  6ADF               	clrf	indf2,c
  4204                           
  4205                           ;main.c: 468: *data = *data | secndByt;
  4206  0010D4  C003  FFD9         	movff	FMread@data,fsr2l
  4207  0010D8  C004  FFDA         	movff	FMread@data+1,fsr2h
  4208  0010DC  CFDE F005          	movff	postinc2,??_FMread
  4209  0010E0  CFDD F006          	movff	postdec2,??_FMread+1
  4210  0010E4  500C               	movf	FMread@secndByt,w,c
  4211  0010E6  6E07               	movwf	(??_FMread+2)& (0+255),c
  4212  0010E8  6A08               	clrf	(??_FMread+3)& (0+255),c
  4213  0010EA  5005               	movf	??_FMread,w,c
  4214  0010EC  1007               	iorwf	??_FMread+2,w,c
  4215  0010EE  6E09               	movwf	(??_FMread+4)& (0+255),c
  4216  0010F0  5006               	movf	??_FMread+1,w,c
  4217  0010F2  1008               	iorwf	??_FMread+3,w,c
  4218  0010F4  6E0A               	movwf	(??_FMread+5)& (0+255),c
  4219  0010F6  C003  FFD9         	movff	FMread@data,fsr2l
  4220  0010FA  C004  FFDA         	movff	FMread@data+1,fsr2h
  4221  0010FE  C009  FFDE         	movff	??_FMread+4,postinc2
  4222  001102  C00A  FFDD         	movff	??_FMread+5,postdec2
  4223                           
  4224                           ;main.c: 470: return 0;
  4225  001106  0E00               	movlw	0
  4226  001108                     l158:
  4227  001108  0012               	return	
  4228  00110A                     __end_of_FMread:
  4229                           	opt stack 0
  4230                           tblptru	equ	0xFF8
  4231                           tblptrh	equ	0xFF7
  4232                           tblptrl	equ	0xFF6
  4233                           tablat	equ	0xFF5
  4234                           prodh	equ	0xFF4
  4235                           prodl	equ	0xFF3
  4236                           postinc0	equ	0xFEE
  4237                           wreg	equ	0xFE8
  4238                           postinc1	equ	0xFE6
  4239                           postdec1	equ	0xFE5
  4240                           fsr1l	equ	0xFE1
  4241                           indf2	equ	0xFDF
  4242                           postinc2	equ	0xFDE
  4243                           postdec2	equ	0xFDD
  4244                           fsr2h	equ	0xFDA
  4245                           fsr2l	equ	0xFD9
  4246                           status	equ	0xFD8
  4247                           
  4248 ;; *************** function _ReadI2C *****************
  4249 ;; Defined at:
  4250 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_read.c"
  4251 ;; Parameters:    Size  Location     Type
  4252 ;;		None
  4253 ;; Auto vars:     Size  Location     Type
  4254 ;;		None
  4255 ;; Return value:  Size  Location     Type
  4256 ;;                  1    wreg      unsigned char 
  4257 ;; Registers used:
  4258 ;;		wreg, status,2, status,0
  4259 ;; Tracked objects:
  4260 ;;		On entry : 0/0
  4261 ;;		On exit  : 0/0
  4262 ;;		Unchanged: 0/0
  4263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4264 ;;      Params:         0       0       0       0
  4265 ;;      Locals:         0       0       0       0
  4266 ;;      Temps:          0       0       0       0
  4267 ;;      Totals:         0       0       0       0
  4268 ;;Total ram usage:        0 bytes
  4269 ;; Hardware stack levels used:    1
  4270 ;; This function calls:
  4271 ;;		Nothing
  4272 ;; This function is called by:
  4273 ;;		_FMread
  4274 ;; This function uses a non-reentrant model
  4275 ;;
  4276                           
  4277                           	psect	text18
  4278  00169A                     __ptext18:
  4279                           	opt stack 0
  4280  00169A                     _ReadI2C:
  4281                           	opt stack 26
  4282                           
  4283                           ;incstack = 0
  4284                           ;incstack = 0
  4285  00169A  50C6               	movf	4038,w,c	;volatile
  4286  00169C  0B0F               	andlw	15
  4287  00169E  0A08               	xorlw	8
  4288  0016A0  B4D8               	btfsc	status,2,c
  4289  0016A2  D004               	goto	l341
  4290  0016A4  50C6               	movf	4038,w,c	;volatile
  4291  0016A6  0B0F               	andlw	15
  4292  0016A8  0A0B               	xorlw	11
  4293  0016AA  B4D8               	btfsc	status,2,c
  4294  0016AC                     l341:
  4295  0016AC  86C5               	bsf	4037,3,c	;volatile
  4296  0016AE                     l342:
  4297  0016AE  A0C7               	btfss	4039,0,c	;volatile
  4298  0016B0  D7FE               	goto	l342
  4299  0016B2  50C9               	movf	4041,w,c	;volatile
  4300  0016B4  0012               	return	
  4301  0016B6                     __end_of_ReadI2C:
  4302                           	opt stack 0
  4303                           tblptru	equ	0xFF8
  4304                           tblptrh	equ	0xFF7
  4305                           tblptrl	equ	0xFF6
  4306                           tablat	equ	0xFF5
  4307                           prodh	equ	0xFF4
  4308                           prodl	equ	0xFF3
  4309                           postinc0	equ	0xFEE
  4310                           wreg	equ	0xFE8
  4311                           postinc1	equ	0xFE6
  4312                           postdec1	equ	0xFE5
  4313                           fsr1l	equ	0xFE1
  4314                           indf2	equ	0xFDF
  4315                           postinc2	equ	0xFDE
  4316                           postdec2	equ	0xFDD
  4317                           fsr2h	equ	0xFDA
  4318                           fsr2l	equ	0xFD9
  4319                           status	equ	0xFD8
  4320                           
  4321 ;; *************** function _FMwrite *****************
  4322 ;; Defined at:
  4323 ;;		line 395 in file "main.c"
  4324 ;; Parameters:    Size  Location     Type
  4325 ;;  adr             1    1[COMRAM] unsigned char 
  4326 ;; Auto vars:     Size  Location     Type
  4327 ;;  regstr          2    0        unsigned int 
  4328 ;;  secndByt        1    5[COMRAM] unsigned char 
  4329 ;;  firstByt        1    4[COMRAM] unsigned char 
  4330 ;;  rpy             1    0        unsigned char 
  4331 ;; Return value:  Size  Location     Type
  4332 ;;                  1    wreg      unsigned char 
  4333 ;; Registers used:
  4334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4335 ;; Tracked objects:
  4336 ;;		On entry : 0/0
  4337 ;;		On exit  : 0/0
  4338 ;;		Unchanged: 0/0
  4339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4340 ;;      Params:         1       0       0       0
  4341 ;;      Locals:         2       0       0       0
  4342 ;;      Temps:          2       0       0       0
  4343 ;;      Totals:         5       0       0       0
  4344 ;;Total ram usage:        5 bytes
  4345 ;; Hardware stack levels used:    1
  4346 ;; Hardware stack levels required when called:    2
  4347 ;; This function calls:
  4348 ;;		_IdleI2C
  4349 ;;		_WriteI2C
  4350 ;; This function is called by:
  4351 ;;		_FMinit
  4352 ;;		_FMfrequenc
  4353 ;;		_volSet
  4354 ;;		_setScan
  4355 ;; This function uses a non-reentrant model
  4356 ;;
  4357                           
  4358                           	psect	text19
  4359  00110A                     __ptext19:
  4360                           	opt stack 0
  4361  00110A                     _FMwrite:
  4362                           	opt stack 26
  4363                           
  4364                           ;main.c: 397: unsigned int regstr;
  4365                           ;main.c: 398: unsigned char firstByt;
  4366                           ;main.c: 399: unsigned char secndByt;
  4367                           ;main.c: 400: unsigned char rpy;
  4368                           ;main.c: 402: firstByt = regImg[adr] >> 8;
  4369                           
  4370                           ;incstack = 0
  4371                           ;incstack = 0
  4372  00110A  5002               	movf	FMwrite@adr,w,c
  4373  00110C  0D02               	mullw	2
  4374  00110E  0100               	movlb	0	; () banked
  4375  001110  0EBA               	movlw	low _regImg
  4376  001112  24F3               	addwf	prodl,w,c
  4377  001114  6ED9               	movwf	fsr2l,c
  4378  001116  0100               	movlb	0	; () banked
  4379  001118  0E00               	movlw	high _regImg
  4380  00111A  20F4               	addwfc	prodh,w,c
  4381  00111C  6EDA               	movwf	fsr2h,c
  4382  00111E  CFDE F003          	movff	postinc2,??_FMwrite
  4383  001122  CFDD F004          	movff	postdec2,??_FMwrite+1
  4384  001126  C004  F003         	movff	??_FMwrite+1,??_FMwrite
  4385  00112A  6A04               	clrf	??_FMwrite+1,c
  4386  00112C  5003               	movf	??_FMwrite,w,c
  4387  00112E  6E05               	movwf	FMwrite@firstByt,c
  4388                           
  4389                           ;main.c: 403: secndByt = regImg[adr];
  4390  001130  5002               	movf	FMwrite@adr,w,c
  4391  001132  0D02               	mullw	2
  4392  001134  0100               	movlb	0	; () banked
  4393  001136  0EBA               	movlw	low _regImg
  4394  001138  24F3               	addwf	prodl,w,c
  4395  00113A  6ED9               	movwf	fsr2l,c
  4396  00113C  0100               	movlb	0	; () banked
  4397  00113E  0E00               	movlw	high _regImg
  4398  001140  20F4               	addwfc	prodh,w,c
  4399  001142  6EDA               	movwf	fsr2h,c
  4400  001144  50DF               	movf	indf2,w,c
  4401  001146  6E06               	movwf	FMwrite@secndByt,c
  4402                           
  4403                           ; BSR set to: 0
  4404                           ;main.c: 405: SSPCON2bits.SEN=1;while(SSPCON2bits.SEN);
  4405  001148  80C5               	bsf	4037,0,c	;volatile
  4406  00114A                     l144:
  4407  00114A  B0C5               	btfsc	4037,0,c	;volatile
  4408  00114C  D7FE               	goto	l144
  4409                           
  4410                           ;main.c: 406: IdleI2C();
  4411  00114E  EC7B  F00B         	call	_IdleI2C	;wreg free
  4412                           
  4413                           ;main.c: 409: if (WriteI2C(0x20)) return 1;
  4414  001152  6E03               	movwf	??_FMwrite& (0+255),c
  4415  001154  0E20               	movlw	32
  4416  001156  6E01               	movwf	?_WriteI2C,c
  4417  001158  5003               	movf	??_FMwrite& (0+255),w,c
  4418  00115A  EC4B  F00A         	call	_WriteI2C	;wreg free
  4419  00115E  0900               	iorlw	0
  4420  001160  B4D8               	btfsc	status,2,c
  4421  001162  D002               	goto	l2219
  4422  001164  0E01               	movlw	1
  4423  001166  D01A               	goto	l148
  4424  001168                     l2219:
  4425                           
  4426                           ;main.c: 410: IdleI2C();
  4427  001168  EC7B  F00B         	call	_IdleI2C	;wreg free
  4428                           
  4429                           ;main.c: 411: WriteI2C(adr);
  4430  00116C  C002  F001         	movff	FMwrite@adr,?_WriteI2C
  4431  001170  EC4B  F00A         	call	_WriteI2C	;wreg free
  4432                           
  4433                           ;main.c: 412: IdleI2C();
  4434  001174  EC7B  F00B         	call	_IdleI2C	;wreg free
  4435                           
  4436                           ;main.c: 413: WriteI2C(firstByt);
  4437  001178  C005  F001         	movff	FMwrite@firstByt,?_WriteI2C
  4438  00117C  EC4B  F00A         	call	_WriteI2C	;wreg free
  4439                           
  4440                           ;main.c: 414: IdleI2C();
  4441  001180  EC7B  F00B         	call	_IdleI2C	;wreg free
  4442                           
  4443                           ;main.c: 415: WriteI2C(secndByt);
  4444  001184  C006  F001         	movff	FMwrite@secndByt,?_WriteI2C
  4445  001188  EC4B  F00A         	call	_WriteI2C	;wreg free
  4446                           
  4447                           ;main.c: 416: IdleI2C();
  4448  00118C  EC7B  F00B         	call	_IdleI2C	;wreg free
  4449                           
  4450                           ;main.c: 417: SSPCON2bits.PEN=1;while(SSPCON2bits.PEN);
  4451  001190  84C5               	bsf	4037,2,c	;volatile
  4452  001192                     l149:
  4453  001192  B4C5               	btfsc	4037,2,c	;volatile
  4454  001194  D7FE               	goto	l149
  4455                           
  4456                           ;main.c: 418: IdleI2C();
  4457  001196  EC7B  F00B         	call	_IdleI2C	;wreg free
  4458                           
  4459                           ;main.c: 419: return 0;
  4460  00119A  0E00               	movlw	0
  4461  00119C                     l148:
  4462  00119C  0012               	return	
  4463  00119E                     __end_of_FMwrite:
  4464                           	opt stack 0
  4465                           tblptru	equ	0xFF8
  4466                           tblptrh	equ	0xFF7
  4467                           tblptrl	equ	0xFF6
  4468                           tablat	equ	0xFF5
  4469                           prodh	equ	0xFF4
  4470                           prodl	equ	0xFF3
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           postinc1	equ	0xFE6
  4474                           postdec1	equ	0xFE5
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _WriteI2C *****************
  4484 ;; Defined at:
  4485 ;;		line 13 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_writ.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  data_out        1    0[COMRAM] unsigned char 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;		None
  4490 ;; Return value:  Size  Location     Type
  4491 ;;                  1    wreg      char 
  4492 ;; Registers used:
  4493 ;;		wreg, status,2, status,0, cstack
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4499 ;;      Params:         1       0       0       0
  4500 ;;      Locals:         0       0       0       0
  4501 ;;      Temps:          0       0       0       0
  4502 ;;      Totals:         1       0       0       0
  4503 ;;Total ram usage:        1 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; Hardware stack levels required when called:    1
  4506 ;; This function calls:
  4507 ;;		_IdleI2C
  4508 ;; This function is called by:
  4509 ;;		_FMwrite
  4510 ;;		_FMread
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text20
  4515  001496                     __ptext20:
  4516                           	opt stack 0
  4517  001496                     _WriteI2C:
  4518                           	opt stack 25
  4519                           
  4520                           ;incstack = 0
  4521                           ;incstack = 0
  4522  001496  C001  FFC9         	movff	WriteI2C@data_out,4041	;volatile
  4523  00149A  AEC6               	btfss	4038,7,c	;volatile
  4524  00149C  D002               	goto	l2167
  4525  00149E  0EFF               	movlw	255
  4526  0014A0  D024               	goto	l363
  4527  0014A2                     l2167:
  4528  0014A2  50C6               	movf	4038,w,c	;volatile
  4529  0014A4  0B0F               	andlw	15
  4530  0014A6  0A08               	xorlw	8
  4531  0014A8  B4D8               	btfsc	status,2,c
  4532  0014AA  D00C               	goto	l2185
  4533  0014AC  50C6               	movf	4038,w,c	;volatile
  4534  0014AE  0B0F               	andlw	15
  4535  0014B0  0A0B               	xorlw	11
  4536  0014B2  B4D8               	btfsc	status,2,c
  4537  0014B4  D007               	goto	l2185
  4538  0014B6  88C6               	bsf	4038,4,c	;volatile
  4539  0014B8                     l366:
  4540  0014B8  A69E               	btfss	3998,3,c	;volatile
  4541  0014BA  D7FE               	goto	l366
  4542  0014BC  A4C7               	btfss	4039,2,c	;volatile
  4543  0014BE  B0C7               	btfsc	4039,0,c	;volatile
  4544  0014C0  D013               	goto	l2199
  4545  0014C2  D010               	goto	u1180
  4546  0014C4                     l2185:
  4547  0014C4  50C6               	movf	4038,w,c	;volatile
  4548  0014C6  0B0F               	andlw	15
  4549  0014C8  0A08               	xorlw	8
  4550  0014CA  B4D8               	btfsc	status,2,c
  4551  0014CC  D005               	goto	l375
  4552  0014CE  50C6               	movf	4038,w,c	;volatile
  4553  0014D0  0B0F               	andlw	15
  4554  0014D2  0A0B               	xorlw	11
  4555  0014D4  A4D8               	btfss	status,2,c
  4556  0014D6  D009               	goto	l363
  4557  0014D8                     l375:
  4558  0014D8  B0C7               	btfsc	4039,0,c	;volatile
  4559  0014DA  D7FE               	goto	l375
  4560  0014DC  EC7B  F00B         	call	_IdleI2C	;wreg free
  4561  0014E0  ACC5               	btfss	4037,6,c	;volatile
  4562  0014E2  D002               	goto	l2199
  4563  0014E4                     u1180:
  4564  0014E4  0EFE               	movlw	254
  4565  0014E6  D001               	goto	l363
  4566  0014E8                     l2199:
  4567  0014E8  0E00               	movlw	0
  4568  0014EA                     l363:
  4569  0014EA  0012               	return	
  4570  0014EC                     __end_of_WriteI2C:
  4571                           	opt stack 0
  4572                           tblptru	equ	0xFF8
  4573                           tblptrh	equ	0xFF7
  4574                           tblptrl	equ	0xFF6
  4575                           tablat	equ	0xFF5
  4576                           prodh	equ	0xFF4
  4577                           prodl	equ	0xFF3
  4578                           postinc0	equ	0xFEE
  4579                           wreg	equ	0xFE8
  4580                           postinc1	equ	0xFE6
  4581                           postdec1	equ	0xFE5
  4582                           fsr1l	equ	0xFE1
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590 ;; *************** function _IdleI2C *****************
  4591 ;; Defined at:
  4592 ;;		line 25 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_idle.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;		None
  4597 ;; Return value:  Size  Location     Type
  4598 ;;		None               void
  4599 ;; Registers used:
  4600 ;;		wreg, status,2, status,0
  4601 ;; Tracked objects:
  4602 ;;		On entry : 0/0
  4603 ;;		On exit  : 0/0
  4604 ;;		Unchanged: 0/0
  4605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4606 ;;      Params:         0       0       0       0
  4607 ;;      Locals:         0       0       0       0
  4608 ;;      Temps:          0       0       0       0
  4609 ;;      Totals:         0       0       0       0
  4610 ;;Total ram usage:        0 bytes
  4611 ;; Hardware stack levels used:    1
  4612 ;; This function calls:
  4613 ;;		Nothing
  4614 ;; This function is called by:
  4615 ;;		_FMwrite
  4616 ;;		_FMread
  4617 ;;		_WriteI2C
  4618 ;; This function uses a non-reentrant model
  4619 ;;
  4620                           
  4621                           	psect	text21
  4622  0016F6                     __ptext21:
  4623                           	opt stack 0
  4624  0016F6                     _IdleI2C:
  4625                           	opt stack 25
  4626  0016F6                     l2003:
  4627  0016F6  50C5               	movf	4037,w,c	;volatile
  4628  0016F8  0B1F               	andlw	31
  4629  0016FA  B4D8               	btfsc	status,2,c
  4630  0016FC  B4C7               	btfsc	4039,2,c	;volatile
  4631  0016FE  D7FB               	goto	l2003
  4632  001700  0012               	return	
  4633  001702                     __end_of_IdleI2C:
  4634                           	opt stack 0
  4635                           tblptru	equ	0xFF8
  4636                           tblptrh	equ	0xFF7
  4637                           tblptrl	equ	0xFF6
  4638                           tablat	equ	0xFF5
  4639                           prodh	equ	0xFF4
  4640                           prodl	equ	0xFF3
  4641                           postinc0	equ	0xFEE
  4642                           wreg	equ	0xFE8
  4643                           postinc1	equ	0xFE6
  4644                           postdec1	equ	0xFE5
  4645                           fsr1l	equ	0xFE1
  4646                           indf2	equ	0xFDF
  4647                           postinc2	equ	0xFDE
  4648                           postdec2	equ	0xFDD
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _dly *****************
  4654 ;; Defined at:
  4655 ;;		line 187 in file "main.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  d               2    0[COMRAM] int 
  4658 ;; Auto vars:     Size  Location     Type
  4659 ;;  i               2    2[COMRAM] int 
  4660 ;; Return value:  Size  Location     Type
  4661 ;;		None               void
  4662 ;; Registers used:
  4663 ;;		wreg, status,2, status,0
  4664 ;; Tracked objects:
  4665 ;;		On entry : 0/0
  4666 ;;		On exit  : 0/0
  4667 ;;		Unchanged: 0/0
  4668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4669 ;;      Params:         2       0       0       0
  4670 ;;      Locals:         2       0       0       0
  4671 ;;      Temps:          0       0       0       0
  4672 ;;      Totals:         4       0       0       0
  4673 ;;Total ram usage:        4 bytes
  4674 ;; Hardware stack levels used:    1
  4675 ;; This function calls:
  4676 ;;		Nothing
  4677 ;; This function is called by:
  4678 ;;		_FMinit
  4679 ;;		_FMfrequenc
  4680 ;;		_setScan
  4681 ;;		_main
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text22
  4686  001600                     __ptext22:
  4687                           	opt stack 0
  4688  001600                     _dly:
  4689                           	opt stack 28
  4690                           
  4691                           ;main.c: 189: int i = 0;
  4692                           
  4693                           ;incstack = 0
  4694                           ;incstack = 0
  4695  001600  0E00               	movlw	0
  4696  001602  6E04               	movwf	dly@i+1,c
  4697  001604  0E00               	movlw	0
  4698  001606  6E03               	movwf	dly@i,c
  4699                           
  4700                           ;main.c: 191: for ( ; d; --d)
  4701  001608  D00F               	goto	l1955
  4702  00160A                     l1947:
  4703                           
  4704                           ;main.c: 192: for (i = 100; i; --i) ;
  4705  00160A  0E00               	movlw	0
  4706  00160C  6E04               	movwf	dly@i+1,c
  4707  00160E  0E64               	movlw	100
  4708  001610  6E03               	movwf	dly@i,c
  4709  001612  D003               	goto	l1951
  4710  001614                     l1949:
  4711  001614  0603               	decf	dly@i,f,c
  4712  001616  A0D8               	btfss	status,0,c
  4713  001618  0604               	decf	dly@i+1,f,c
  4714  00161A                     l1951:
  4715  00161A  5004               	movf	dly@i+1,w,c
  4716  00161C  1003               	iorwf	dly@i,w,c
  4717  00161E  A4D8               	btfss	status,2,c
  4718  001620  D7F9               	goto	l1949
  4719  001622  0601               	decf	dly@d,f,c
  4720  001624  A0D8               	btfss	status,0,c
  4721  001626  0602               	decf	dly@d+1,f,c
  4722  001628                     l1955:
  4723  001628  5002               	movf	dly@d+1,w,c
  4724  00162A  1001               	iorwf	dly@d,w,c
  4725  00162C  B4D8               	btfsc	status,2,c
  4726  00162E  0012               	return	
  4727  001630  D7EC               	goto	l1947
  4728  001632                     __end_of_dly:
  4729                           	opt stack 0
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postinc1	equ	0xFE6
  4739                           postdec1	equ	0xFE5
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           postinc2	equ	0xFDE
  4743                           postdec2	equ	0xFDD
  4744                           fsr2h	equ	0xFDA
  4745                           fsr2l	equ	0xFD9
  4746                           status	equ	0xFD8
  4747                           
  4748 ;; *************** function _errfm *****************
  4749 ;; Defined at:
  4750 ;;		line 734 in file "main.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;		None
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;		None
  4755 ;; Return value:  Size  Location     Type
  4756 ;;		None               void
  4757 ;; Registers used:
  4758 ;;		wreg, status,2
  4759 ;; Tracked objects:
  4760 ;;		On entry : 0/0
  4761 ;;		On exit  : 0/0
  4762 ;;		Unchanged: 0/0
  4763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4764 ;;      Params:         0       0       0       0
  4765 ;;      Locals:         0       0       0       0
  4766 ;;      Temps:          0       0       0       0
  4767 ;;      Totals:         0       0       0       0
  4768 ;;Total ram usage:        0 bytes
  4769 ;; Hardware stack levels used:    1
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_charWrt
  4774 ;;		_manualTune
  4775 ;;		_volSet
  4776 ;;		_nextChan
  4777 ;;		_setScan
  4778 ;;		_main
  4779 ;; This function uses a non-reentrant model
  4780 ;;
  4781                           
  4782                           	psect	text23
  4783  0016E8                     __ptext23:
  4784                           	opt stack 0
  4785  0016E8                     _errfm:
  4786                           	opt stack 28
  4787                           
  4788                           ;main.c: 736: LCDDATA2 = 0b01111001;
  4789                           
  4790                           ;incstack = 0
  4791                           ;incstack = 0
  4792  0016E8  0E79               	movlw	121
  4793  0016EA  6E62               	movwf	3938,c	;volatile
  4794                           
  4795                           ;main.c: 737: LCDDATA1 = 0b00110001;
  4796  0016EC  0E31               	movlw	49
  4797  0016EE  6E61               	movwf	3937,c	;volatile
  4798                           
  4799                           ;main.c: 738: LCDDATA0 = 0b00110001;
  4800  0016F0  0E31               	movlw	49
  4801  0016F2  6E60               	movwf	3936,c	;volatile
  4802  0016F4                     l228:
  4803  0016F4  D7FF               	goto	l228
  4804  0016F6                     __end_of_errfm:
  4805                           	opt stack 0
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           postinc0	equ	0xFEE
  4813                           wreg	equ	0xFE8
  4814                           postinc1	equ	0xFE6
  4815                           postdec1	equ	0xFE5
  4816                           fsr1l	equ	0xFE1
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           fsr2h	equ	0xFDA
  4821                           fsr2l	equ	0xFD9
  4822                           status	equ	0xFD8
  4823                           
  4824 ;; *************** function _Init *****************
  4825 ;; Defined at:
  4826 ;;		line 244 in file "main.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;  i               2    0        int 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  4840 ;;      Params:         0       0       0       0
  4841 ;;      Locals:         0       0       0       0
  4842 ;;      Temps:          2       0       0       0
  4843 ;;      Totals:         2       0       0       0
  4844 ;;Total ram usage:        2 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    1
  4847 ;; This function calls:
  4848 ;;		_OpenI2C
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           	psect	text24
  4855  0012B0                     __ptext24:
  4856                           	opt stack 0
  4857  0012B0                     _Init:
  4858                           	opt stack 28
  4859                           
  4860                           ;main.c: 246: int i;
  4861                           ;main.c: 248: OSCCON = 0b01110010;
  4862                           
  4863                           ;incstack = 0
  4864                           ;incstack = 0
  4865  0012B0  0E72               	movlw	114
  4866  0012B2  6ED3               	movwf	4051,c	;volatile
  4867                           
  4868                           ;main.c: 249: LCDSE0 = 0b11111111;
  4869  0012B4  010F               	movlb	15	; () banked
  4870  0012B6  010F               	movlb	15	; () banked
  4871  0012B8  695A               	setf	90,b	;volatile
  4872                           
  4873                           ; BSR set to: 15
  4874                           ;main.c: 250: LCDSE1 = 0b11111111;
  4875  0012BA  010F               	movlb	15	; () banked
  4876  0012BC  010F               	movlb	15	; () banked
  4877  0012BE  695B               	setf	91,b	;volatile
  4878                           
  4879                           ; BSR set to: 15
  4880                           ;main.c: 251: LCDSE2 = 0b11111111;
  4881  0012C0  010F               	movlb	15	; () banked
  4882  0012C2  010F               	movlb	15	; () banked
  4883  0012C4  695C               	setf	92,b	;volatile
  4884                           
  4885                           ;main.c: 252: LCDSE3 = 0b00000111;
  4886  0012C6  0E07               	movlw	7
  4887  0012C8  010F               	movlb	15	; () banked
  4888  0012CA  010F               	movlb	15	; () banked
  4889  0012CC  6F5D               	movwf	93,b	;volatile
  4890                           
  4891                           ;main.c: 253: LCDCON = 0b10001000;
  4892  0012CE  0E88               	movlw	136
  4893  0012D0  010F               	movlb	15	; () banked
  4894  0012D2  010F               	movlb	15	; () banked
  4895  0012D4  6F59               	movwf	89,b	;volatile
  4896                           
  4897                           ;main.c: 254: LCDPS = 0b00110110;
  4898  0012D6  0E36               	movlw	54
  4899  0012D8  010F               	movlb	15	; () banked
  4900  0012DA  010F               	movlb	15	; () banked
  4901  0012DC  6F58               	movwf	88,b	;volatile
  4902                           
  4903                           ;main.c: 255: ADCON1 = 0b00111111;
  4904  0012DE  0E3F               	movlw	63
  4905  0012E0  6EC1               	movwf	4033,c	;volatile
  4906                           
  4907                           ;main.c: 256: TRISA = 0b00000011;
  4908  0012E2  0E03               	movlw	3
  4909  0012E4  6E92               	movwf	3986,c	;volatile
  4910                           
  4911                           ;main.c: 257: TRISB = 0b00100001;
  4912  0012E6  0E21               	movlw	33
  4913  0012E8  6E93               	movwf	3987,c	;volatile
  4914                           
  4915                           ;main.c: 258: TRISC = 0b00011000;
  4916  0012EA  0E18               	movlw	24
  4917  0012EC  6E94               	movwf	3988,c	;volatile
  4918                           
  4919                           ;main.c: 259: TRISG = 0b11101111;
  4920  0012EE  0EEF               	movlw	239
  4921  0012F0  6E98               	movwf	3992,c	;volatile
  4922                           
  4923                           ;main.c: 260: PORTA = 0;
  4924  0012F2  0E00               	movlw	0
  4925  0012F4  6E80               	movwf	3968,c	;volatile
  4926                           
  4927                           ;main.c: 261: PORTB = 0;
  4928  0012F6  0E00               	movlw	0
  4929  0012F8  6E81               	movwf	3969,c	;volatile
  4930                           
  4931                           ;main.c: 262: PORTC = 0;
  4932  0012FA  0E00               	movlw	0
  4933  0012FC  6E82               	movwf	3970,c	;volatile
  4934                           
  4935                           ; BSR set to: 15
  4936                           ;main.c: 263: INTCONbits.TMR0IF = 0;
  4937  0012FE  94F2               	bcf	intcon,2,c	;volatile
  4938                           
  4939                           ;main.c: 265: T0CON = 0b00001000;
  4940  001300  0E08               	movlw	8
  4941  001302  6ED5               	movwf	4053,c	;volatile
  4942                           
  4943                           ;main.c: 266: TMR0H = 0;
  4944  001304  0E00               	movlw	0
  4945  001306  6ED7               	movwf	4055,c	;volatile
  4946                           
  4947                           ;main.c: 267: TMR0L = 0;
  4948  001308  0E00               	movlw	0
  4949  00130A  6ED6               	movwf	4054,c	;volatile
  4950                           
  4951                           ; BSR set to: 15
  4952                           ;main.c: 268: T0CONbits.TMR0ON = 1;
  4953  00130C  8ED5               	bsf	4053,7,c	;volatile
  4954                           
  4955                           ; BSR set to: 15
  4956                           ;main.c: 269: OpenI2C( 0b00001000, 0b10000000);
  4957  00130E  6E03               	movwf	??_Init& (0+255),c
  4958  001310  0E08               	movlw	8
  4959  001312  6E01               	movwf	?_OpenI2C,c
  4960  001314  5003               	movf	??_Init& (0+255),w,c
  4961  001316  6E04               	movwf	(??_Init+1)& (0+255),c
  4962  001318  0E80               	movlw	128
  4963  00131A  6E02               	movwf	?_OpenI2C+1,c
  4964  00131C  5004               	movf	(??_Init+1)& (0+255),w,c
  4965  00131E  EC5B  F00B         	call	_OpenI2C	;wreg free
  4966                           
  4967                           ;main.c: 270: SSPADD = 0x3F;
  4968  001322  0E3F               	movlw	63
  4969  001324  6EC8               	movwf	4040,c	;volatile
  4970  001326  0012               	return	
  4971  001328                     __end_of_Init:
  4972                           	opt stack 0
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           postinc0	equ	0xFEE
  4981                           wreg	equ	0xFE8
  4982                           postinc1	equ	0xFE6
  4983                           postdec1	equ	0xFE5
  4984                           fsr1l	equ	0xFE1
  4985                           indf2	equ	0xFDF
  4986                           postinc2	equ	0xFDE
  4987                           postdec2	equ	0xFDD
  4988                           fsr2h	equ	0xFDA
  4989                           fsr2l	equ	0xFD9
  4990                           status	equ	0xFD8
  4991                           
  4992 ;; *************** function _OpenI2C *****************
  4993 ;; Defined at:
  4994 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.20\sources\pic18\plib\i2c\i2c_open.c"
  4995 ;; Parameters:    Size  Location     Type
  4996 ;;  sync_mode       1    0[COMRAM] unsigned char 
  4997 ;;  slew            1    1[COMRAM] unsigned char 
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/0
  5006 ;;		On exit  : 0/0
  5007 ;;		Unchanged: 0/0
  5008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5009 ;;      Params:         2       0       0       0
  5010 ;;      Locals:         0       0       0       0
  5011 ;;      Temps:          0       0       0       0
  5012 ;;      Totals:         2       0       0       0
  5013 ;;Total ram usage:        2 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; This function calls:
  5016 ;;		Nothing
  5017 ;; This function is called by:
  5018 ;;		_Init
  5019 ;; This function uses a non-reentrant model
  5020 ;;
  5021                           
  5022                           	psect	text25
  5023  0016B6                     __ptext25:
  5024                           	opt stack 0
  5025  0016B6                     _OpenI2C:
  5026                           	opt stack 28
  5027                           
  5028                           ;incstack = 0
  5029                           ;incstack = 0
  5030  0016B6  0E3F               	movlw	63
  5031  0016B8  16C7               	andwf	4039,f,c	;volatile
  5032  0016BA  0E00               	movlw	0
  5033  0016BC  6EC6               	movwf	4038,c	;volatile
  5034  0016BE  0E00               	movlw	0
  5035  0016C0  6EC5               	movwf	4037,c	;volatile
  5036  0016C2  5001               	movf	OpenI2C@sync_mode,w,c
  5037  0016C4  12C6               	iorwf	4038,f,c	;volatile
  5038  0016C6  5002               	movf	OpenI2C@slew,w,c
  5039  0016C8  12C7               	iorwf	4039,f,c	;volatile
  5040  0016CA  8694               	bsf	3988,3,c	;volatile
  5041  0016CC  8894               	bsf	3988,4,c	;volatile
  5042  0016CE  8AC6               	bsf	4038,5,c	;volatile
  5043  0016D0  0012               	return	
  5044  0016D2                     __end_of_OpenI2C:
  5045                           	opt stack 0
  5046                           tblptru	equ	0xFF8
  5047                           tblptrh	equ	0xFF7
  5048                           tblptrl	equ	0xFF6
  5049                           tablat	equ	0xFF5
  5050                           prodh	equ	0xFF4
  5051                           prodl	equ	0xFF3
  5052                           intcon	equ	0xFF2
  5053                           postinc0	equ	0xFEE
  5054                           wreg	equ	0xFE8
  5055                           postinc1	equ	0xFE6
  5056                           postdec1	equ	0xFE5
  5057                           fsr1l	equ	0xFE1
  5058                           indf2	equ	0xFDF
  5059                           postinc2	equ	0xFDE
  5060                           postdec2	equ	0xFDD
  5061                           fsr2h	equ	0xFDA
  5062                           fsr2l	equ	0xFD9
  5063                           status	equ	0xFD8
  5064                           
  5065 ;; *************** function _butnEvent *****************
  5066 ;; Defined at:
  5067 ;;		line 82 in file "main.c"
  5068 ;; Parameters:    Size  Location     Type
  5069 ;;  butn            2    4[COMRAM] PTR unsigned char 
  5070 ;;		 -> main@btn(1), 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  returnVal       1    8[COMRAM] unsigned char 
  5073 ;;  newPin          1    7[COMRAM] unsigned char 
  5074 ;;  oldPin          1    6[COMRAM] unsigned char 
  5075 ;; Return value:  Size  Location     Type
  5076 ;;                  1    wreg      unsigned char 
  5077 ;; Registers used:
  5078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5084 ;;      Params:         2       0       0       0
  5085 ;;      Locals:         3       0       0       0
  5086 ;;      Temps:          0       0       0       0
  5087 ;;      Totals:         5       0       0       0
  5088 ;;Total ram usage:        5 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    1
  5091 ;; This function calls:
  5092 ;;		_testPinState
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           	psect	text26
  5099  000770                     __ptext26:
  5100                           	opt stack 0
  5101  000770                     _butnEvent:
  5102                           	opt stack 28
  5103                           
  5104                           ;main.c: 85: unsigned char newPin, oldPin, returnVal;
  5105                           ;main.c: 88: newPin = PORTB & 0b00000001;
  5106                           
  5107                           ;incstack = 0
  5108                           ;incstack = 0
  5109  000770  5081               	movf	3969,w,c	;volatile
  5110  000772  0B01               	andlw	1
  5111  000774  6E08               	movwf	butnEvent@newPin,c
  5112                           
  5113                           ;main.c: 89: newPin ^= 0b00000001;
  5114  000776  0E01               	movlw	1
  5115  000778  1A08               	xorwf	butnEvent@newPin,f,c
  5116                           
  5117                           ;main.c: 90: oldPin = *butn & 0b00000001;
  5118  00077A  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5119  00077E  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5120  000782  50DF               	movf	indf2,w,c
  5121  000784  0B01               	andlw	1
  5122  000786  6E07               	movwf	butnEvent@oldPin,c
  5123                           
  5124                           ;main.c: 91: returnVal = testPinState(oldPin, newPin, butn);
  5125  000788  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5126  00078C  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5127  000790  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5128  000794  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5129  000798  EC2D  F00B         	call	_testPinState	;wreg free
  5130  00079C  6E09               	movwf	butnEvent@returnVal,c
  5131                           
  5132                           ;main.c: 92: if(returnVal !=0)
  5133  00079E  5009               	movf	butnEvent@returnVal,w,c
  5134  0007A0  A4D8               	btfss	status,2,c
  5135  0007A2  D0CA               	goto	L13
  5136                           
  5137                           ;main.c: 96: newPin = PORTB & 0b00100000;
  5138                           
  5139                           ;main.c: 93: return returnVal;
  5140  0007A4  5081               	movf	3969,w,c	;volatile
  5141  0007A6  0B20               	andlw	32
  5142  0007A8  6E08               	movwf	butnEvent@newPin,c
  5143                           
  5144                           ;main.c: 97: newPin ^= 0b00100000;
  5145  0007AA  0E20               	movlw	32
  5146  0007AC  1A08               	xorwf	butnEvent@newPin,f,c
  5147                           
  5148                           ;main.c: 98: newPin >>= 4;
  5149  0007AE  3A08               	swapf	butnEvent@newPin,f,c
  5150  0007B0  0E0F               	movlw	15
  5151  0007B2  1608               	andwf	butnEvent@newPin,f,c
  5152                           
  5153                           ;main.c: 99: oldPin = *butn & 0b00000010;
  5154  0007B4  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5155  0007B8  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5156  0007BC  50DF               	movf	indf2,w,c
  5157  0007BE  0B02               	andlw	2
  5158  0007C0  6E07               	movwf	butnEvent@oldPin,c
  5159                           
  5160                           ;main.c: 100: returnVal = testPinState(oldPin, newPin, butn);
  5161  0007C2  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5162  0007C6  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5163  0007CA  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5164  0007CE  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5165  0007D2  EC2D  F00B         	call	_testPinState	;wreg free
  5166  0007D6  6E09               	movwf	butnEvent@returnVal,c
  5167                           
  5168                           ;main.c: 101: if(returnVal !=0)
  5169  0007D8  5009               	movf	butnEvent@returnVal,w,c
  5170  0007DA  A4D8               	btfss	status,2,c
  5171  0007DC  D0AD               	goto	L13
  5172                           
  5173                           ;main.c: 105: newPin = PORTA & 0b00000001;
  5174                           
  5175                           ;main.c: 102: return returnVal;
  5176  0007DE  5080               	movf	3968,w,c	;volatile
  5177  0007E0  0B01               	andlw	1
  5178  0007E2  6E08               	movwf	butnEvent@newPin,c
  5179                           
  5180                           ;main.c: 106: newPin ^= 0b00000001;
  5181  0007E4  0E01               	movlw	1
  5182  0007E6  1A08               	xorwf	butnEvent@newPin,f,c
  5183                           
  5184                           ;main.c: 107: newPin <<= 2;
  5185  0007E8  90D8               	bcf	status,0,c
  5186  0007EA  3608               	rlcf	butnEvent@newPin,f,c
  5187  0007EC  90D8               	bcf	status,0,c
  5188  0007EE  3608               	rlcf	butnEvent@newPin,f,c
  5189                           
  5190                           ;main.c: 108: oldPin = *butn & 0b00000100;
  5191  0007F0  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5192  0007F4  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5193  0007F8  50DF               	movf	indf2,w,c
  5194  0007FA  0B04               	andlw	4
  5195  0007FC  6E07               	movwf	butnEvent@oldPin,c
  5196                           
  5197                           ;main.c: 109: returnVal = testPinState(oldPin, newPin, butn);
  5198  0007FE  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5199  000802  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5200  000806  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5201  00080A  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5202  00080E  EC2D  F00B         	call	_testPinState	;wreg free
  5203  000812  6E09               	movwf	butnEvent@returnVal,c
  5204                           
  5205                           ;main.c: 110: if(returnVal !=0)
  5206  000814  5009               	movf	butnEvent@returnVal,w,c
  5207  000816  A4D8               	btfss	status,2,c
  5208  000818  D08F               	goto	L13
  5209                           
  5210                           ;main.c: 114: newPin = PORTA & 0b00000010;
  5211                           
  5212                           ;main.c: 111: return returnVal;
  5213  00081A  5080               	movf	3968,w,c	;volatile
  5214  00081C  0B02               	andlw	2
  5215  00081E  6E08               	movwf	butnEvent@newPin,c
  5216                           
  5217                           ;main.c: 115: newPin ^= 0b00000010;
  5218  000820  0E02               	movlw	2
  5219  000822  1A08               	xorwf	butnEvent@newPin,f,c
  5220                           
  5221                           ;main.c: 116: newPin <<= 2;
  5222  000824  90D8               	bcf	status,0,c
  5223  000826  3608               	rlcf	butnEvent@newPin,f,c
  5224  000828  90D8               	bcf	status,0,c
  5225  00082A  3608               	rlcf	butnEvent@newPin,f,c
  5226                           
  5227                           ;main.c: 117: oldPin = *butn & 0b00001000;
  5228  00082C  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5229  000830  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5230  000834  50DF               	movf	indf2,w,c
  5231  000836  0B08               	andlw	8
  5232  000838  6E07               	movwf	butnEvent@oldPin,c
  5233                           
  5234                           ;main.c: 118: returnVal = testPinState(oldPin, newPin, butn);
  5235  00083A  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5236  00083E  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5237  000842  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5238  000846  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5239  00084A  EC2D  F00B         	call	_testPinState	;wreg free
  5240  00084E  6E09               	movwf	butnEvent@returnVal,c
  5241                           
  5242                           ;main.c: 119: if(returnVal !=0)
  5243  000850  5009               	movf	butnEvent@returnVal,w,c
  5244  000852  A4D8               	btfss	status,2,c
  5245  000854  D071               	goto	L13
  5246                           
  5247                           ;main.c: 123: newPin = PORTG & 0b00000001;
  5248                           
  5249                           ;main.c: 120: return returnVal;
  5250  000856  5086               	movf	3974,w,c	;volatile
  5251  000858  0B01               	andlw	1
  5252  00085A  6E08               	movwf	butnEvent@newPin,c
  5253                           
  5254                           ;main.c: 124: newPin ^= 0b00000001;
  5255  00085C  0E01               	movlw	1
  5256  00085E  1A08               	xorwf	butnEvent@newPin,f,c
  5257                           
  5258                           ;main.c: 125: newPin <<= 4;
  5259  000860  3A08               	swapf	butnEvent@newPin,f,c
  5260  000862  0EF0               	movlw	240
  5261  000864  1608               	andwf	butnEvent@newPin,f,c
  5262                           
  5263                           ;main.c: 126: oldPin = *butn & 0b00010000;
  5264  000866  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5265  00086A  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5266  00086E  50DF               	movf	indf2,w,c
  5267  000870  0B10               	andlw	16
  5268  000872  6E07               	movwf	butnEvent@oldPin,c
  5269                           
  5270                           ;main.c: 127: returnVal = testPinState(oldPin, newPin, butn);
  5271  000874  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5272  000878  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5273  00087C  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5274  000880  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5275  000884  EC2D  F00B         	call	_testPinState	;wreg free
  5276  000888  6E09               	movwf	butnEvent@returnVal,c
  5277                           
  5278                           ;main.c: 128: if(returnVal !=0)
  5279  00088A  5009               	movf	butnEvent@returnVal,w,c
  5280  00088C  A4D8               	btfss	status,2,c
  5281  00088E  D054               	goto	L13
  5282                           
  5283                           ;main.c: 132: newPin = PORTG & 0b00000010;
  5284                           
  5285                           ;main.c: 129: return returnVal;
  5286  000890  5086               	movf	3974,w,c	;volatile
  5287  000892  0B02               	andlw	2
  5288  000894  6E08               	movwf	butnEvent@newPin,c
  5289                           
  5290                           ;main.c: 133: newPin ^= 0b00000010;
  5291  000896  0E02               	movlw	2
  5292  000898  1A08               	xorwf	butnEvent@newPin,f,c
  5293                           
  5294                           ;main.c: 134: newPin <<= 4;
  5295  00089A  3A08               	swapf	butnEvent@newPin,f,c
  5296  00089C  0EF0               	movlw	240
  5297  00089E  1608               	andwf	butnEvent@newPin,f,c
  5298                           
  5299                           ;main.c: 135: oldPin = *butn & 0b00100000;
  5300  0008A0  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5301  0008A4  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5302  0008A8  50DF               	movf	indf2,w,c
  5303  0008AA  0B20               	andlw	32
  5304  0008AC  6E07               	movwf	butnEvent@oldPin,c
  5305                           
  5306                           ;main.c: 136: returnVal = testPinState(oldPin, newPin, butn);
  5307  0008AE  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5308  0008B2  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5309  0008B6  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5310  0008BA  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5311  0008BE  EC2D  F00B         	call	_testPinState	;wreg free
  5312  0008C2  6E09               	movwf	butnEvent@returnVal,c
  5313                           
  5314                           ;main.c: 137: if(returnVal !=0)
  5315  0008C4  5009               	movf	butnEvent@returnVal,w,c
  5316  0008C6  A4D8               	btfss	status,2,c
  5317  0008C8  D037               	goto	L13
  5318                           
  5319                           ;main.c: 141: newPin = PORTG & 0b00000100;
  5320                           
  5321                           ;main.c: 138: return returnVal;
  5322  0008CA  5086               	movf	3974,w,c	;volatile
  5323  0008CC  0B04               	andlw	4
  5324  0008CE  6E08               	movwf	butnEvent@newPin,c
  5325                           
  5326                           ;main.c: 142: newPin ^= 0b00000100;
  5327  0008D0  0E04               	movlw	4
  5328  0008D2  1A08               	xorwf	butnEvent@newPin,f,c
  5329                           
  5330                           ;main.c: 143: newPin <<= 4;
  5331  0008D4  3A08               	swapf	butnEvent@newPin,f,c
  5332  0008D6  0EF0               	movlw	240
  5333  0008D8  1608               	andwf	butnEvent@newPin,f,c
  5334                           
  5335                           ;main.c: 144: oldPin = *butn & 0b01000000;
  5336  0008DA  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5337  0008DE  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5338  0008E2  50DF               	movf	indf2,w,c
  5339  0008E4  0B40               	andlw	64
  5340  0008E6  6E07               	movwf	butnEvent@oldPin,c
  5341                           
  5342                           ;main.c: 145: returnVal = testPinState(oldPin, newPin, butn);
  5343  0008E8  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5344  0008EC  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5345  0008F0  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5346  0008F4  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5347  0008F8  EC2D  F00B         	call	_testPinState	;wreg free
  5348  0008FC  6E09               	movwf	butnEvent@returnVal,c
  5349                           
  5350                           ;main.c: 146: if(returnVal !=0)
  5351  0008FE  5009               	movf	butnEvent@returnVal,w,c
  5352  000900  A4D8               	btfss	status,2,c
  5353  000902  D01A               	goto	L13
  5354                           
  5355                           ;main.c: 150: newPin = PORTG & 0b00001000;
  5356                           
  5357                           ;main.c: 147: return returnVal;
  5358  000904  5086               	movf	3974,w,c	;volatile
  5359  000906  0B08               	andlw	8
  5360  000908  6E08               	movwf	butnEvent@newPin,c
  5361                           
  5362                           ;main.c: 151: newPin ^= 0b00001000;
  5363  00090A  0E08               	movlw	8
  5364  00090C  1A08               	xorwf	butnEvent@newPin,f,c
  5365                           
  5366                           ;main.c: 152: newPin <<= 4;
  5367  00090E  3A08               	swapf	butnEvent@newPin,f,c
  5368  000910  0EF0               	movlw	240
  5369  000912  1608               	andwf	butnEvent@newPin,f,c
  5370                           
  5371                           ;main.c: 153: oldPin = *butn & 0b10000000;
  5372  000914  C005  FFD9         	movff	butnEvent@butn,fsr2l
  5373  000918  C006  FFDA         	movff	butnEvent@butn+1,fsr2h
  5374  00091C  50DF               	movf	indf2,w,c
  5375  00091E  0B80               	andlw	128
  5376  000920  6E07               	movwf	butnEvent@oldPin,c
  5377                           
  5378                           ;main.c: 154: returnVal = testPinState(oldPin, newPin, butn);
  5379  000922  C007  F001         	movff	butnEvent@oldPin,?_testPinState
  5380  000926  C008  F002         	movff	butnEvent@newPin,?_testPinState+1
  5381  00092A  C005  F003         	movff	butnEvent@butn,?_testPinState+2
  5382  00092E  C006  F004         	movff	butnEvent@butn+1,?_testPinState+3
  5383  000932  EC2D  F00B         	call	_testPinState	;wreg free
  5384  000936  6E09               	movwf	butnEvent@returnVal,c
  5385  000938                     L13:
  5386                           
  5387                           ;main.c: 156: return returnVal;
  5388  000938  5009               	movf	butnEvent@returnVal,w,c
  5389  00093A  0012               	return	
  5390  00093C                     __end_of_butnEvent:
  5391                           	opt stack 0
  5392                           tblptru	equ	0xFF8
  5393                           tblptrh	equ	0xFF7
  5394                           tblptrl	equ	0xFF6
  5395                           tablat	equ	0xFF5
  5396                           prodh	equ	0xFF4
  5397                           prodl	equ	0xFF3
  5398                           intcon	equ	0xFF2
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           postinc1	equ	0xFE6
  5402                           postdec1	equ	0xFE5
  5403                           fsr1l	equ	0xFE1
  5404                           indf2	equ	0xFDF
  5405                           postinc2	equ	0xFDE
  5406                           postdec2	equ	0xFDD
  5407                           fsr2h	equ	0xFDA
  5408                           fsr2l	equ	0xFD9
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _testPinState *****************
  5412 ;; Defined at:
  5413 ;;		line 169 in file "main.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  oldPin          1    0[COMRAM] unsigned char 
  5416 ;;  newPin          1    1[COMRAM] unsigned char 
  5417 ;;  butn            2    2[COMRAM] PTR unsigned char 
  5418 ;;		 -> main@btn(1), 
  5419 ;; Auto vars:     Size  Location     Type
  5420 ;;		None
  5421 ;; Return value:  Size  Location     Type
  5422 ;;                  1    wreg      unsigned char 
  5423 ;; Registers used:
  5424 ;;		wreg, fsr2l, fsr2h, status,2
  5425 ;; Tracked objects:
  5426 ;;		On entry : 0/0
  5427 ;;		On exit  : 0/0
  5428 ;;		Unchanged: 0/0
  5429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5430 ;;      Params:         4       0       0       0
  5431 ;;      Locals:         0       0       0       0
  5432 ;;      Temps:          0       0       0       0
  5433 ;;      Totals:         4       0       0       0
  5434 ;;Total ram usage:        4 bytes
  5435 ;; Hardware stack levels used:    1
  5436 ;; This function calls:
  5437 ;;		Nothing
  5438 ;; This function is called by:
  5439 ;;		_butnEvent
  5440 ;; This function uses a non-reentrant model
  5441 ;;
  5442                           
  5443                           	psect	text27
  5444  00165A                     __ptext27:
  5445                           	opt stack 0
  5446  00165A                     _testPinState:
  5447                           	opt stack 28
  5448                           
  5449                           ;main.c: 172: if( newPin == oldPin)
  5450                           
  5451                           ;incstack = 0
  5452                           ;incstack = 0
  5453  00165A  5001               	movf	testPinState@oldPin,w,c
  5454  00165C  6202               	cpfseq	testPinState@newPin,c
  5455  00165E  D002               	goto	l1933
  5456                           
  5457                           ;main.c: 173: return 0;
  5458  001660  0E00               	movlw	0
  5459  001662  D00B               	goto	l96
  5460  001664                     l1933:
  5461                           
  5462                           ;main.c: 175: *butn = newPin;
  5463  001664  C003  FFD9         	movff	testPinState@butn,fsr2l
  5464  001668  C004  FFDA         	movff	testPinState@butn+1,fsr2h
  5465  00166C  C002  FFDF         	movff	testPinState@newPin,indf2
  5466                           
  5467                           ;main.c: 177: if(newPin == 0)
  5468  001670  6602               	tstfsz	testPinState@newPin,c
  5469  001672  D002               	goto	l1941
  5470                           
  5471                           ;main.c: 178: return 2;
  5472  001674  0E02               	movlw	2
  5473  001676  D001               	goto	l96
  5474  001678                     l1941:
  5475                           
  5476                           ;main.c: 180: return 1;
  5477  001678  0E01               	movlw	1
  5478  00167A                     l96:
  5479  00167A  0012               	return	
  5480  00167C                     __end_of_testPinState:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           intcon	equ	0xFF2
  5489                           postinc0	equ	0xFEE
  5490                           wreg	equ	0xFE8
  5491                           postinc1	equ	0xFE6
  5492                           postdec1	equ	0xFE5
  5493                           fsr1l	equ	0xFE1
  5494                           indf2	equ	0xFDF
  5495                           postinc2	equ	0xFDE
  5496                           postdec2	equ	0xFDD
  5497                           fsr2h	equ	0xFDA
  5498                           fsr2l	equ	0xFD9
  5499                           status	equ	0xFD8
  5500                           
  5501 ;; *************** function ___wmul *****************
  5502 ;; Defined at:
  5503 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.20\sources\common\wmul.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  multiplier      2    8[COMRAM] unsigned int 
  5506 ;;  multiplicand    2   10[COMRAM] unsigned int 
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;  product         2   12[COMRAM] unsigned int 
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  2    8[COMRAM] unsigned int 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2, status,0, prodl, prodh
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2
  5518 ;;      Params:         4       0       0       0
  5519 ;;      Locals:         2       0       0       0
  5520 ;;      Temps:          0       0       0       0
  5521 ;;      Totals:         6       0       0       0
  5522 ;;Total ram usage:        6 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; This function calls:
  5525 ;;		Nothing
  5526 ;; This function is called by:
  5527 ;;		_showFreq
  5528 ;;		_main
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text28
  5533  0015C6                     __ptext28:
  5534                           	opt stack 0
  5535  0015C6                     ___wmul:
  5536                           	opt stack 29
  5537                           
  5538                           ;incstack = 0
  5539                           ;incstack = 0
  5540  0015C6  5009               	movf	___wmul@multiplier,w,c
  5541  0015C8  020B               	mulwf	___wmul@multiplicand,c
  5542  0015CA  CFF3 F00D          	movff	prodl,___wmul@product
  5543  0015CE  CFF4 F00E          	movff	prodh,___wmul@product+1
  5544  0015D2  5009               	movf	___wmul@multiplier,w,c
  5545  0015D4  020C               	mulwf	___wmul@multiplicand+1,c
  5546  0015D6  CFF3 FFF4          	movff	prodl,prodh
  5547  0015DA  6AF3               	clrf	prodl,c
  5548  0015DC  50F3               	movf	prodl,w,c
  5549  0015DE  260D               	addwf	___wmul@product,f,c
  5550  0015E0  50F4               	movf	prodh,w,c
  5551  0015E2  220E               	addwfc	___wmul@product+1,f,c
  5552  0015E4  500A               	movf	___wmul@multiplier+1,w,c
  5553  0015E6  020B               	mulwf	___wmul@multiplicand,c
  5554  0015E8  CFF3 FFF4          	movff	prodl,prodh
  5555  0015EC  6AF3               	clrf	prodl,c
  5556  0015EE  50F3               	movf	prodl,w,c
  5557  0015F0  260D               	addwf	___wmul@product,f,c
  5558  0015F2  50F4               	movf	prodh,w,c
  5559  0015F4  220E               	addwfc	___wmul@product+1,f,c
  5560  0015F6  C00D  F009         	movff	___wmul@product,?___wmul
  5561  0015FA  C00E  F00A         	movff	___wmul@product+1,?___wmul+1
  5562  0015FE  0012               	return	
  5563  001600                     __end_of___wmul:
  5564                           	opt stack 0
  5565                           tblptru	equ	0xFF8
  5566                           tblptrh	equ	0xFF7
  5567                           tblptrl	equ	0xFF6
  5568                           tablat	equ	0xFF5
  5569                           prodh	equ	0xFF4
  5570                           prodl	equ	0xFF3
  5571                           intcon	equ	0xFF2
  5572                           postinc0	equ	0xFEE
  5573                           wreg	equ	0xFE8
  5574                           postinc1	equ	0xFE6
  5575                           postdec1	equ	0xFE5
  5576                           fsr1l	equ	0xFE1
  5577                           indf2	equ	0xFDF
  5578                           postinc2	equ	0xFDE
  5579                           postdec2	equ	0xFDD
  5580                           fsr2h	equ	0xFDA
  5581                           fsr2l	equ	0xFD9
  5582                           status	equ	0xFD8
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           postinc0	equ	0xFEE
  5591                           wreg	equ	0xFE8
  5592                           postinc1	equ	0xFE6
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           postinc2	equ	0xFDE
  5597                           postdec2	equ	0xFDD
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602                           	psect	rparam
  5603  0000                     tblptru	equ	0xFF8
  5604                           tblptrh	equ	0xFF7
  5605                           tblptrl	equ	0xFF6
  5606                           tablat	equ	0xFF5
  5607                           prodh	equ	0xFF4
  5608                           prodl	equ	0xFF3
  5609                           intcon	equ	0xFF2
  5610                           postinc0	equ	0xFEE
  5611                           wreg	equ	0xFE8
  5612                           postinc1	equ	0xFE6
  5613                           postdec1	equ	0xFE5
  5614                           fsr1l	equ	0xFE1
  5615                           indf2	equ	0xFDF
  5616                           postinc2	equ	0xFDE
  5617                           postdec2	equ	0xFDD
  5618                           fsr2h	equ	0xFDA
  5619                           fsr2l	equ	0xFD9
  5620                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    161
    Data        96
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     57      66
    BANK0           160      0     126
    BANK1           256      0       0
    BANK2           244      0       0

Pointer List with Targets:

    ?_displayText	int  size(2) Largest target is 0

    ?_setScan	unsigned int  size(2) Largest target is 0

    ?___wmul	unsigned int  size(2) Largest target is 0

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_nextChan	unsigned int  size(2) Largest target is 0

    ?_volSet	unsigned int  size(2) Largest target is 0

    ?_manualTune	unsigned int  size(2) Largest target is 0

    displayText@str	PTR unsigned char  size(2) Largest target is 90
		 -> stationName(BANK0[90]), main@welcomeMessage(COMRAM[6]), 

    FMvers@vsn	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), 

    FMready@rdy	PTR unsigned int  size(2) Largest target is 2
		 -> setScan@dat(COMRAM[2]), FMfrequenc@dat(COMRAM[2]), FMinit@dat(COMRAM[2]), 

    FMread@data	PTR unsigned int  size(2) Largest target is 2
		 -> main@ui(COMRAM[2]), setScan@chanRgstr(COMRAM[2]), FMready@sts(COMRAM[2]), 

    segWrt@LCReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(DATA[1]), 

    testPinState@butn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 

    butnEvent@butn	PTR unsigned char  size(2) Largest target is 1
		 -> main@btn(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_nextChan
    _displayText->___wmul
    _setScan->_FMready
    _showChan->_setscn
    _showVol->_setscn
    _showFreq->___wmul
    _nextChan->_FMfrequenc
    _volSet->_FMwrite
    _FMvers->_FMread
    _FMinit->_FMready
    _manualTune->_FMfrequenc
    _FMfrequenc->_FMready
    _FMready->_FMread
    _FMread->_WriteI2C
    _FMwrite->_WriteI2C
    _Init->_OpenI2C
    _butnEvent->_testPinState
    ___wmul->___lwdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    26      0    8077
                                             31 COMRAM    26    26      0
                          _butnEvent
                                _dly
                               _Init
                              _errfm
                         _manualTune
                         _FMfrequenc
                             _FMinit
                             _FMvers
                             _volSet
                           _nextChan
                           _showFreq
                            _showVol
                           _showChan
                            _setScan
                        _displayText
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _displayText                                         15    11      4     540
                                             14 COMRAM    15    11      4
                             _segWrt
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _setScan                                             10     8      2     802
                                             18 COMRAM     8     6      2
                                _dly
                              _errfm
                            _FMwrite
                             _FMread
                            _FMready
 ---------------------------------------------------------------------------------
 (1) _showChan                                             3     1      2     246
                                              3 COMRAM     3     1      2
                             _setscn
                            _charWrt
 ---------------------------------------------------------------------------------
 (1) _showVol                                              4     2      2     269
                                              3 COMRAM     4     2      2
                             _setscn
                            _charWrt
 ---------------------------------------------------------------------------------
 (2) _setscn                                               3     2      1     113
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) _showFreq                                             7     5      2     862
                                             14 COMRAM     7     5      2
                             _segWrt
                            _charWrt
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     162
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _charWrt                                              2     0      2     111
                                              0 COMRAM     2     0      2
                              _errfm
 ---------------------------------------------------------------------------------
 (2) _segWrt                                               7     5      2     178
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _nextChan                                             5     2      3     705
                                             26 COMRAM     5     2      3
                              _errfm
                         _FMfrequenc
 ---------------------------------------------------------------------------------
 (1) _volSet                                               7     4      3     312
                                              6 COMRAM     7     4      3
                              _errfm
                            _FMwrite
 ---------------------------------------------------------------------------------
 (1) _FMvers                                               3     1      2     200
                                             12 COMRAM     3     1      2
                             _FMread
 ---------------------------------------------------------------------------------
 (1) _FMinit                                               5     5      0     661
                                             18 COMRAM     5     5      0
                                _dly
                            _FMwrite
                            _FMready
 ---------------------------------------------------------------------------------
 (1) _manualTune                                           3     0      3     705
                                             26 COMRAM     3     0      3
                              _errfm
                         _FMfrequenc
 ---------------------------------------------------------------------------------
 (2) _FMfrequenc                                           8     6      2     525
                                             18 COMRAM     8     6      2
                                _dly
                            _FMwrite
                            _FMready
 ---------------------------------------------------------------------------------
 (2) _FMready                                              6     4      2     252
                                             12 COMRAM     6     4      2
                             _FMread
 ---------------------------------------------------------------------------------
 (3) _FMread                                              11     8      3     178
                                              1 COMRAM    11     8      3
                            _IdleI2C
                           _WriteI2C
                            _ReadI2C
 ---------------------------------------------------------------------------------
 (4) _ReadI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FMwrite                                              8     7      1     134
                                              1 COMRAM     5     4      1
                            _IdleI2C
                           _WriteI2C
 ---------------------------------------------------------------------------------
 (4) _WriteI2C                                             1     0      1      22
                                              0 COMRAM     1     0      1
                            _IdleI2C
 ---------------------------------------------------------------------------------
 (5) _IdleI2C                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _dly                                                  4     2      2      48
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _errfm                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 4     4      0      44
                                              2 COMRAM     2     2      0
                            _OpenI2C
 ---------------------------------------------------------------------------------
 (2) _OpenI2C                                              2     0      2      44
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _butnEvent                                            5     3      2    1183
                                              4 COMRAM     5     3      2
                       _testPinState
 ---------------------------------------------------------------------------------
 (2) _testPinState                                         4     0      4     110
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     159
                                              8 COMRAM     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _butnEvent
     _testPinState
   _dly
   _Init
     _OpenI2C
   _errfm
   _manualTune
     _errfm
     _FMfrequenc
       _dly
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _FMready
         _FMread
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _ReadI2C
   _FMfrequenc
     _dly
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _FMinit
     _dly
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _FMvers
     _FMread
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
   _volSet
     _errfm
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
   _nextChan
     _errfm
     _FMfrequenc
       _dly
       _FMwrite
         _IdleI2C
         _WriteI2C
           _IdleI2C
       _FMready
         _FMread
           _IdleI2C
           _WriteI2C
             _IdleI2C
           _ReadI2C
   _showFreq
     _segWrt
     _charWrt
       _errfm
     ___lwdiv
     ___wmul
       ___lwdiv (ARG)
   _showVol
     _setscn
     _charWrt
       _errfm
   _showChan
     _setscn
     _charWrt
       _errfm
   _setScan
     _dly
     _errfm
     _FMwrite
       _IdleI2C
       _WriteI2C
         _IdleI2C
     _FMread
       _IdleI2C
       _WriteI2C
         _IdleI2C
       _ReadI2C
     _FMready
       _FMread
         _IdleI2C
         _WriteI2C
           _IdleI2C
         _ReadI2C
   _displayText
     _segWrt
     ___wmul (ARG)
       ___lwdiv (ARG)
   ___wmul
     ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             2F3      0       0      10        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2            F4      0       0       8        0.0%
BANK2               F4      0       0       9        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0      7E       4       78.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     39      42       1       69.5%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       6       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C0       7        0.0%
DATA                 0      0      C6      11        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.20 build 52243 
Symbol Table                                                                                   Thu Mar 27 16:16:58 2014

          showVol@volume 0004          butnEvent@oldPin 0007             ?_displayText 000F  
        butnEvent@newPin 0008              __CFG_CP$OFF 000000              _SSPSTATbits 000FC7  
                     l96 167A      ___wmul@multiplicand 000B              __CFG_BORV$3 000000  
                    l220 0F44                      l124 1550                      l118 1388  
                    l126 1556                      l127 155C                      l144 114A  
                    l136 1220                      l209 0C44                      l129 157E  
                    l162 1088                      l154 1032                      l228 16F4  
                    l148 119C                      l180 102E                      l149 1192  
                    l341 16AC                      l165 109E                      l342 16AE  
                    l158 1108                      l174 1536                      l246 09EA  
                    l262 0E28                      l159 1062                      l191 12AE  
                    l168 10A8                      l264 0E5C                      l363 14EA  
                    l366 14B8                      l375 14D8                      l885 148C  
            _stationName 0060                      u924 135A                      u925 1356  
                    _dly 1600                      prod 000FF3                      wreg 000FE8  
           __CFG_WDT$OFF 000000                     l2003 16F6                     l2025 145A  
                   l2027 1462                     l2037 1482                     l2029 1466  
                   l2303 15B4                     l2401 0C34                     l2153 1562  
                   l2321 0D98                     l2219 1168                     l2237 1050  
                   l2157 1568                     l2325 0DC4                     l2167 14A2  
                   l2351 150A                     l2431 0F58                     l2327 0E0E  
                   l2185 14C4                     l2601 0F2E                     l2329 0E12  
                   l2451 0FC2                     l2275 0C78                     l2339 0E50  
                   l2381 0B7E                     l2365 0ACC                     l2605 0F34  
                   l2277 0C8C                     l2701 059C                     l2199 14E8  
                   l2471 100C                     l2527 0A48                     l2519 0A22  
                   l2703 05A4                     l2553 11A0                     l2473 1018  
                   l2563 11D4                     l2643 0442                     l1941 1678  
                   l1933 1664                     l2573 120A                     l2469 0FFE  
                   l2397 0C2E                     l2581 0E60                     l2733 065A  
                   l2725 0620                     l2717 05D0                     l2709 05BA  
                   l2661 04AE                     l1951 161A                     l2559 11BE  
                   l2591 0EC8                     l2663 04BC                     l2569 11F4  
                   l2577 1210                     l1961 163C                     l2753 06EE  
                   l2745 06A0                     l2729 0636                     l2665 04CA  
                   l2681 0532                     l2657 0492                     ?_dly 0001  
                   l1947 160A                     l1955 1628                     l2587 0E98  
                   l1963 1644                     l2739 0674                     l2763 073C  
                   l2691 0568                     l2675 0524                     l2683 054E  
                   l2659 04A0                     l1949 1614                     l2597 0EFE  
                   l2693 056E                     l2677 052C                     l1991 1330  
                   l2695 0584                     l2687 0556                     l2689 055E  
                   l2697 058C                     l1997 1376                     u1180 14E4  
                   u1350 151E                     u1515 0982                     u1611 03FC  
                   u1356 1520                     u1480 0FFA                     u1565 0A6A  
            main@counter 002B                     _Init 12B0          __end_of_FMready 1538  
                   _main 03A2                     dly@d 0001                     dly@i 0003  
                   fsr2h 000FDA                     fsr1l 000FE1                     indf2 000FDF  
                   fsr2l 000FD9          __end_of_FMwrite 119E                     prodh 000FF4  
                   prodl 000FF3                     start 0002            __CFG_IESO$OFF 000000  
        __end_of_IdleI2C 1702            __CFG_MCLRE$ON 000000          __end_of_ReadI2C 16B6  
        __end_of_OpenI2C 16D2                    ??_dly 0003             main@dispOfst 0034  
                  ?_Init 0001                    ?_main 0001                    _T0CON 000FD5  
                  _LCDPS 000F58          __end_of___lwdiv 1496                    _TMR0H 000FD7  
                  _TMR0L 000FD6                    _PORTA 000F80                    _PORTB 000F81  
                  _PORTC 000F82                    _PORTG 000F86                    _TRISA 000F92  
                  _TRISB 000F93                    _TRISC 000F94                    _TRISG 000F98  
        __end_of_charWrt 1580            __CFG_PWRT$OFF 000000           __CFG_FCMEN$OFF 000000  
     displayText@display 0018          __end_of_regDflt 0370          __end_of_segData 03A1  
                  _errfm 16E8              ?_FMfrequenc 0013             displayText@i 001C  
        __end_of_setScan 0ACA           __CFG_BOREN$OFF 000000                    tablat 000FF5  
     butnEvent@returnVal 0009          __end_of_showVol 15C6          __end_of_station 0397  
                  status 000FD8          __initialization 138A             __end_of_Init 1328  
           __end_of_main 0770                   ??_Init 0003                   ??_main 0020  
          __activetblptr 000002        showFreq@frequency 000F                   _ADCON1 000FC1  
              ??_FMready 000F                   ?_errfm 0001         __end_of_WriteI2C 14EC  
              ??_FMwrite 0003                   _LCDCON 000F59                   _LCDSE0 000F5A  
                 _LCDSE1 000F5B                   _LCDSE2 000F5C                   _LCDSE3 000F5D  
            OpenI2C@slew 0002                ??_IdleI2C 0001                   _OSCCON 000FD3  
                 _FMinit 0F4E                   _FMread 1030                   _SSPADD 000FC8  
                 _SSPBUF 000FC9                   _FMvers 16D2                ??_ReadI2C 0001  
              ??_OpenI2C 0003         setScan@chanRgstr 0019           __CFG_XINST$OFF 000000  
                 ___wmul 15C6                ??___lwdiv 0005      __size_of_FMfrequenc 0086  
                 _regImg 00BA                ??_charWrt 0003                   clear_0 1390  
                 _segWrt 1328          showChan@channel 0004                   _setscn 1632  
       __end_of_nextChan 0F4E                   _volSet 0ACA     __size_of_displayText 00F8  
                 main@ui 002E             __pdataCOMRAM 003A         __end_of_showChan 169A  
       __end_of_showFreq 0D66                ??_setScan 0015             __mediumconst 0000  
                 tblptrh 000FF7                   tblptrl 000FF6                   tblptru 000FF8  
              ??_showVol 0006               __accesstop 0060  __end_of__initialization 13DC  
         __pcstackCOMRAM 0001             __pidataBANK0 13E6            __end_of_errfm 16F6  
            segWrt@LCReg 0005       main@welcomeMessage 0022              nextChan@dir 001D  
        __CFG_OSC$INTIO7 000000              segWrt@state 0002                  ??_errfm 0001  
             __pbssBANK0 00BA       __end_of_LCDLetters 038B       __size_of_butnEvent 01CC  
                ?_FMinit 0001                  ?_FMread 0002                  ?_FMvers 000D  
                ?___wmul 0009                  ?_segWrt 0001                ?_WriteI2C 0001  
                ?_setscn 0001                  ?_volSet 0007                FMinit@dat 0015  
                _FMready 14EC                  _SSPCON1 000FC6                  _SSPCON2 000FC5  
           ??_FMfrequenc 0015                  _SSPSTAT 000FC7                  _FMwrite 110A  
                _IdleI2C 16F6          __size_of_FMinit 00E2          __size_of_FMread 00DA  
              FMvers@vsn 000D                  _ReadI2C 169A          __size_of_FMvers 0016  
              ?_nextChan 001B                  _OpenI2C 16B6                  __Hparam 0000  
                __Lparam 0000                ?_showChan 0004                ?_showFreq 000F  
             _manualTune 119E          __size_of___wmul 003A                  ___lwdiv 1440  
           __psmallconst 0300          __CFG_STVREN$OFF 000000                  _charWrt 1538  
                __pcinit 138A               ??_WriteI2C 0002        __end_of_butnEvent 093C  
     __end_of_FMfrequenc 12B0                  __ramtop 0300          __size_of_segWrt 0062  
                __ptext0 03A2                  __ptext1 0D66                  __ptext2 093C  
                __ptext3 167C                  __ptext4 1580                  __ptext5 1632  
                __ptext6 0C4E                  __ptext7 1440                  __ptext8 1538  
                __ptext9 1328          __size_of_setscn 0028          __size_of_volSet 0184  
              _T0CONbits 000FD5                  _regDflt 034C                  _segData 0397  
           __size_of_dly 0032                  _setScan 093C                  _showVol 1580  
                _station 038B                  main@btn 0030           manualTune@freq 001B  
                main@evt 0028                  main@vol 0038     end_of_initialization 13DC  
         displayText@pos 0011           displayText@str 000F            __Lmediumconst 0000  
          ?_testPinState 0001               ??_nextChan 001E              FMfrequenc@f 0013  
             ??_showChan 0006               ??_showFreq 0011                  postdec1 000FE5  
                postdec2 000FDD                  postinc0 000FEE                  postinc1 000FE6  
                postinc2 000FDE         charWrt@numToDisp 0001              setscn@state 0001  
              _TRISCbits 000F94            butnEvent@butn 0005           ??_testPinState 0005  
         __end_of_FMinit 1030           __end_of_FMread 110A           __end_of_FMvers 16E8  
             main@toggle 002D              ?_manualTune 001B               _volumePair 0300  
        showFreq@display 0013          main@charDispCtr 0029            ??_displayText 0013  
         __end_of___wmul 1600            __pidataCOMRAM 1702           __end_of_segWrt 138A  
         __end_of_setscn 165A           __end_of_volSet 0C4E      start_initialization 138A  
            __end_of_dly 1632           charWrt@DigitNo 0002         WriteI2C@data_out 0001  
               ??_FMinit 0013                 ??_FMread 0005                 ??_FMvers 000F  
           nextChan@chan 001B             segWrt@segOrd 0001                 ??___wmul 000D  
            __pdataBANK0 0060                 ??_segWrt 0003                 ??_setscn 0002  
               ??_volSet 000A        __size_of_WriteI2C 0056      __end_of_displayText 0E5E  
            __pbssCOMRAM 0040                 ?_FMready 000D      __size_of_manualTune 008C  
               ?_FMwrite 0002                 ?_IdleI2C 0001                 ?_ReadI2C 0001  
               ?_OpenI2C 0001         ___lwdiv@dividend 0001        __size_of_nextChan 00F0  
             setScan@dat 0017               setScan@dir 0013                 ?___lwdiv 0001  
      __size_of_showChan 001E        __size_of_showFreq 0118                 ?_charWrt 0001  
               FMinit@ad 0017     __end_of_testPinState 167C         testPinState@butn 0003  
            __smallconst 0300                _butnEvent 0770          FMwrite@firstByt 0005  
               ?_setScan 0013                 ?_showVol 0004         ___lwdiv@quotient 0006  
               _LCDDATA0 000F60                 _LCDDATA1 000F61                 _LCDDATA2 000F62  
               _LCDDATA3 000F63          FMwrite@secndByt 0006           __size_of_errfm 000E  
        segWrt@bitSelect 0007            manualTune@dir 001D           ___wmul@product 000D  
         FMread@firstByt 000B               FMread@data 0003                 _PIR1bits 000F9E  
              main@F5991 003A           FMread@secndByt 000C               setscn@data 0003  
             FMready@rdy 000D               FMready@sts 0011              _displayText 0D66  
      ___wmul@multiplier 0009         displayText@F5975 0040       testPinState@oldPin 0001  
     testPinState@newPin 0002               ?_butnEvent 0005                copy_data0 13B0  
              copy_data1 13D0         __size_of_FMready 004C         __size_of_FMwrite 0094  
       OpenI2C@sync_mode 0001         __size_of_IdleI2C 000C         __size_of_ReadI2C 001C  
               __Hrparam 0000         __size_of_OpenI2C 001C                 __Lrparam 0000  
           ??_manualTune 001E               FMwrite@adr 0002         __size_of___lwdiv 0056  
               _WriteI2C 1496         __size_of_charWrt 0048          ___lwdiv@divisor 0003  
       __size_of_setScan 018E          ___lwdiv@counter 0008                 __ptext10 0E5E  
               __ptext11 0ACA                 __ptext20 1496                 __ptext12 16D2  
               __ptext21 16F6                 __ptext13 0F4E                 __ptext22 1600  
               __ptext14 119E                 __ptext23 16E8                 __ptext15 122A  
               __ptext24 12B0                 __ptext16 14EC                 __ptext25 16B6  
               __ptext17 1030                 __ptext26 0770                 __ptext18 169A  
               __ptext27 165A                 __ptext19 110A                 __ptext28 15C6  
       __size_of_showVol 0046       __end_of_manualTune 122A            __size_of_Init 0078  
          __size_of_main 03CE                 _nextChan 0E5E            FMread@regAddr 0002  
               _showChan 167C                 _showFreq 0C4E            FMfrequenc@dat 0019  
             _LCDLetters 0370    __size_of_testPinState 0022                 main@chan 0036  
               main@disp 0031                 main@freq 0032          displayText@flag 001B  
              volSet@dir 0009                volSet@vol 0007              ??_butnEvent 0007  
             _INTCONbits 000FF2             _testPinState 165A             FMfrequenc@cn 0017  
            _SSPCON1bits 000FC6              _SSPCON2bits 000FC5               _FMfrequenc 122A  
     __end_of_volumePair 034C  
